syntax = "proto3";
package kira.staking;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/KiraCore/sekai/x/staking/types";

// Msg defines the staking Msg service.
service Msg {
  // ClaimValidator defines a method for claiming a new validator.
  rpc ClaimValidator(MsgClaimValidator) returns (MsgClaimValidatorResponse);
}

message MsgClaimValidator {
  option (gogoproto.equal)            = true;

  string moniker = 1;
  string website = 2;
  string social = 3;
  string identity = 4;
  string commission = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"commission\""
  ];
  bytes val_key = 6 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",
    (gogoproto.moretags) = "yaml:\"val_key\""
  ];
  google.protobuf.Any pub_key = 7
  [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey", (gogoproto.moretags) = "yaml:\"pub_key\""];
}

// MsgClaimValidatorResponse defines the Msg/ClaimValidator response type.
message MsgClaimValidatorResponse {}

enum ValidatorStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // Undefined status
  UNDEFINED = 0 [(gogoproto.enumvalue_customname) = "Undefined"];

  // Active status
  ACTIVE = 1 [(gogoproto.enumvalue_customname) = "Active"];

  // Inactive status
  INACTIVE = 2 [(gogoproto.enumvalue_customname) = "Inactive"];

  // Paused status
  PAUSED = 3 [(gogoproto.enumvalue_customname) = "Paused"];
}

message Validator {
  option (gogoproto.equal)            = true;

  string moniker = 1;
  string website = 2;
  string social = 3;
  string identity = 4;
  string commission = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (gogoproto.moretags)   = "yaml:\"commission\""
  ];
  bytes val_key = 6 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",
    (gogoproto.moretags) = "yaml:\"val_key\""
  ];
  google.protobuf.Any pub_key = 7
  [(cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey", (gogoproto.moretags) = "yaml:\"pub_key\""];
  ValidatorStatus status = 8;

  // To judge validator performance a streak and rank properties should be created (as part of each validator status data). The streak would imply consecutive number of times that given validator managed to successfully propose a block (since the last time he failed) that was accepted into the blockchain state. The streak property should be zeroed every time validator misses to propose a block and the mischance property is incremented.
  // The rank property should be set to rank = MIN(MAX(rank, streak),rank+streak) every time a streak is larger than rank. Every time a mischance is incremented rank should be decremented by X. Every time node status changes to inactive the rank should be decremented by Y. Finally, every time a node is paused a rank should be decremented by Z.
  // Parameters X (default 10), Y (default 100), Z (default 1), with the appropriate naming schemes should be configurable within the Network Properties Registry.
  // The streak and rank will enable governance to judge real life performance of validators on the mainnet or testnet, and potentially propose eviction of the weakest and least reliable operators.
  int64 rank = 9;
  int64 streak = 10;
}
