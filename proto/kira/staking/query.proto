syntax = "proto3";
package kira.staking;

import "staking.proto";
import "pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/KiraCore/sekai/x/staking/types";

// Query defines the gRPC querier service
service Query {
  // Validators queries a validator by address.
  rpc ValidatorByAddress (ValidatorByAddressRequest) returns (ValidatorResponse) {}

  // Validators queries a validator by moniker.
  rpc ValidatorByMoniker (ValidatorByMonikerRequest) returns (ValidatorResponse) {}

  // Validators queries all validators by pagination
  rpc Validators(ValidatorsRequest) returns (ValidatorsResponse) {
    option (google.api.http).get = "/kira/staking/validators";
  }
}

message ValidatorByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.ValAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message ValidatorByMonikerRequest {
  string moniker = 1;
}

message ValidatorResponse {
  kira.staking.Validator validator = 1 [(gogoproto.nullable) = false];
}

// ValidatorsRequest is the request type for validators query.
message ValidatorsRequest {
  string address = 1;
  string valkey = 2;
  string pubkey = 3;
  string moniker = 4;
  string status = 5;
  string proposer = 6;
  kira.staking.PageRequest pagination = 7 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
  // TODO: should remove 'all' flag when refactoring is done
  bool all = 8;
}

message IdentityRecord {
  option (gogoproto.equal)            = true;
  
  uint64 id = 1;
  map<string, string> infos = 2;
  google.protobuf.Timestamp date = 3 [(gogoproto.stdtime) = true, (gogoproto.nullable) = false];
  repeated string verifiers = 4;
}

message QueryValidator {
  option (gogoproto.equal)            = true;

  string address = 1;
  string valkey = 2;
  string pubkey = 3;
  string proposer = 4;
  string moniker = 5;
  string commission = 6;
  string status = 7;
  int64 rank = 8;
  int64 streak = 9;
  int64 mischance = 10;
  repeated IdentityRecord identity = 11 [(gogoproto.nullable) = false];
}

// ValidatorsResponse is the response type for validators query.
message ValidatorsResponse {
  repeated QueryValidator validators = 1 [(gogoproto.nullable) = false];
  repeated string actors = 2;
  kira.staking.PageResponse pagination = 3 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}
