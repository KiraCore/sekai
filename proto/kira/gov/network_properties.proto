syntax = "proto3";
package kira.gov;

import "gogoproto/gogo.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

message MsgSetNetworkProperties {
    NetworkProperties network_properties = 1;
    bytes proposer = 2 [
      (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
    ];
}

enum NetworkProperty {
    option (gogoproto.goproto_enum_prefix) = false;
  
    MIN_TX_FEE = 0 [(gogoproto.enumvalue_customname) = "MinTxFee"]; // minimum transaction fee
    MAX_TX_FEE = 1 [(gogoproto.enumvalue_customname) = "MaxTxFee"]; // maximum transaction fee
    VOTE_QUORUM = 2 [(gogoproto.enumvalue_customname) = "VoteQuorum"]; // vote quorum to reach to move to enactment
    VOTE_QUORUM_SHORT = 3 [(gogoproto.enumvalue_customname) = "VoteQuorumShort"]; // vote quorum to reach to move to enactment for short durtion proposal
    VOTE_QUORUM_LONG = 4 [(gogoproto.enumvalue_customname) = "VoteQuorumLong"]; // vote quorum to reach to move to enactment for long durtion proposal
    PROPOSAL_END_TIME = 5 [(gogoproto.enumvalue_customname) = "ProposalEndTime"]; // the duration to start processing the proposal
    PROPOSAL_END_TIME_SHORT = 6 [(gogoproto.enumvalue_customname) = "ProposalEndTimeShort"]; // the duration to start processing the proposal for short durtion proposal
    PROPOSAL_END_TIME_LONG = 7 [(gogoproto.enumvalue_customname) = "ProposalEndTimeLong"]; // the duration to start processing the proposal for long durtion proposal
    PROPOSAL_ENACTMENT_TIME = 8 [(gogoproto.enumvalue_customname) = "ProposalEnactmentTime"]; // the duration to wait for enactment after proposal processing
    MIN_PROPOSAL_END_BLOCKS = 9 [(gogoproto.enumvalue_customname) = "MinProposalEndBlocks"]; // minimum blocks required for proposal voting
    MIN_PROPOSAL_ENACTMENT_BLOCKS = 10 [(gogoproto.enumvalue_customname) = "MinProposalEnactmentBlocks"]; // min blocks required for proposal enactment
    ENABLE_FOREIGN_FEE_PAYMENTS = 11 [(gogoproto.enumvalue_customname) = "EnableForeignFeePayments"]; // flag to enable foreign tokens to be used as transaction fee
    MISCHANCE_RANK_DECREASE_AMOUNT = 12 [(gogoproto.enumvalue_customname) = "MischanceRankDecreaseAmount"]; // rank decrease amount per mischance increase (default 10)
    MAX_MISCHANCE = 13 [(gogoproto.enumvalue_customname) = "MaxMischance"]; // maximum mischance a validator could be in active status, default 110
    MISCHANCE_CONFIDENCE = 14 [(gogoproto.enumvalue_customname) = "MischanceConfidence"]; // the number of blocks validator miss to start counting mischance, default 10
    INACTIVE_RANK_DECREASE_PERCENT = 15 [(gogoproto.enumvalue_customname) = "InactiveRankDecreasePercent"]; // percentage of decrease per status movement from active to inactive (default 50%)
    POOR_NETWORK_MAX_BANK_SEND = 16 [(gogoproto.enumvalue_customname) = "PoorNetworkMaxBankSend"]; // maximum amount of transfer on poor network, default 10000ukex
    MIN_VALIDATORS = 17 [(gogoproto.enumvalue_customname) = "MinValidators"]; // minimum number of validators to perform full network actions - otherwise, it's called poor network
    JAIL_MAX_TIME = 18 [(gogoproto.enumvalue_customname) = "JailMaxTime"]; // maximum jailed status duration in seconds to get back to the validator set again
    ENABLE_TOKEN_WHITELIST = 19 [(gogoproto.enumvalue_customname) = "EnableTokenWhitelist"]; // TokenWhitelist is valid when enable_token_whitelist is set
    ENABLE_TOKEN_BLACKLIST = 20 [(gogoproto.enumvalue_customname) = "EnableTokenBlacklist"]; // TokenBlacklist is valid when enable_token_blacklist is set
    MIN_IDENTITY_APPROVAL_TIP = 21 [(gogoproto.enumvalue_customname) = "MinIdentityApprovalTip"]; // minimum amount of tip to be paid to the approver per request
    UNIQUE_IDENTITY_KEYS = 22 [(gogoproto.enumvalue_customname) = "UniqueIdentityKeys"]; // manages unique identity keys to be used as an address identifier
}

message NetworkPropertyValue {
    option (gogoproto.equal) = true;

    uint64 value = 1;
    string str_value = 2;
}

message NetworkProperties {
    uint64 min_tx_fee = 1; // minimum transaction fee
    uint64 max_tx_fee = 2; // maximum transaction fee
    uint64 vote_quorum = 3;       // vote quorum to reach to move to enactment
    uint64 vote_quorum_short = 4; // vote quorum to reach to move to enactment for short durtion proposal
    uint64 vote_quorum_long = 5;  // vote quorum to reach to move to enactment for long durtion proposal
    uint64 proposal_end_time = 6; // the duration to start processing the proposal
    uint64 proposal_end_time_short = 7; // the duration to start processing the proposal for short duration proposal
    uint64 proposal_end_time_long = 8;  // the duration to start processing the proposal for long durtion proposal
    uint64 proposal_enactment_time = 9; // the duration to wait for enactment after proposal processing
    uint64 min_proposal_end_blocks = 10; // minimum blocks required for proposal voting
    uint64 min_proposal_enactment_blocks = 11; // min blocks required for proposal enactment
    bool enable_foreign_fee_payments = 12; // flag to enable foreign tokens to be used as transaction fee
    uint64 mischance_rank_decrease_amount = 13; // rank decrease amount per mischance increase (default 10)
    uint64 max_mischance = 14;  // maximum mischance a validator could be in active status, default 110
    uint64 mischance_confidence = 15; // the number of blocks validator miss to start counting mischance, default 10
    uint64 inactive_rank_decrease_percent = 16; // percentage of decrease per status movement from active to inactive (default 50%)
    uint64 min_validators = 17; // minimum number of validators to perform full network actions - otherwise, it's called poor network
    uint64 poor_network_max_bank_send = 18; // maximum amount of transfer on poor network, default 10000ukex
    uint64 jail_max_time = 19; // maximum jailed status duration in seconds to get back to the validator set again
    bool enable_token_whitelist = 20; // TokenWhitelist is valid when enable_token_whitelist is set
    bool enable_token_blacklist = 21; // TokenBlacklist is valid when enable_token_blacklist is set
    uint64 min_identity_approval_tip = 22; // minimum amount of tip to be paid to the approver per request
    string unique_identity_keys = 23; // manages unique identity keys to be used as an address identifier
}
