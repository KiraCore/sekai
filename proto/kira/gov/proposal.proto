syntax = "proto3";
package kira.gov;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "kira/gov/role.proto";
import "kira/gov/permission.proto";
import "kira/gov/network_properties.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

// VoteOption enumerates the valid vote options for a given governance proposal.
enum VoteOption {
  option (gogoproto.goproto_enum_prefix) = false;

  // VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
  VOTE_OPTION_UNSPECIFIED = 0 [(gogoproto.enumvalue_customname) = "OptionEmpty"];
  // VOTE_OPTION_YES defines a yes vote option.
  VOTE_OPTION_YES = 1 [(gogoproto.enumvalue_customname) = "OptionYes"];
  // VOTE_OPTION_ABSTAIN defines an abstain vote option.
  VOTE_OPTION_ABSTAIN = 2 [(gogoproto.enumvalue_customname) = "OptionAbstain"];
  // VOTE_OPTION_NO defines a no vote option.
  VOTE_OPTION_NO = 3 [(gogoproto.enumvalue_customname) = "OptionNo"];
  // VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
  VOTE_OPTION_NO_WITH_VETO = 4 [(gogoproto.enumvalue_customname) = "OptionNoWithVeto"];
}

enum VoteResult {
  option (gogoproto.goproto_enum_prefix) = false;

  VOTE_RESULT_UNKNOWN = 0 [(gogoproto.enumvalue_customname) = "Unknown"];
  VOTE_RESULT_PASSED = 1 [(gogoproto.enumvalue_customname) = "Passed"];
  VOTE_RESULT_REJECTED = 2 [(gogoproto.enumvalue_customname) = "Rejected"];
  VOTE_RESULT_REJECTED_WITH_VETO = 3 [(gogoproto.enumvalue_customname) = "RejectedWithVeto"];
  VOTE_PENDING = 4 [(gogoproto.enumvalue_customname) = "Pending"];
  VOTE_RESULT_QUORUM_NOT_REACHED = 5 [(gogoproto.enumvalue_customname) = "QuorumNotReached"];
  VOTE_RESULT_ENACTMENT = 6 [(gogoproto.enumvalue_customname) = "Enactment"];
  VOTE_RESULT_PASSED_WITH_EXEC_FAIL = 7 [(gogoproto.enumvalue_customname) = "PassedWithExecFail"];
}

message Vote {
  uint64     proposal_id = 1;

  bytes voter = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  VoteOption option      = 3;
}

message MsgVoteProposal {
  uint64     proposal_id = 1;

  bytes voter = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  VoteOption option      = 3;
}


message Proposal {
  option (gogoproto.goproto_getters) = false;
  uint64     proposal_id = 1;

  string title = 2;
  string description = 3;
  google.protobuf.Any content = 4 [(cosmos_proto.accepts_interface) = "Content"];

  google.protobuf.Timestamp submit_time = 5
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"submit_time\""];
  google.protobuf.Timestamp voting_end_time = 6
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"voting_end_time\""];
  google.protobuf.Timestamp enactment_end_time = 7
  [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"enactment_end_time\""];

  int64 min_voting_end_block_height = 8;
  int64 min_enactment_end_block_height = 9;

  VoteResult result = 10;
  string exec_result = 11; // describes execution result
}

message AssignPermissionProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = true;

  bytes address = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ];

  uint32 permission = 2;
}


message SetNetworkPropertyProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = true;

  NetworkProperty network_property = 1;
  NetworkPropertyValue value = 2 [(gogoproto.nullable) = false];
}

message UpsertDataRegistryProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = true;

  string key = 1;

  string hash = 2;

  string reference = 3;

  string encoding = 4;

  uint64 size = 5;
}

message SetPoorNetworkMessagesProposal {
  repeated string messages = 1;
}

message CreateRoleProposal {
  option (cosmos_proto.implements_interface) = "Content";
  option (gogoproto.equal) = true;

  uint32 role = 1;
  repeated PermValue whitelisted_permissions = 2;
  repeated PermValue blacklisted_permissions = 3;
}
