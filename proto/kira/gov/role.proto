syntax = "proto3";
package kira.gov;

import "gogoproto/gogo.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

message MsgCreateRole {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  uint32 role = 2;
}

message MsgAssignRole {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  bytes address = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ];

  uint32 role = 3;
}

message MsgRemoveRole {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  bytes address = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ];

  uint32 role = 3;
}

message MsgSetNetworkProperties {
  NetworkProperties network_properties = 1;
  bytes proposer = 2 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgSetExecutionFee {
  string name = 1;
  string transaction_type = 2;
  uint64 execution_fee = 3;
  uint64 failure_fee = 4;
  uint64 timeout = 5;
  uint64 default_parameters = 6;
  bytes proposer = 7 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

message MsgWhitelistRolePermission {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  uint32 role = 2;
  uint32 permission = 3;
}

message MsgBlacklistRolePermission {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  uint32 role = 2;
  uint32 permission = 3;
}

message MsgRemoveWhitelistRolePermission {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  uint32 role = 2;
  uint32 permission = 3;
}

message MsgRemoveBlacklistRolePermission {
  bytes proposer = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];

  uint32 role = 2;
  uint32 permission = 3;
}

enum NetworkProperty {
  option (gogoproto.goproto_enum_prefix) = false;

  MIN_TX_FEE = 0 [(gogoproto.enumvalue_customname) = "MinTxFee"];
  MAX_TX_FEE = 1 [(gogoproto.enumvalue_customname) = "MaxTxFee"];
  VOTE_QUORUM = 2 [(gogoproto.enumvalue_customname) = "VoteQuorum"];
  PROPOSAL_END_TIME = 3 [(gogoproto.enumvalue_customname) = "ProposalEndTime"];
  PROPOSAL_ENACTMENT_TIME = 4 [(gogoproto.enumvalue_customname) = "ProposalEnactmentTime"];
  ENABLE_FOREIGN_TX_FEE_PAYMENTS = 5 [(gogoproto.enumvalue_customname) = "EnableForeignFeePayments"];
}

message NetworkProperties {
  uint64 min_tx_fee = 1;
  uint64 max_tx_fee = 2;
  uint64 vote_quorum = 3;
  uint64 proposal_end_time = 4;
  uint64 proposal_enactment_time = 5;
  bool enable_foreign_fee_payments = 6;

  // The rank property is a long term statistics implying the "longest" streak that validator ever achieved,
  // it can be expressed as rank = MAX(rank, streak).
  // Under certain circumstances we should however decrease the rank of the validator.
  // If the mischance property is incremented, the rank should be decremented by X (default 10), that is rank = MAX(rank - X, 0).
  // Every time node status changes to inactive the rank should be divided by 2, that is rank = FLOOR(rank / 2)
  // The streak and rank will enable governance to judge real life performance of validators on the mainnet or testnet, and potentially propose eviction of the weakest and least reliable operators.
  uint64 mischance_rank_decrease_amount = 7; // X (default 10)
  uint64 inactive_rank_decrease_percent = 8; // Y (default 50%)

  uint64 min_validators = 9;
  uint64 poor_network_max_bank_send = 10; // default 10000 ukex
}

// defines allowed messages by network status, we only use this for poor network where
// number of validators is less than min_validators network property
message AllowedMessages {
  repeated string messages = 1;
}

message ExecutionFee {
  string name = 1; // Friendly Name of the Function (max 128 characters)
  string transaction_type = 2; // Type of the transaction that given permission allows to execute
  uint64 execution_fee = 3; // How much user should pay for executing this specific function
  uint64 failure_fee = 4; // How much user should pay if function fails to execute
  uint64 timeout = 5; // After what time function execution should fail
  uint64 default_parameters = 6; // Default values that the function in question will consume as input parameters before execution
}
