syntax = "proto3";
package kira.gov;

import "cosmos/base/query/v1beta1/pagination.proto";
import "kira/gov/actor.proto";
import "kira/gov/councilor.proto";
import "kira/gov/data_registry.proto";
import "kira/gov/role.proto";
import "kira/gov/execution_fee.proto";
import "kira/gov/network_properties.proto";
import "kira/gov/proposal.proto";
import "kira/gov/identity_registrar.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

// Query defines the gRPC querier service
service Query {
  // Returns the permissions an actor has by address.
  rpc PermissionsByAddress (PermissionsByAddressRequest) returns (PermissionsResponse) {}
  // Returns the roles that are assigned to an address.
  rpc RolesByAddress (RolesByAddressRequest) returns (RolesByAddressResponse) {}
  // RolePermissions returns the permissions of the roles available in the registry.
  rpc RolePermissions (RolePermissionsRequest) returns (RolePermissionsResponse) {}
  // CouncilorByAddress returns the councilor object from its address
  rpc CouncilorByAddress (CouncilorByAddressRequest) returns (CouncilorResponse) {}
  // CouncilorByMoniker returns the councilor object from its moniker
  rpc CouncilorByMoniker (CouncilorByMonikerRequest) returns (CouncilorResponse) {}
  // NetworkProperties returns network properties
  rpc NetworkProperties (NetworkPropertiesRequest) returns (NetworkPropertiesResponse) {}
  // ExecutionFee returns execution fee from msg type
  rpc ExecutionFee (ExecutionFeeRequest) returns (ExecutionFeeResponse) {}
  // PoorNetworkMessages returns poor network messages
  rpc PoorNetworkMessages (PoorNetworkMessagesRequest) returns (PoorNetworkMessagesResponse) {}
  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/kira/gov/proposals/{proposal_id}";
  }
  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/kira/gov/proposals";
  }
  // WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
  rpc WhitelistedProposalVoters(QueryWhitelistedProposalVotersRequest) returns (QueryWhitelistedProposalVotersResponse) {
    option (google.api.http).get = "/kira/gov/voters/{proposal_id}";
  }
  // Vote queries voted information based on proposalID, voterAddr.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {}
  // Votes queries votes of a given proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/kira/gov/votes/{proposal_id}";
  }
  // Query all data reference keys with pagination.
  rpc AllDataReferenceKeys(QueryDataReferenceKeysRequest) returns (QueryDataReferenceKeysResponse) {
    option (google.api.http).get = "/kira/gov/data_keys";
  }
  // Query data reference by key.
  rpc DataReferenceByKey(QueryDataReferenceRequest) returns (QueryDataReferenceResponse) {
    option (google.api.http).get = "/kira/gov/data/{key}";
  }
  // Query identity record by id
  rpc IdentityRecord(QueryIdentityRecordRequest) returns (QueryIdentityRecordResponse) {
    option (google.api.http).get = "/kira/gov/identity_record/{id}";
  }
  // Query identity records by records creator
  rpc IdentityRecordsByAddress(QueryIdentityRecordsByAddressRequest) returns (QueryIdentityRecordsByAddressResponse) {
    option (google.api.http).get = "/kira/gov/identity_records/{creator}";
  }
  // Query all identity records
  rpc AllIdentityRecords(QueryAllIdentityRecordsRequest) returns (QueryAllIdentityRecordsResponse) {
    option (google.api.http).get = "/kira/gov/all_identity_records";
  }
  // Query identity record verify request by id
  rpc IdentityRecordVerifyRequest(QueryIdentityVerifyRecordRequest) returns (QueryIdentityVerifyRecordResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_record/{request_id}";
  }
  // Query identity records verify requests by requester
  rpc IdentityRecordVerifyRequestsByRequester(QueryIdentityRecordVerifyRequestsByRequester) returns (QueryIdentityRecordVerifyRequestsByRequesterResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_requests_by_requester/{requester}";
  }
  // Query identity records verify requests by approver
  rpc IdentityRecordVerifyRequestsByApprover(QueryIdentityRecordVerifyRequestsByApprover) returns (QueryIdentityRecordVerifyRequestsByApproverResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_requests_by_approver/{approver}";
  }
  // Query all identity records verify requests
  rpc AllIdentityRecordVerifyRequests(QueryAllIdentityRecordVerifyRequests) returns (QueryAllIdentityRecordVerifyRequestsResponse) {
    option (google.api.http).get = "/kira/gov/all_identity_verify_requests";
  }
}

message NetworkPropertiesRequest {}

message NetworkPropertiesResponse {
  kira.gov.NetworkProperties properties = 1;
}

message PermissionsByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message PermissionsResponse {
  kira.gov.Permissions permissions = 1;
}

message RolesByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message RolesByAddressResponse {
  repeated uint64 roles = 1;
}

message RolePermissionsRequest {
  uint64 role = 1;
}

message RolePermissionsResponse {
  Permissions permissions = 1;
}

message ExecutionFeeRequest {
  string transaction_type = 1;
}
message ExecutionFeeResponse {
  kira.gov.ExecutionFee fee = 1;
}

message PoorNetworkMessagesRequest {}
message PoorNetworkMessagesResponse {
  repeated string messages = 1;
}

message CouncilorByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message CouncilorByMonikerRequest {
  string moniker = 1;
}

message CouncilorResponse {
  kira.gov.Councilor councilor = 1 [(gogoproto.nullable) = false];
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  kira.gov.Proposal proposal = 1 [(gogoproto.nullable) = false];
  repeated kira.gov.Vote votes = 2 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // voter defines the voter address for the proposals.
  string voter = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  repeated kira.gov.Proposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersResponse {
  repeated kira.gov.NetworkActor voters = 1 [(gogoproto.nullable) = false];
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
message QueryVoteRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // voter defines the oter address for the proposals.
  bytes voter = 2[
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress"
  ];
}

// QueryVoteResponse is the response type for the Query/Vote RPC method.
message QueryVoteResponse {
  // vote defined the queried vote.
  kira.gov.Vote vote = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
message QueryVotesRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
message QueryVotesResponse {
  // votes defined the queried votes.
  repeated kira.gov.Vote votes = 1 [(gogoproto.nullable) = false];
}

// QueryDataReferenceKeysRequest is the request type for data reference keys query.
message QueryDataReferenceKeysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
message QueryDataReferenceKeysResponse {
  repeated string keys = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

// QueryDataReferenceRequest is the response type for data reference query.
message QueryDataReferenceRequest {
  string key = 1;
}

// QueryDataReferenceResponse is the response type for data referencequery.
message QueryDataReferenceResponse {
  kira.gov.DataRegistryEntry data = 1;
}

message QueryIdentityRecordRequest {
  uint64 id = 1;
}
message QueryIdentityRecordResponse {
  kira.gov.IdentityRecord record = 1;
}

message QueryIdentityRecordsByAddressRequest {
  bytes creator = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"creator\""
  ];
  repeated string keys = 2;
}
message QueryIdentityRecordsByAddressResponse {
  repeated kira.gov.IdentityRecord records = 1 [(gogoproto.nullable) = false];
}

message QueryAllIdentityRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordsResponse {
  repeated kira.gov.IdentityRecord records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityVerifyRecordRequest {
  uint64 request_id = 1;
}
message QueryIdentityVerifyRecordResponse {
  kira.gov.IdentityRecordsVerify verify_record = 1;
}

message QueryIdentityRecordVerifyRequestsByApprover {
  bytes approver = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"approver\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByApproverResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityRecordVerifyRequestsByRequester {
  bytes requester = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"requester\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByRequesterResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryAllIdentityRecordVerifyRequests {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordVerifyRequestsResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}
