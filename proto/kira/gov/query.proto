syntax = "proto3";
package kira.gov;

import "actor.proto";
import "councilor.proto";
import "role.proto";
import "proposal.proto";
import "gogoproto/gogo.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

// Query defines the gRPC querier service
service Query {
  // Returns the permissions an actor has by address.
  rpc PermissionsByAddress (PermissionsByAddressRequest) returns (PermissionsResponse) {}
  // Returns the roles that are assigned to an address.
  rpc RolesByAddress (RolesByAddressRequest) returns (RolesByAddressResponse) {}
  // RolePermissions returns the permissions of the roles available in the registry.
  rpc RolePermissions (RolePermissionsRequest) returns (RolePermissionsResponse) {}

  rpc CouncilorByAddress (CouncilorByAddressRequest) returns (CouncilorResponse) {}

  rpc CouncilorByMoniker (CouncilorByMonikerRequest) returns (CouncilorResponse) {}

  rpc GetNetworkProperties (NetworkPropertiesRequest) returns (NetworkPropertiesResponse) {}
  rpc GetExecutionFee (ExecutionFeeRequest) returns (ExecutionFeeResponse) {}

  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {}

  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {}
}

message NetworkPropertiesRequest {}

message NetworkPropertiesResponse {
  kira.gov.NetworkProperties properties = 1;
}

message PermissionsByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message PermissionsResponse {
  kira.gov.Permissions permissions = 1;
}

message RolesByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message RolesByAddressResponse {
  repeated uint64 roles = 1;
}

message RolePermissionsRequest {
  uint64 role = 1;
}

message RolePermissionsResponse {
  Permissions permissions = 1;
}

message ExecutionFeeRequest {
  string transaction_type = 1;
}
message ExecutionFeeResponse {
  kira.gov.ExecutionFee fee = 1;
}

message CouncilorByAddressRequest {
  bytes val_addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"val_addr\""
  ];
}

message CouncilorByMonikerRequest {
  string moniker = 1;
}

message CouncilorResponse {
  kira.gov.Councilor councilor = 1 [(gogoproto.nullable) = false];
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  kira.gov.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // voter defines the voter address for the proposals.
  string voter = 1;

  // depositor defines the deposit addresses from the proposals.
  string depositor = 2;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  repeated kira.gov.Proposal proposals = 1 [(gogoproto.nullable) = false];
}