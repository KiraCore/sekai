syntax = "proto3";
package kira.gov;

import "cosmos/base/query/v1beta1/pagination.proto";
import "kira/gov/actor.proto";
import "kira/gov/councilor.proto";
import "kira/gov/data_registry.proto";
import "kira/gov/role.proto";
import "kira/gov/execution_fee.proto";
import "kira/gov/network_properties.proto";
import "kira/gov/proposal.proto";
import "kira/gov/poll.proto";
import "kira/gov/identity_registrar.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/KiraCore/sekai/x/gov/types";

// Query defines the gRPC querier service
service Query {
  // Returns the permissions an actor has by address.
  rpc PermissionsByAddress (PermissionsByAddressRequest) returns (PermissionsResponse) {
    option (google.api.http).get = "/kira/gov/permissions_by_address/{addr}";
  }
  // Returns all registered roles
  rpc AllRoles (AllRolesRequest) returns (AllRolesResponse) {
    option (google.api.http).get = "/kira/gov/all_roles";
  }
  // Returns the roles that are assigned to an address.
  rpc RolesByAddress (RolesByAddressRequest) returns (RolesByAddressResponse) {
    option (google.api.http).get = "/kira/gov/roles_by_address/{addr}";
  }
  // Role returns the role details from role sid
  rpc Role (RoleRequest) returns (RoleResponse) {
    option (google.api.http).get = "/kira/gov/role/{identifier}";
  }
  // CouncilorByAddress returns the councilor object from its address
  rpc CouncilorByAddress (CouncilorByAddressRequest) returns (CouncilorResponse) {
    option (google.api.http).get = "/kira/gov/councilor_by_address/{addr}";
  }
  // CouncilorByMoniker returns the councilor object from its moniker
  rpc CouncilorByMoniker (CouncilorByMonikerRequest) returns (CouncilorResponse) {
    option (google.api.http).get = "/kira/gov/councilor_by_moniker/{moniker}";
  }
  // NetworkProperties returns network properties
  rpc NetworkProperties (NetworkPropertiesRequest) returns (NetworkPropertiesResponse) {
    option (google.api.http).get = "/kira/gov/network_properties";
  }
  // ExecutionFee returns execution fee from msg type
  rpc ExecutionFee (ExecutionFeeRequest) returns (ExecutionFeeResponse) {
    option (google.api.http).get = "/kira/gov/execution_fee/{transaction_type}";
  }
  // AllExecutionFees returns all execution fees
  rpc AllExecutionFees(AllExecutionFeesRequest) returns (AllExecutionFeesResponse) {
    option (google.api.http).get = "/kira/gov/all_execution_fees";
  }
  // PoorNetworkMessages returns poor network messages
  rpc PoorNetworkMessages (PoorNetworkMessagesRequest) returns (PoorNetworkMessagesResponse) {
    option (google.api.http).get = "/kira/gov/poor_network_messages";
  }
  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/kira/gov/proposals/{proposal_id}";
  }
  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/kira/gov/proposals";
  }
  // WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
  rpc WhitelistedProposalVoters(QueryWhitelistedProposalVotersRequest) returns (QueryWhitelistedProposalVotersResponse) {
    option (google.api.http).get = "/kira/gov/voters/{proposal_id}";
  }
  // ProposerVotersCount returns proposers an voters count who can at least create or vote one type of proposal
  rpc ProposerVotersCount(QueryProposerVotersCountRequest) returns (QueryProposerVotersCountResponse) {
    option (google.api.http).get = "/kira/gov/proposers_voters_count";
  }
  // Vote queries voted information based on proposalID, voterAddr.
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get = "/kira/gov/vote/{proposal_id}/{voter}";
  }
  // Votes queries votes of a given proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/kira/gov/votes/{proposal_id}";
  }
  // Query all data reference keys with pagination.
  rpc AllDataReferenceKeys(QueryDataReferenceKeysRequest) returns (QueryDataReferenceKeysResponse) {
    option (google.api.http).get = "/kira/gov/data_keys";
  }
  // Query data reference by key.
  rpc DataReferenceByKey(QueryDataReferenceRequest) returns (QueryDataReferenceResponse) {
    option (google.api.http).get = "/kira/gov/data/{key}";
  }
  // Query identity record by id
  rpc IdentityRecord(QueryIdentityRecordRequest) returns (QueryIdentityRecordResponse) {
    option (google.api.http).get = "/kira/gov/identity_record/{id}";
  }
  // Query identity records by records creator
  rpc IdentityRecordsByAddress(QueryIdentityRecordsByAddressRequest) returns (QueryIdentityRecordsByAddressResponse) {
    option (google.api.http).get = "/kira/gov/identity_records/{creator}";
  }
  // Query all identity records
  rpc AllIdentityRecords(QueryAllIdentityRecordsRequest) returns (QueryAllIdentityRecordsResponse) {
    option (google.api.http).get = "/kira/gov/all_identity_records";
  }
  // Query identity record verify request by id
  rpc IdentityRecordVerifyRequest(QueryIdentityVerifyRecordRequest) returns (QueryIdentityVerifyRecordResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_record/{request_id}";
  }
  // Query identity records verify requests by requester
  rpc IdentityRecordVerifyRequestsByRequester(QueryIdentityRecordVerifyRequestsByRequester) returns (QueryIdentityRecordVerifyRequestsByRequesterResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_requests_by_requester/{requester}";
  }
  // Query identity records verify requests by approver
  rpc IdentityRecordVerifyRequestsByApprover(QueryIdentityRecordVerifyRequestsByApprover) returns (QueryIdentityRecordVerifyRequestsByApproverResponse) {
    option (google.api.http).get = "/kira/gov/identity_verify_requests_by_approver/{approver}";
  }
  // Query all identity records verify requests
  rpc AllIdentityRecordVerifyRequests(QueryAllIdentityRecordVerifyRequests) returns (QueryAllIdentityRecordVerifyRequestsResponse) {
    option (google.api.http).get = "/kira/gov/all_identity_verify_requests";
  }
  // Query all proposal durations
  rpc AllProposalDurations(QueryAllProposalDurations) returns (QueryAllProposalDurationsResponse) {
    option (google.api.http).get = "/kira/gov/all_proposal_durations";
  }
  // Query single proposal duration
  rpc ProposalDuration(QueryProposalDuration) returns (QueryProposalDurationResponse) {
    option (google.api.http).get = "/kira/gov/proposal_duration/{proposal_type}";
  }
  // Councilors - all councilors (waiting or not), including their corresponding statuses,
  // ranks & abstenation counters - add sub-query to search by specific KIRA address
  rpc Councilors(QueryCouncilors) returns (QueryCouncilorsResponse) {
    option (google.api.http).get = "/kira/gov/councilors/{address}";
  }
  // NonCouncilors - list all governance members that are NOT Councilors
  rpc NonCouncilors(QueryNonCouncilors) returns (QueryNonCouncilorsResponse) {
    option (google.api.http).get = "/kira/gov/non_councilors";
  }
  // AddressesByWhitelistedPermission - list all KIRA addresses by a specific whitelisted permission (address does NOT have to be a Councilor)
  rpc AddressesByWhitelistedPermission(QueryAddressesByWhitelistedPermission) returns (QueryAddressesByWhitelistedPermissionResponse) {
    option (google.api.http).get = "/kira/gov/addresses_by_whitelisted_permission/{permission}";
  }
  // AddressesByBlacklistedPermission - list all KIRA addresses by a specific blacklisted permission (address does NOT have to be a Councilor)
  rpc AddressesByBlacklistedPermission(QueryAddressesByBlacklistedPermission) returns (QueryAddressesByBlacklistedPermissionResponse) {
    option (google.api.http).get = "/kira/gov/addresses_by_blacklisted_permission/{permission}";
  }
  // AddressesByWhitelistedRole - list all kira addresses by a specific whitelisted role (address does NOT have to be a Councilor)
  rpc AddressesByWhitelistedRole(QueryAddressesByWhitelistedRole) returns (QueryAddressesByWhitelistedRoleResponse) {
    option (google.api.http).get = "/kira/gov/addresses_by_whitelisted_role/{role}";
  }
  //Query list of all polls by address
  rpc PollsListByAddress(QueryPollsListByAddress) returns (QueryPollsListByAddressResponse) {
    option (google.api.http).get = "/kira/gov/proposal_polls/{creator}";
  }

  rpc PollsVotesByPollId(QueryPollsVotesByPollId) returns (QueryPollsVotesByPollIdResponse) {
    option (google.api.http).get = "/kira/gov/proposal_poll/votes/{poll_id}";
  }
  // CustomPrefixes returns custom denom and bech32 address prefix
  rpc CustomPrefixes (QueryCustomPrefixesRequest) returns (QueryCustomPrefixesResponse) {
    option (google.api.http).get = "/kira/gov/custom_prefixes";
  }
}

message QueryPollsVotesByPollId {
  uint64 poll_id = 1;
}

message QueryPollsVotesByPollIdResponse {
  repeated PollVote votes = 1 [(gogoproto.nullable) = false];
}

message QueryPollsListByAddress {
  bytes creator = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"creator\""
  ];
}

message QueryPollsListByAddressResponse {
  repeated kira.gov.Poll polls = 1 [(gogoproto.nullable) = false];
}

message NetworkPropertiesRequest {}

message NetworkPropertiesResponse {
  kira.gov.NetworkProperties properties = 1;
}

message PermissionsByAddressRequest { string addr = 1; }

message PermissionsResponse {
  kira.gov.Permissions permissions = 1;
}

message RoleQuery {
  uint32 id = 1;  // (integer) - auto assigned
  string sid = 2; // string identifier unique variable name
  string description = 3;
  Permissions permissions = 4;
}

message AllRolesRequest {}
message AllRolesResponse {
  repeated RoleQuery roles = 1 [ (gogoproto.nullable) = false ];
}

message RolesByAddressRequest {
  string addr = 1;
}

message RolesByAddressResponse {
  repeated uint64 roleIds = 1;
}

message RoleRequest {
  string identifier = 1; // sid or id
}

message RoleResponse {
  RoleQuery role = 1; 
}

message ExecutionFeeRequest {
  string transaction_type = 1;
}
message ExecutionFeeResponse {
  kira.gov.ExecutionFee fee = 1;
}

message AllExecutionFeesRequest {}
message AllExecutionFeesResponse {
  repeated kira.gov.ExecutionFee fees = 1 [ (gogoproto.nullable) = false ];
  repeated string tx_types = 2;
}

message PoorNetworkMessagesRequest {}
message PoorNetworkMessagesResponse {
  repeated string messages = 1;
}

message CouncilorByAddressRequest {
  string addr = 1;
}

message CouncilorByMonikerRequest {
  string moniker = 1;
}

message CouncilorResponse {
  kira.gov.Councilor councilor = 1 [(gogoproto.nullable) = false];
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  kira.gov.Proposal proposal = 1 [(gogoproto.nullable) = false];
  repeated kira.gov.Vote votes = 2 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // voter defines the voter address for the proposals.
  string voter = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  repeated kira.gov.Proposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersResponse {
  repeated kira.gov.NetworkActor voters = 1 [(gogoproto.nullable) = false];
}

// QueryProposerVotersCountRequest is the request type for Query/ProposerVotersCount RPC method.
message QueryProposerVotersCountRequest {}

// QueryProposerVotersCountResponse is the response type for Query/ProposerVotersCount RPC method.
message QueryProposerVotersCountResponse {
  uint64 proposers = 1;
  uint64 voters = 2;
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
message QueryVoteRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;

  // voter defines the oter address for the proposals.
  string voter = 2;
}

// QueryVoteResponse is the response type for the Query/Vote RPC method.
message QueryVoteResponse {
  // vote defined the queried vote.
  kira.gov.Vote vote = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
message QueryVotesRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
message QueryVotesResponse {
  // votes defined the queried votes.
  repeated kira.gov.Vote votes = 1 [(gogoproto.nullable) = false];
}

// QueryDataReferenceKeysRequest is the request type for data reference keys query.
message QueryDataReferenceKeysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
message QueryDataReferenceKeysResponse {
  repeated string keys = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

// QueryDataReferenceRequest is the response type for data reference query.
message QueryDataReferenceRequest {
  string key = 1;
}

// QueryDataReferenceResponse is the response type for data referencequery.
message QueryDataReferenceResponse {
  kira.gov.DataRegistryEntry data = 1;
}

message QueryIdentityRecordRequest {
  uint64 id = 1;
}
message QueryIdentityRecordResponse {
  kira.gov.IdentityRecord record = 1;
}

message QueryIdentityRecordsByAddressRequest {
  bytes creator = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"creator\""
  ];
  repeated string keys = 2;
}
message QueryIdentityRecordsByAddressResponse {
  repeated kira.gov.IdentityRecord records = 1 [(gogoproto.nullable) = false];
}

message QueryAllIdentityRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordsResponse {
  repeated kira.gov.IdentityRecord records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityVerifyRecordRequest {
  uint64 request_id = 1;
}
message QueryIdentityVerifyRecordResponse {
  kira.gov.IdentityRecordsVerify verify_record = 1;
}

message QueryIdentityRecordVerifyRequestsByApprover {
  bytes approver = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"approver\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByApproverResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityRecordVerifyRequestsByRequester {
  bytes requester = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"requester\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByRequesterResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryAllIdentityRecordVerifyRequests {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordVerifyRequestsResponse {
  repeated kira.gov.IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryAllProposalDurations {}

message QueryAllProposalDurationsResponse {
  map<string, uint64> proposal_durations = 1;
}

message QueryProposalDuration {
  string proposal_type = 1;
}

message QueryProposalDurationResponse {
  uint64 duration = 1;
}

message QueryCouncilors {
  string address = 1; // returns full when empty input
}
message QueryCouncilorsResponse {
  repeated Councilor councilors = 1 [ (gogoproto.nullable) = false ];
}

message QueryNonCouncilors {}
message QueryNonCouncilorsResponse {
  repeated kira.gov.NetworkActor non_councilors = 1 [ (gogoproto.nullable) = false ];
}

message QueryAddressesByWhitelistedPermission {
  uint32 permission = 1;
}
message QueryAddressesByWhitelistedPermissionResponse {
  repeated string addresses = 1;
}

message QueryAddressesByBlacklistedPermission {
  uint32 permission = 1;
}
message QueryAddressesByBlacklistedPermissionResponse {
  repeated string addresses = 1;
}

message QueryAddressesByWhitelistedRole {
  uint32 role = 1;
}
message QueryAddressesByWhitelistedRoleResponse {
  repeated string addresses = 1;
}

message QueryCustomPrefixesRequest {}

message QueryCustomPrefixesResponse {
  string default_denom = 1;
  string bech32_prefix = 2;
}