syntax = "proto3";
package kira.bridge;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "kira/bridge/bridge.proto";
import "google/protobuf/any.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/KiraCore/sekai/x/bridge/types";

// Msg defines the custody Msg service.
service Msg {
  rpc ChangeCosmosEthereum(MsgChangeCosmosEthereum) returns (MsgChangeCosmosEthereumResponse);
  rpc ChangeEthereumCosmos(MsgChangeEthereumCosmos) returns (MsgChangeEthereumCosmosResponse);
}

message MsgChangeCosmosEthereum {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes from = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ] ;

  string to = 2;
  string hash = 3;

  repeated cosmos.base.v1beta1.Coin amount = 4
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgChangeEthereumCosmos {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  bytes addr = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ] ;

  string from = 2;

  bytes to = 3 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"address\""
  ];

  repeated cosmos.base.v1beta1.Coin amount = 4
  [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

message MsgChangeCosmosEthereumResponse {}
message MsgChangeEthereumCosmosResponse {}