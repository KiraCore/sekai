syntax = "proto3";
package kira.layer2;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "kira/layer2/layer2.proto";
import "kira/layer2/mint.proto";

option go_package = "github.com/KiraCore/sekai/x/layer2/types";

// Query defines the gRPC querier service.
service Query {
  // query info of a specific application by dApp ID or name
  rpc ExecutionRegistrar(QueryExecutionRegistrarRequest) returns (QueryExecutionRegistrarResponse) {
    option (google.api.http).get = "/kira/layer2/execution_registrar/{identifier}";
  }
  // list IDs of all execution registrars and allow search by
  // executor or verifier kira public key (e.g. list all dApps run by address kiraXXX…YYY)
  rpc AllDapps(QueryAllDappsRequest) returns (QueryAllDappsResponse) {
    option (google.api.http).get = "/kira/layer2/all_dapps";
  }
  // query XAMs’ records by either account address, account index, xid or
  // transaction hash in which cross-app transaction was added to the ABR.
  rpc TransferDapps(QueryTransferDappsRequest) returns (QueryTransferDappsResponse) {
    option (google.api.http).get = "/kira/layer2/transfer_dapp";
  }
  // query list of all token denoms on the network including those created in
  // the genesis (ukex, samolean etc..) as well as those in the minting module,
  // lp tokens, validator recovery tokens and so on. If the flag with specific
  // name is specified provide a detailed information about the token including
  // its current circulating supply etc.
  rpc GlobalTokens(QueryGlobalTokensRequest) returns (QueryGlobalTokensResponse) {
    option (google.api.http).get = "/kira/layer2/global_tokens";
  }
}

message QueryExecutionRegistrarRequest {
  string identifier = 1; // dApp ID or name
}
message QueryExecutionRegistrarResponse {
  Dapp dapp = 1;
  ExecutionRegistrar execution_registrar = 2;
}

message QueryAllDappsRequest {}
message QueryAllDappsResponse {
  repeated Dapp dapps = 1 [ (gogoproto.nullable) = false ];
}

message QueryTransferDappsRequest {}
message QueryTransferDappsResponse {
  repeated XAM XAMs = 1 [ (gogoproto.nullable) = false ];
}

message QueryGlobalTokensRequest {}
message QueryGlobalTokensResponse {
  repeated TokenInfo tokens = 1 [ (gogoproto.nullable) = false ];
}
