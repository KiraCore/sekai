syntax = "proto3";
package kira.layer2;

option go_package = "github.com/KiraCore/sekai/x/layer2/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

enum DappStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  ACTIVE = 0 [ (gogoproto.enumvalue_customname) = "Active" ];
  PAUSED = 1 [ (gogoproto.enumvalue_customname) = "Paused" ];
  HALTED = 2 [ (gogoproto.enumvalue_customname) = "Halted" ];
}

message AccountRange {
  repeated string addresses = 1;
  repeated uint64 roles = 2;
}

message Controllers {
  AccountRange whitelist = 1 [ (gogoproto.nullable) = false ];
  AccountRange blacklist = 2 [ (gogoproto.nullable) = false ];
}

message BinaryInfo {
  string name = 1; // filename identifying source such as container, executable, config, finality gadget, etc.
  string hash = 2; // hash of the file
  string source = 3; // link to the source (from where the file should be fetched)
  string reference = 4; // link to github repository or audit
  string type = 5; // optional file type, e.g. binary, archive, text, image, etc.
}

message LpPoolConfig {
  string ratio = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ]; // amount of dp_<denom> to be issued per each 1 KEX contributed
  string deposit = 2; // spending pool id/name from where lp coins can be claimed
  uint64 drip = 3; // time over which tokens should be distributed (can not be modified)
}

message IssuranceConfig {
  string deposit = 1; // spending pool id/name or kira address for extra dp deposit
  uint64 premint = 2; // Amount of dp_<denom> to premint (can not be modified)
  uint64 postmint = 3; // Amount of dp_<denom> to postmint (can not be modified)
  uint64 time = 4; // unix timestamp when to issue postminted dp tokens (can not be modified)
}

message Dapp {
  string name = 1; // application name, must be globally unique and follow the same safety rules as usernames & validator moniker (can NOT be changed)
  string denom = 2; // native dApp token denom substring, min 3 and max 8 lowercase alphabetic characters only (a-z)
  string description = 3; // short description of the dApp, max 512 characters.
  string website = 4; // official website/info about dApp, max 128 characters.
  string logo = 5;    // dapp logo url/cid
  string social = 6;  // comma separated list of official social media urls
  string docs = 7;    // url to the resources documenting dApp operation
  Controllers controllers = 8 [ (gogoproto.nullable) = false ]; // list of dApp owners, who can curate the execution record
  repeated BinaryInfo bin = 9 [ (gogoproto.nullable) = false ]; // array of files & their details essential for launching the dApp
  LpPoolConfig pool = 10 [ (gogoproto.nullable) = false ]; // lp pool configuration (can not be modified)
  IssuranceConfig issurance = 11 [ (gogoproto.nullable) = false ]; // extra dApp (dp) token issuance configuration
  uint64 update_time_max = 12; // maximum time the dApp leader has to update his session (can be no more then 86400 - 24h)
  uint64 executors_min = 13; // minimum number of validators that will be executing the dApp code (default 1)
  uint64 executors_max = 14; // maximum number of validators that will be executing the dApp code (default 21)
  uint64 verifiers_min = 15; // minimum number of nodes that must approve dApp state change
  string total_bond = 16 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ]; // total bonds put on the dapp
  uint64 creation_time = 17; // dapp creation time
  string status_hash = 18; // dapp status hash
  DappStatus status = 19; // dapp status
}

message UserDappBond {
  string user = 1;
  string dapp_name = 2;
  string bond = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message DappOperatorCandidate {
  string dapp_name = 1;
  string candidate = 2;
  bool executor = 3; // can only be set by validators, raises proposal that controllers must approve
  bool verifier = 4; // can be set by anyone, sending this tx does not require any approvals however requires a bond in `lp_<denom>` tokens no less than `dapp_verifier_bond`
  string interx = 5; // must be set to a valid kira address
}

message DappOperator {
  string dapp_name = 1;
  string operator = 2;
  bool executor = 3; // can only be set by validators, raises proposal that controllers must approve
  bool verifier = 4; // can be set by anyone, sending this tx does not require any approvals however requires a bond in `lp_<denom>` tokens no less than `dapp_verifier_bond`
  string interx = 5; // must be set to a valid kira address
}

message DappLeaderDenouncement {
  string dapp_name = 1;
  string leader = 2;
  string sender = 3;
  string denouncement = 4;
}

enum SessionStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  UNSCHEDULED = 0 [ (gogoproto.enumvalue_customname) = "Unscheduled" ];
  SCHEDULED = 1 [ (gogoproto.enumvalue_customname) = "Scheduled" ];
  ONGOING = 2 [ (gogoproto.enumvalue_customname) = "Ongoing" ];
}

message DappSession {
  string dapp_name = 1;
  string leader = 2;
  uint64 start = 3;
  string status_hash = 4;
  SessionStatus status = 5;
}

message DappSessionApproval {
  string dapp_name = 1;
  string approver = 2;
  bool is_approved = 3;
}
