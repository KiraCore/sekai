syntax = "proto3";
package kira.layer2;

option go_package = "github.com/KiraCore/sekai/x/layer2/types";
option (gogoproto.equal_all) = true;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "kira/layer2/layer2.proto";

// Msg defines the layer2 Msg service.
service Msg {
  rpc CreateDappProposal(MsgCreateDappProposal) returns (MsgCreateDappProposalResponse);
  rpc BondDappProposal(MsgBondDappProposal) returns (MsgBondDappProposalResponse);
  rpc ReclaimDappBondProposal(MsgReclaimDappBondProposal) returns (MsgReclaimDappBondProposalResponse);
  rpc JoinDappVerifierWithBond(MsgJoinDappVerifierWithBond) returns (MsgJoinDappVerifierWithBondResponse);
  rpc ExitDapp(MsgExitDapp) returns (MsgExitDappResponse);
  rpc RedeemDappPoolTx(MsgRedeemDappPoolTx) returns (MsgRedeemDappPoolTxResponse);
  rpc SwapDappPoolTx(MsgSwapDappPoolTx) returns (MsgSwapDappPoolTxResponse);
  rpc ConvertDappPoolTx(MsgConvertDappPoolTx) returns (MsgConvertDappPoolTxResponse);
  rpc PauseDappTx(MsgPauseDappTx) returns (MsgPauseDappTxResponse);
  rpc UnPauseDappTx(MsgUnPauseDappTx) returns (MsgUnPauseDappTxResponse);
  rpc ReactivateDappTx(MsgReactivateDappTx) returns (MsgReactivateDappTxResponse);
  rpc ExecuteDappTx(MsgExecuteDappTx) returns (MsgExecuteDappTxResponse);
  rpc DenounceLeaderTx(MsgDenounceLeaderTx) returns (MsgDenounceLeaderTxResponse);
  rpc TransitionDappTx(MsgTransitionDappTx) returns (MsgTransitionDappTxResponse);
  rpc ApproveDappTransitionTx(MsgApproveDappTransitionTx) returns (MsgApproveDappTransitionTxResponse);
  rpc RejectDappTransitionTx(MsgRejectDappTransitionTx) returns (MsgRejectDappTransitionTxResponse);
  rpc TransferDappTx(MsgTransferDappTx) returns (MsgTransferDappTxResponse);
  rpc AckTransferDappTx(MsgAckTransferDappTx) returns (MsgAckTransferDappTxResponse);
  rpc MintCreateFtTx(MsgMintCreateFtTx) returns (MsgMintCreateFtTxResponse);
  rpc MintCreateNftTx(MsgMintCreateNftTx) returns (MsgMintCreateNftTxResponse);
  rpc MintIssueTx(MsgMintIssueTx) returns (MsgMintIssueTxResponse);
  rpc MintBurnTx(MsgMintBurnTx) returns (MsgMintBurnTxResponse);
}

// allow to raise dApp launch proposal using a token
// bond or with a dedicated permission (where no starting 1% bond needed). Fail
// proposal if min_dapp_bond is not reached. This proposal does NOT require
// governance approval only sufficient number of bonded tokens.
message MsgCreateDappProposal {
  string sender = 1;
  Dapp dapp = 2 [ (gogoproto.nullable) = false ];
  string bond = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}
message MsgCreateDappProposalResponse {}

// allow KEX holders to bond extra tokens to dApp
// proposal unless max_dapp_bond is reached in which case fail the tx.
message MsgBondDappProposal {
  string sender = 1;
  string dapp_name = 2;
  string bond = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}
message MsgBondDappProposalResponse {}

// claim your KEX back from dApp proposal, should
// be possible to execute regardless if the proposal is still ongoing or failed
message MsgReclaimDappBondProposal{
  string sender = 1;
  string dapp_name = 2;
  string bond = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}
message MsgReclaimDappBondProposalResponse {}

message MsgJoinDappVerifierWithBond {
  string sender = 1;
  string dapp_name = 2;
  string interx = 3; // must be set to a valid kira address
}
message MsgJoinDappVerifierWithBondResponse {}

// stop being a dApp operator and remove the record in the Execution Registrar.
// Return bonded funds if the operator is a verifier.
message MsgExitDapp {
  string sender = 1;
  string dapp_name = 2;
}
message MsgExitDappResponse {}

// return lp_<denom> tokens to the pool and redeem KEX or dp_<denom> token
// unless slippage is exceeded then fail the tx.
message MsgRedeemDappPoolTx {
  string sender = 1;
  string dapp_name = 2;
  string lp_token = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  string slippage = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
message MsgRedeemDappPoolTxResponse {}

// send KEX and receive dp_<denom> or send dp_<denom> and receive KEX unless
// slippage is exceeded then fail the tx.
message MsgSwapDappPoolTx {
  string sender = 1;
  string dapp_name = 2;
  string token = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  string slippage = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
message MsgSwapDappPoolTxResponse {}

// allow user to convert any dp_<denom> for any other dp_<denom> token unless
// slippage is exceeded then fail the tx.
message MsgConvertDappPoolTx {
  string sender = 1;
  string dapp_name = 2;
  string target_dapp_name = 3;
  string lp_token = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
  string slippage = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
message MsgConvertDappPoolTxResponse {}

// allow executors to change their status to paused. This tx does NOT pause the
// dApp, it only pauses the ability of an executor to continue running the dApp
// in the next session. If the executor is currently running the session then he
// needs to finish it before paused status is applied.
message MsgPauseDappTx {
  string sender = 1;
  string dapp_name = 2;
}
message MsgPauseDappTxResponse {}

// exit maintenance mode to signal that verifier or executor is ready to operate
// the dApp again.
message MsgUnPauseDappTx {
  string sender = 1;
  string dapp_name = 2;
}
message MsgUnPauseDappTxResponse {}

// re-activate deactivated dApp operator
message MsgReactivateDappTx {
  string sender = 1;
  string dapp_name = 2;
}
message MsgReactivateDappTxResponse {}

// allow next session leader to announce or update his IP address and start
// execution.
message MsgExecuteDappTx {
  string sender = 1;
  string dapp_name = 2;
  string gateway = 3;
}
message MsgExecuteDappTxResponse {}

//  allow executors to denounce the current session leader, should take a
//  session id as a parameter as well as a true or false flag to allow vote
//  change.
message MsgDenounceLeaderTx {
  string sender = 1;
  string dapp_name = 2;
  string leader = 3;
  string denounce_text = 4;
  string version = 5;
}
message MsgDenounceLeaderTxResponse {}

// update CURRENT session state (can only be sent by current session leader),
// this tx MUST include dApp version.
message MsgTransitionDappTx {
  string sender = 1;
  string dapp_name = 2;
  string status_hash = 3;
  repeated google.protobuf.Any onchain_messages = 4; // dapp mints, xam creations, xam accepts
  string version = 5;
}
message MsgTransitionDappTxResponse {}

// approve CURRENT session state (can only be sent by the verifiers or executors
// who are NOT a leader), this tx MUST include dApp version.
message MsgApproveDappTransitionTx {
  string sender = 1;
  string dapp_name = 2;
  string version = 3;
}
message MsgApproveDappTransitionTxResponse {}

// reject session transition and immediately set the state of the current
// session to halted, this tx MUST include dApp version and session id.
message MsgRejectDappTransitionTx {
  string sender = 1;
  string dapp_name = 2;
  string version = 3;
}
message MsgRejectDappTransitionTxResponse {}

// allow user to manually deposit/transfer/withdrawal funds to / from / within
// ABR and communicate with apps by including xam string message.
message MsgTransferDappTx {
  string sender = 1;
  repeated XAMRequest requests = 2 [ (gogoproto.nullable) = false ];
}
message MsgTransferDappTxResponse {}

// acknowledgement of transfer dapp tx
message MsgAckTransferDappTx {
  string sender = 1;
  repeated XAMResponse responses = 2 [ (gogoproto.nullable) = false ];
}
message MsgAckTransferDappTxResponse {}

// create new fungible token record in the minting module
message MsgMintCreateFtTx {
  string sender = 1;
  string denom_suffix = 2; // suffix that must be applied to the token, min 3 and max 8 lowercase alphabetic characters only (a-z)
  string name = 3; // full name, eg. Bitcoin, (can only be changed by the proposal-upsert-alias)
  string symbol = 4; // symbnol, eg. KEX, BTC, (can only be changed by the proposal-upsert-alias)
  string icon = 5; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  string description = 6; // 512 chars max, (can be changed by owner or proposal-upsert-alias)
  string website = 7; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  string social = 8; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  uint64 decimals = 9; // min 0, max 255, (can NOT be changed)
  string cap = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // maximum supply that can be issued, max 2^256 - 1, (can NOT be INCREASED or decreased below current circulatin supply)
  string supply = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // current circulating supply can NOT be more then CAP
  uint64 holders = 12;
  string fee = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // cost of minting 10^decimals per X ukex, can only increase (can be changed by owner only)
  string owner = 14; // owner address or "" if noone should be able to modify most important properties
}
message MsgMintCreateFtTxResponse {}

// create new non-fungible token record in the minting module
message MsgMintCreateNftTx {
  string sender = 1;
  string denom_suffix = 2; // suffix that must be applied to the token, min 3 and max 8 lowercase alphabetic characters only (a-z)
  string name = 3; // full name, eg. Bitcoin, (can only be changed by the proposal-upsert-alias)
  string symbol = 4; // symbnol, eg. KEX, BTC, (can only be changed by the proposal-upsert-alias)
  string icon = 5; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  string description = 6; // 512 chars max, (can be changed by owner or proposal-upsert-alias)
  string website = 7; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  string social = 8; // url 256 chars max, (can be changed by owner or proposal-upsert-alias)
  uint64 decimals = 9; // min 0, max 255, (can NOT be changed)
  string cap = 10 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // maximum supply that can be issued, max 2^256 - 1, (can NOT be INCREASED or decreased below current circulatin supply)
  string supply = 11 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // current circulating supply can NOT be more then CAP
  uint64 holders = 12;
  string fee = 13 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ]; // cost of minting 10^decimals per X ukex, can only increase (can be changed by owner only)
  string owner = 14; // owner address or "" if noone should be able to modify most important properties
  string metadata = 15; // metadata url or CID
  string hash = 16; // hexadecimal metadata checksum
}
message MsgMintCreateNftTxResponse {}

// allow owner to mint new tokens or anyone if the minting-fee is set to value
// other then 0.
message MsgMintIssueTx {
  string sender = 1;
  string denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  string receiver = 4;
}
message MsgMintIssueTxResponse {}

// allow anyone burn the tokens they own
message MsgMintBurnTx {
  string sender = 1;
  string denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}
message MsgMintBurnTxResponse {}
