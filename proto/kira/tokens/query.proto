syntax = "proto3";
package kira.tokens;

import "kira/tokens/token.proto";
import "kira/tokens/freeze.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/KiraCore/sekai/x/tokens/types";

// Query defines the gRPC querier service
service Query {
  // Returns the token infos
  rpc GetTokenInfo (TokenInfoRequest) returns (TokenInfoResponse) {
    option (google.api.http).get = "/kira/tokens/info";
  }
  rpc GetAllTokenInfos (AllTokenInfosRequest) returns (AllTokenInfosResponse) {
    option (google.api.http).get = "/kira/tokens/infos";
  }
  rpc GetTokenInfosByDenom (TokenInfosByDenomRequest) returns (TokenInfosByDenomResponse) {
    option (google.api.http).get = "/kira/tokens/infos_by_denom";
  }
  // Returns tokens black/white lists
  rpc GetTokenBlackWhites (TokenBlackWhitesRequest) returns (TokenBlackWhitesResponse) {
    option (google.api.http).get = "/kira/tokens/black_whites";
  }
}

message TokenInfoRequest {
  string denom = 1;
}

message TokenInfoResponse {
  kira.tokens.TokenInfo data = 1;
  cosmos.base.v1beta1.Coin supply = 2 [(gogoproto.nullable) = false];
}

message AllTokenInfosRequest {}

message AllTokenInfosResponse {
  repeated TokenInfoResponse data = 1 [ (gogoproto.nullable) = false ];
}

message TokenInfosByDenomRequest {
  repeated string denoms = 1;
}
  
message TokenInfosByDenomResponse {
  map<string, TokenInfoResponse> data = 1 [ (gogoproto.nullable) = false ];
}

message TokenBlackWhitesRequest {}
message TokenBlackWhitesResponse {
  TokensWhiteBlack data = 1 [ (gogoproto.nullable) = false ];
}