syntax = "proto3";
package kira.recovery;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";
import "google/api/annotations.proto";
import "kira/recovery/recovery.proto";

option go_package = "github.com/KiraCore/sekai/x/recovery/types";

// Query defines the gRPC querier service.
service Query {
  // given KIRA public address as parameter return data from the recovery registrar
  rpc RecoveryRecord(QueryRecoveryRecordRequest) returns (QueryRecoveryRecordResponse) {
    option (google.api.http).get = "/kira/recovery/v1beta1/recovery_record/{address}";
  }
  rpc RecoveryToken(QueryRecoveryTokenRequest) returns (QueryRecoveryTokenResponse) {
    option (google.api.http).get = "/kira/recovery/v1beta1/recovery_token/{address}";
  }
  rpc RRHolderRewards(QueryRRHolderRewardsRequest) returns (QueryRRHolderRewardsResponse) {
    option (google.api.http).get = "/kira/recovery/v1beta1/recovery_token_rewards/{address}";
  }
  rpc RegisteredRRTokenHolders(QueryRegisteredRRTokenHoldersRequest) returns (QueryRegisteredRRTokenHoldersResponse) {
    option (google.api.http).get = "/kira/recovery/v1beta1/recovery_token_holders/{recovery_token}";
  }
}

message QueryRecoveryRecordRequest {
    string address = 1;
}

message QueryRecoveryRecordResponse {
  kira.recovery.RecoveryRecord record = 1 [(gogoproto.nullable) = false];
}

message QueryRecoveryTokenRequest {
    string address = 1;
}

message QueryRecoveryTokenResponse {
  kira.recovery.RecoveryToken token = 1 [ (gogoproto.nullable) = false ];
}

message QueryRRHolderRewardsRequest { 
  string address = 1;
}
message QueryRRHolderRewardsResponse {
  repeated string rewards = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

message QueryRegisteredRRTokenHoldersRequest {
  string recovery_token = 1;
}
message QueryRegisteredRRTokenHoldersResponse {
  repeated string holders = 1;
}
