// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: kira/tokens/query.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AllTokenAliasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllTokenAliasesRequest) Reset() {
	*x = AllTokenAliasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_tokens_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokenAliasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokenAliasesRequest) ProtoMessage() {}

func (x *AllTokenAliasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_tokens_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokenAliasesRequest.ProtoReflect.Descriptor instead.
func (*AllTokenAliasesRequest) Descriptor() ([]byte, []int) {
	return file_kira_tokens_query_proto_rawDescGZIP(), []int{0}
}

type AllTokenAliasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TokenAlias `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AllTokenAliasesResponse) Reset() {
	*x = AllTokenAliasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_tokens_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokenAliasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokenAliasesResponse) ProtoMessage() {}

func (x *AllTokenAliasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_tokens_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokenAliasesResponse.ProtoReflect.Descriptor instead.
func (*AllTokenAliasesResponse) Descriptor() ([]byte, []int) {
	return file_kira_tokens_query_proto_rawDescGZIP(), []int{1}
}

func (x *AllTokenAliasesResponse) GetData() []*TokenAlias {
	if x != nil {
		return x.Data
	}
	return nil
}

type AllTokenRatesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllTokenRatesRequest) Reset() {
	*x = AllTokenRatesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_tokens_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokenRatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokenRatesRequest) ProtoMessage() {}

func (x *AllTokenRatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_kira_tokens_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokenRatesRequest.ProtoReflect.Descriptor instead.
func (*AllTokenRatesRequest) Descriptor() ([]byte, []int) {
	return file_kira_tokens_query_proto_rawDescGZIP(), []int{2}
}

type AllTokenRatesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TokenRate `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AllTokenRatesResponse) Reset() {
	*x = AllTokenRatesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kira_tokens_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllTokenRatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTokenRatesResponse) ProtoMessage() {}

func (x *AllTokenRatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_kira_tokens_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTokenRatesResponse.ProtoReflect.Descriptor instead.
func (*AllTokenRatesResponse) Descriptor() ([]byte, []int) {
	return file_kira_tokens_query_proto_rawDescGZIP(), []int{3}
}

func (x *AllTokenRatesResponse) GetData() []*TokenRate {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_kira_tokens_query_proto protoreflect.FileDescriptor

var file_kira_tokens_query_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x17, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x46, 0x0a, 0x17, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x43, 0x0a, 0x15, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0xfd, 0x02, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0xbe,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x23, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b,
	0x69, 0x72, 0x61, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x65, 0x73, 0x92, 0x41, 0x3a, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x41, 0x6c, 0x6c,
	0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x12,
	0xb2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6b, 0x69, 0x72, 0x61, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x2f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x92, 0x41, 0x36, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x20, 0x41, 0x6c, 0x6c,
	0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x52, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x16, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x20, 0x41, 0x6c, 0x6c, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x52, 0x61,
	0x74, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61,
	0x69, 0x2f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x58, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92, 0x41,
	0x44, 0x12, 0x05, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x2a, 0x01, 0x01, 0x72, 0x38, 0x0a, 0x0c, 0x67,
	0x52, 0x50, 0x43, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4b, 0x69, 0x72, 0x61, 0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x58, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_tokens_query_proto_rawDescOnce sync.Once
	file_kira_tokens_query_proto_rawDescData = file_kira_tokens_query_proto_rawDesc
)

func file_kira_tokens_query_proto_rawDescGZIP() []byte {
	file_kira_tokens_query_proto_rawDescOnce.Do(func() {
		file_kira_tokens_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_tokens_query_proto_rawDescData)
	})
	return file_kira_tokens_query_proto_rawDescData
}

var file_kira_tokens_query_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_kira_tokens_query_proto_goTypes = []interface{}{
	(*AllTokenAliasesRequest)(nil),  // 0: kira.tokens.AllTokenAliasesRequest
	(*AllTokenAliasesResponse)(nil), // 1: kira.tokens.AllTokenAliasesResponse
	(*AllTokenRatesRequest)(nil),    // 2: kira.tokens.AllTokenRatesRequest
	(*AllTokenRatesResponse)(nil),   // 3: kira.tokens.AllTokenRatesResponse
	(*TokenAlias)(nil),              // 4: kira.tokens.TokenAlias
	(*TokenRate)(nil),               // 5: kira.tokens.TokenRate
}
var file_kira_tokens_query_proto_depIdxs = []int32{
	4, // 0: kira.tokens.AllTokenAliasesResponse.data:type_name -> kira.tokens.TokenAlias
	5, // 1: kira.tokens.AllTokenRatesResponse.data:type_name -> kira.tokens.TokenRate
	0, // 2: kira.tokens.Query.GetAllTokenAliases:input_type -> kira.tokens.AllTokenAliasesRequest
	2, // 3: kira.tokens.Query.GetAllTokenRates:input_type -> kira.tokens.AllTokenRatesRequest
	1, // 4: kira.tokens.Query.GetAllTokenAliases:output_type -> kira.tokens.AllTokenAliasesResponse
	3, // 5: kira.tokens.Query.GetAllTokenRates:output_type -> kira.tokens.AllTokenRatesResponse
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_kira_tokens_query_proto_init() }
func file_kira_tokens_query_proto_init() {
	if File_kira_tokens_query_proto != nil {
		return
	}
	file_kira_tokens_alias_proto_init()
	file_kira_tokens_rate_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_kira_tokens_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokenAliasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_tokens_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokenAliasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_tokens_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokenRatesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kira_tokens_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllTokenRatesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_tokens_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_kira_tokens_query_proto_goTypes,
		DependencyIndexes: file_kira_tokens_query_proto_depIdxs,
		MessageInfos:      file_kira_tokens_query_proto_msgTypes,
	}.Build()
	File_kira_tokens_query_proto = out.File
	file_kira_tokens_query_proto_rawDesc = nil
	file_kira_tokens_query_proto_goTypes = nil
	file_kira_tokens_query_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the token alias
	GetAllTokenAliases(ctx context.Context, in *AllTokenAliasesRequest, opts ...grpc.CallOption) (*AllTokenAliasesResponse, error)
	// Returns the token rates
	GetAllTokenRates(ctx context.Context, in *AllTokenRatesRequest, opts ...grpc.CallOption) (*AllTokenRatesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllTokenAliases(ctx context.Context, in *AllTokenAliasesRequest, opts ...grpc.CallOption) (*AllTokenAliasesResponse, error) {
	out := new(AllTokenAliasesResponse)
	err := c.cc.Invoke(ctx, "/kira.tokens.Query/GetAllTokenAliases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllTokenRates(ctx context.Context, in *AllTokenRatesRequest, opts ...grpc.CallOption) (*AllTokenRatesResponse, error) {
	out := new(AllTokenRatesResponse)
	err := c.cc.Invoke(ctx, "/kira.tokens.Query/GetAllTokenRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns the token alias
	GetAllTokenAliases(context.Context, *AllTokenAliasesRequest) (*AllTokenAliasesResponse, error)
	// Returns the token rates
	GetAllTokenRates(context.Context, *AllTokenRatesRequest) (*AllTokenRatesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllTokenAliases(context.Context, *AllTokenAliasesRequest) (*AllTokenAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokenAliases not implemented")
}
func (*UnimplementedQueryServer) GetAllTokenRates(context.Context, *AllTokenRatesRequest) (*AllTokenRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTokenRates not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllTokenAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTokenAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllTokenAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.tokens.Query/GetAllTokenAliases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllTokenAliases(ctx, req.(*AllTokenAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllTokenRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllTokenRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllTokenRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.tokens.Query/GetAllTokenRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllTokenRates(ctx, req.(*AllTokenRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.tokens.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllTokenAliases",
			Handler:    _Query_GetAllTokenAliases_Handler,
		},
		{
			MethodName: "GetAllTokenRates",
			Handler:    _Query_GetAllTokenRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/tokens/query.proto",
}
