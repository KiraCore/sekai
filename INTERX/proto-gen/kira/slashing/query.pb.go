// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/slashing/query.proto

package proto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorSigningInfo defines a validator's signing info for monitoring their
// liveness activity.
type ValidatorSigningInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// height at which validator was first a candidate OR was activated
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty"`
	// timestamp validator cannot be activated until
	InactiveUntil *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=inactive_until,json=inactiveUntil,proto3" json:"inactive_until,omitempty"`
	// whether or not a validator has been tombstoned (killed out of validator
	// set)
	Tombstoned bool `protobuf:"varint,4,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	// missed blocks sequentially
	Mischance int64 `protobuf:"varint,5,opt,name=mischance,proto3" json:"mischance,omitempty"`
	// last signed block height by the validator
	LastPresentBlock int64 `protobuf:"varint,6,opt,name=last_present_block,json=lastPresentBlock,proto3" json:"last_present_block,omitempty"`
	// missed blocks counter (to avoid scanning the array every time)
	MissedBlocksCounter int64 `protobuf:"varint,7,opt,name=missed_blocks_counter,json=missedBlocksCounter,proto3" json:"missed_blocks_counter,omitempty"`
	// count produced blocks so far by a validator
	ProducedBlocksCounter int64    `protobuf:"varint,8,opt,name=produced_blocks_counter,json=producedBlocksCounter,proto3" json:"produced_blocks_counter,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *ValidatorSigningInfo) Reset()         { *m = ValidatorSigningInfo{} }
func (m *ValidatorSigningInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorSigningInfo) ProtoMessage()    {}
func (*ValidatorSigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5858f9240a85cd9f, []int{0}
}

func (m *ValidatorSigningInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidatorSigningInfo.Unmarshal(m, b)
}
func (m *ValidatorSigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidatorSigningInfo.Marshal(b, m, deterministic)
}
func (m *ValidatorSigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSigningInfo.Merge(m, src)
}
func (m *ValidatorSigningInfo) XXX_Size() int {
	return xxx_messageInfo_ValidatorSigningInfo.Size(m)
}
func (m *ValidatorSigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSigningInfo proto.InternalMessageInfo

func (m *ValidatorSigningInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorSigningInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *ValidatorSigningInfo) GetInactiveUntil() *timestamppb.Timestamp {
	if m != nil {
		return m.InactiveUntil
	}
	return nil
}

func (m *ValidatorSigningInfo) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *ValidatorSigningInfo) GetMischance() int64 {
	if m != nil {
		return m.Mischance
	}
	return 0
}

func (m *ValidatorSigningInfo) GetLastPresentBlock() int64 {
	if m != nil {
		return m.LastPresentBlock
	}
	return 0
}

func (m *ValidatorSigningInfo) GetMissedBlocksCounter() int64 {
	if m != nil {
		return m.MissedBlocksCounter
	}
	return 0
}

func (m *ValidatorSigningInfo) GetProducedBlocksCounter() int64 {
	if m != nil {
		return m.ProducedBlocksCounter
	}
	return 0
}

// QuerySigningInfoRequest is the request type for the Query/SigningInfo RPC
// method
type QuerySigningInfoRequest struct {
	// cons_address is the address to query signing info of
	ConsAddress          string   `protobuf:"bytes,1,opt,name=cons_address,json=consAddress,proto3" json:"cons_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QuerySigningInfoRequest) Reset()         { *m = QuerySigningInfoRequest{} }
func (m *QuerySigningInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningInfoRequest) ProtoMessage()    {}
func (*QuerySigningInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5858f9240a85cd9f, []int{1}
}

func (m *QuerySigningInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySigningInfoRequest.Unmarshal(m, b)
}
func (m *QuerySigningInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySigningInfoRequest.Marshal(b, m, deterministic)
}
func (m *QuerySigningInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningInfoRequest.Merge(m, src)
}
func (m *QuerySigningInfoRequest) XXX_Size() int {
	return xxx_messageInfo_QuerySigningInfoRequest.Size(m)
}
func (m *QuerySigningInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningInfoRequest proto.InternalMessageInfo

func (m *QuerySigningInfoRequest) GetConsAddress() string {
	if m != nil {
		return m.ConsAddress
	}
	return ""
}

// QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
// method
type QuerySigningInfoResponse struct {
	// val_signing_info is the signing info of requested val cons address
	ValSigningInfo       *ValidatorSigningInfo `protobuf:"bytes,1,opt,name=val_signing_info,json=valSigningInfo,proto3" json:"val_signing_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *QuerySigningInfoResponse) Reset()         { *m = QuerySigningInfoResponse{} }
func (m *QuerySigningInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningInfoResponse) ProtoMessage()    {}
func (*QuerySigningInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5858f9240a85cd9f, []int{2}
}

func (m *QuerySigningInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySigningInfoResponse.Unmarshal(m, b)
}
func (m *QuerySigningInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySigningInfoResponse.Marshal(b, m, deterministic)
}
func (m *QuerySigningInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningInfoResponse.Merge(m, src)
}
func (m *QuerySigningInfoResponse) XXX_Size() int {
	return xxx_messageInfo_QuerySigningInfoResponse.Size(m)
}
func (m *QuerySigningInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningInfoResponse proto.InternalMessageInfo

func (m *QuerySigningInfoResponse) GetValSigningInfo() *ValidatorSigningInfo {
	if m != nil {
		return m.ValSigningInfo
	}
	return nil
}

// QuerySigningInfosRequest is the request type for the Query/SigningInfos RPC
// method
type QuerySigningInfosRequest struct {
	Pagination           *PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *QuerySigningInfosRequest) Reset()         { *m = QuerySigningInfosRequest{} }
func (m *QuerySigningInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySigningInfosRequest) ProtoMessage()    {}
func (*QuerySigningInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5858f9240a85cd9f, []int{3}
}

func (m *QuerySigningInfosRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySigningInfosRequest.Unmarshal(m, b)
}
func (m *QuerySigningInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySigningInfosRequest.Marshal(b, m, deterministic)
}
func (m *QuerySigningInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningInfosRequest.Merge(m, src)
}
func (m *QuerySigningInfosRequest) XXX_Size() int {
	return xxx_messageInfo_QuerySigningInfosRequest.Size(m)
}
func (m *QuerySigningInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningInfosRequest proto.InternalMessageInfo

func (m *QuerySigningInfosRequest) GetPagination() *PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
// method
type QuerySigningInfosResponse struct {
	// info is the signing info of all validators
	Info                 []*ValidatorSigningInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
	Pagination           *PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QuerySigningInfosResponse) Reset()         { *m = QuerySigningInfosResponse{} }
func (m *QuerySigningInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySigningInfosResponse) ProtoMessage()    {}
func (*QuerySigningInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5858f9240a85cd9f, []int{4}
}

func (m *QuerySigningInfosResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySigningInfosResponse.Unmarshal(m, b)
}
func (m *QuerySigningInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySigningInfosResponse.Marshal(b, m, deterministic)
}
func (m *QuerySigningInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySigningInfosResponse.Merge(m, src)
}
func (m *QuerySigningInfosResponse) XXX_Size() int {
	return xxx_messageInfo_QuerySigningInfosResponse.Size(m)
}
func (m *QuerySigningInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySigningInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySigningInfosResponse proto.InternalMessageInfo

func (m *QuerySigningInfosResponse) GetInfo() []*ValidatorSigningInfo {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *QuerySigningInfosResponse) GetPagination() *PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*ValidatorSigningInfo)(nil), "kira.slashing.ValidatorSigningInfo")
	proto.RegisterType((*QuerySigningInfoRequest)(nil), "kira.slashing.QuerySigningInfoRequest")
	proto.RegisterType((*QuerySigningInfoResponse)(nil), "kira.slashing.QuerySigningInfoResponse")
	proto.RegisterType((*QuerySigningInfosRequest)(nil), "kira.slashing.QuerySigningInfosRequest")
	proto.RegisterType((*QuerySigningInfosResponse)(nil), "kira.slashing.QuerySigningInfosResponse")
}

func init() {
	proto.RegisterFile("kira/slashing/query.proto", fileDescriptor_5858f9240a85cd9f)
}

var fileDescriptor_5858f9240a85cd9f = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0x9b, 0xa6, 0x3f, 0x9b, 0xb4, 0x2a, 0xdb, 0x56, 0x75, 0x4d, 0xd5, 0xb8, 0x46, 0x2a,
	0x11, 0xa2, 0x36, 0x04, 0x09, 0xa1, 0x00, 0x87, 0xa6, 0x20, 0x51, 0x21, 0x50, 0x71, 0x4b, 0x85,
	0xb8, 0x58, 0x1b, 0x67, 0xe3, 0xac, 0xea, 0xec, 0xba, 0xde, 0x4d, 0xa0, 0x42, 0x5c, 0x78, 0x02,
	0x54, 0x0e, 0x70, 0xec, 0x2b, 0x20, 0xf1, 0x10, 0x1c, 0xb8, 0x71, 0xe1, 0x54, 0x2e, 0x1c, 0x38,
	0xf7, 0x09, 0x90, 0xd7, 0x76, 0xeb, 0x34, 0x81, 0x88, 0x93, 0xb3, 0xf3, 0x7d, 0x33, 0xf3, 0x7d,
	0x3b, 0x93, 0x05, 0x4b, 0xfb, 0x24, 0x44, 0x16, 0xf7, 0x11, 0x6f, 0x11, 0xea, 0x59, 0x07, 0x1d,
	0x1c, 0x1e, 0x9a, 0x41, 0xc8, 0x04, 0x83, 0xd3, 0x11, 0x64, 0xa6, 0x90, 0x36, 0xef, 0x31, 0x8f,
	0x49, 0xc4, 0x8a, 0x7e, 0xc5, 0x24, 0x6d, 0xd9, 0x63, 0xcc, 0xf3, 0xb1, 0x85, 0x02, 0x62, 0x21,
	0x4a, 0x99, 0x40, 0x82, 0x30, 0xca, 0x13, 0xb4, 0x94, 0xa0, 0xf2, 0x54, 0xef, 0x34, 0x2d, 0x41,
	0xda, 0x98, 0x0b, 0xd4, 0x0e, 0x12, 0x42, 0xfc, 0x71, 0xd7, 0x3d, 0x4c, 0xd7, 0x59, 0x80, 0x29,
	0x0a, 0x48, 0xb7, 0x62, 0xb1, 0x40, 0x16, 0x19, 0x50, 0x70, 0xa5, 0x57, 0x6e, 0x80, 0x3c, 0x42,
	0x25, 0x21, 0xc6, 0x8d, 0x2f, 0x39, 0x30, 0xbf, 0x87, 0x7c, 0xd2, 0x40, 0x82, 0x85, 0x3b, 0xc4,
	0xa3, 0x84, 0x7a, 0x5b, 0xb4, 0xc9, 0xa0, 0x0a, 0x26, 0x50, 0xa3, 0x11, 0x62, 0xce, 0x55, 0x45,
	0x57, 0xca, 0x53, 0x76, 0x7a, 0x84, 0x55, 0x50, 0xe4, 0x02, 0x85, 0xc2, 0x69, 0x61, 0xe2, 0xb5,
	0x84, 0x3a, 0xaa, 0x2b, 0xe5, 0x5c, 0x6d, 0xf1, 0xf4, 0xa4, 0x34, 0x77, 0x88, 0xda, 0x7e, 0xd5,
	0xc8, 0xa2, 0x86, 0x5d, 0x90, 0xc7, 0x47, 0xf2, 0x04, 0x1b, 0x60, 0x86, 0x50, 0xe4, 0x0a, 0xd2,
	0xc5, 0x4e, 0x87, 0x0a, 0xe2, 0xab, 0x39, 0x5d, 0x29, 0x17, 0x2a, 0x9a, 0x19, 0x1b, 0x37, 0x53,
	0xe3, 0xe6, 0x6e, 0x6a, 0xbc, 0xb6, 0xfa, 0xf5, 0xa4, 0x34, 0x72, 0x7a, 0x52, 0x5a, 0x88, 0xab,
	0xf7, 0xe6, 0x1b, 0xef, 0x7f, 0x96, 0x14, 0x7b, 0x3a, 0x0d, 0x3e, 0x8f, 0x62, 0x70, 0x05, 0x00,
	0xc1, 0xda, 0x75, 0x2e, 0x18, 0xc5, 0x0d, 0x75, 0x4c, 0x57, 0xca, 0x93, 0x76, 0x26, 0x02, 0x97,
	0xc1, 0x54, 0x9b, 0x70, 0xb7, 0x85, 0xa8, 0x8b, 0xd5, 0x7c, 0x24, 0xdf, 0x3e, 0x0f, 0xc0, 0xeb,
	0x00, 0xfa, 0x88, 0x0b, 0x27, 0x08, 0x31, 0xc7, 0x54, 0x38, 0x75, 0x9f, 0xb9, 0xfb, 0xea, 0xb8,
	0xa4, 0xcd, 0x46, 0xc8, 0x76, 0x0c, 0xd4, 0xa2, 0x38, 0xac, 0x80, 0x85, 0x36, 0xe1, 0x1c, 0x37,
	0x62, 0x1e, 0x77, 0x5c, 0xd6, 0xa1, 0x02, 0x87, 0xea, 0x84, 0x4c, 0x98, 0x8b, 0x41, 0xc9, 0xe5,
	0x9b, 0x31, 0x04, 0x6f, 0x83, 0xc5, 0x20, 0x64, 0x8d, 0x8e, 0xdb, 0x9f, 0x35, 0x29, 0xb3, 0x16,
	0x52, 0xb8, 0x27, 0xaf, 0x3a, 0xf9, 0xe9, 0xb8, 0x34, 0xf2, 0xfb, 0xb8, 0xa4, 0x18, 0xf7, 0xc0,
	0xe2, 0xb3, 0x68, 0xf3, 0x32, 0x13, 0xb3, 0xf1, 0x41, 0x07, 0x73, 0x01, 0x57, 0x41, 0xd1, 0x65,
	0x94, 0x3b, 0xbd, 0xd3, 0x2b, 0x44, 0xb1, 0x8d, 0x38, 0x64, 0x30, 0xa0, 0xf6, 0x67, 0xf3, 0x80,
	0x51, 0x8e, 0xe1, 0x0e, 0x98, 0xed, 0x22, 0xdf, 0xe1, 0x31, 0xe4, 0x10, 0xda, 0x64, 0xb2, 0x44,
	0xa1, 0x72, 0xc5, 0xec, 0xd9, 0x6f, 0x73, 0xd0, 0xda, 0xd4, 0xc6, 0xa2, 0x61, 0xd9, 0x33, 0x5d,
	0xe4, 0x67, 0xa2, 0xc6, 0x5e, 0x7f, 0x43, 0x9e, 0xea, 0xad, 0x02, 0x70, 0xbe, 0x95, 0x49, 0x2b,
	0xed, 0x42, 0xab, 0x6d, 0xe4, 0xe1, 0x84, 0x6f, 0x67, 0xd8, 0xc6, 0x47, 0x05, 0x2c, 0x0d, 0x28,
	0x9c, 0x58, 0xb9, 0x0f, 0xc6, 0x12, 0xf9, 0xb9, 0xff, 0x93, 0x2f, 0xd3, 0xe0, 0xdd, 0x1e, 0x61,
	0xa3, 0x52, 0xd8, 0xe5, 0x81, 0xc2, 0xe2, 0x7e, 0x59, 0x65, 0x95, 0xcf, 0x39, 0x90, 0x97, 0xca,
	0xe0, 0x0f, 0x05, 0x14, 0xb2, 0x7f, 0xac, 0xb5, 0x0b, 0x25, 0xfe, 0x32, 0x47, 0xed, 0xea, 0x50,
	0x5e, 0xdc, 0xd6, 0x78, 0x7d, 0xb4, 0xf1, 0x04, 0xe4, 0xe5, 0x43, 0x04, 0x57, 0x25, 0x4b, 0x4f,
	0x68, 0x7a, 0xc4, 0xd3, 0x59, 0x53, 0x47, 0xfa, 0x99, 0x5b, 0x6d, 0x38, 0xe5, 0xdd, 0xf7, 0x5f,
	0x1f, 0x46, 0x0d, 0xa8, 0xcb, 0x37, 0xaa, 0x8b, 0x7c, 0x16, 0xe0, 0x30, 0xba, 0x11, 0x6e, 0xbd,
	0xc9, 0x6e, 0xd6, 0x5b, 0xf8, 0x4d, 0x01, 0xc5, 0xec, 0xcd, 0xc3, 0x61, 0x9a, 0xd3, 0xa1, 0x6b,
	0xe5, 0xe1, 0xc4, 0xc4, 0x1d, 0xf9, 0xb7, 0x3b, 0x1e, 0x69, 0x3f, 0x53, 0xce, 0xb5, 0xe1, 0x14,
	0xe9, 0x6e, 0x0e, 0x5e, 0xea, 0x73, 0x57, 0x63, 0x47, 0x1b, 0x0f, 0x60, 0xbe, 0x92, 0xbb, 0x69,
	0xde, 0xb8, 0xa6, 0x28, 0xe1, 0x1d, 0x50, 0xf4, 0xec, 0xed, 0xcd, 0x75, 0x0f, 0x09, 0xfc, 0x0a,
	0x1d, 0xc2, 0x72, 0x4b, 0x88, 0x80, 0x57, 0x2d, 0xcb, 0x23, 0xa2, 0xd5, 0xa9, 0x9b, 0x2e, 0x6b,
	0x5b, 0x8f, 0x49, 0x88, 0x36, 0x59, 0x88, 0x2d, 0x8e, 0xf7, 0x11, 0xb1, 0xb6, 0x9e, 0xee, 0x3e,
	0xb4, 0x5f, 0xbc, 0x5c, 0x1b, 0xc6, 0x48, 0xde, 0xf7, 0x71, 0xf9, 0xb9, 0xf5, 0x27, 0x00, 0x00,
	0xff, 0xff, 0x5b, 0x00, 0xe9, 0xab, 0x54, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// SigningInfo queries the signing info of given cons address
	SigningInfo(ctx context.Context, in *QuerySigningInfoRequest, opts ...grpc.CallOption) (*QuerySigningInfoResponse, error)
	// SigningInfos queries signing info of all validators
	SigningInfos(ctx context.Context, in *QuerySigningInfosRequest, opts ...grpc.CallOption) (*QuerySigningInfosResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) SigningInfo(ctx context.Context, in *QuerySigningInfoRequest, opts ...grpc.CallOption) (*QuerySigningInfoResponse, error) {
	out := new(QuerySigningInfoResponse)
	err := c.cc.Invoke(ctx, "/kira.slashing.Query/SigningInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SigningInfos(ctx context.Context, in *QuerySigningInfosRequest, opts ...grpc.CallOption) (*QuerySigningInfosResponse, error) {
	out := new(QuerySigningInfosResponse)
	err := c.cc.Invoke(ctx, "/kira.slashing.Query/SigningInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// SigningInfo queries the signing info of given cons address
	SigningInfo(context.Context, *QuerySigningInfoRequest) (*QuerySigningInfoResponse, error)
	// SigningInfos queries signing info of all validators
	SigningInfos(context.Context, *QuerySigningInfosRequest) (*QuerySigningInfosResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) SigningInfo(ctx context.Context, req *QuerySigningInfoRequest) (*QuerySigningInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningInfo not implemented")
}
func (*UnimplementedQueryServer) SigningInfos(ctx context.Context, req *QuerySigningInfosRequest) (*QuerySigningInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SigningInfos not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_SigningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.slashing.Query/SigningInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningInfo(ctx, req.(*QuerySigningInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SigningInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySigningInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SigningInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.slashing.Query/SigningInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SigningInfos(ctx, req.(*QuerySigningInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.slashing.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SigningInfo",
			Handler:    _Query_SigningInfo_Handler,
		},
		{
			MethodName: "SigningInfos",
			Handler:    _Query_SigningInfos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/slashing/query.proto",
}
