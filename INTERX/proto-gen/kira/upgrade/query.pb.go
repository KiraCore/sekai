// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/upgrade/query.proto

package upgrade

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// QueryCurrentPlanRequest is the request type for the Query/CurrentPlan RPC
// method.
type QueryCurrentPlanRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCurrentPlanRequest) Reset()         { *m = QueryCurrentPlanRequest{} }
func (m *QueryCurrentPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentPlanRequest) ProtoMessage()    {}
func (*QueryCurrentPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d6e2e2517e583f0, []int{0}
}

func (m *QueryCurrentPlanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryCurrentPlanRequest.Unmarshal(m, b)
}
func (m *QueryCurrentPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryCurrentPlanRequest.Marshal(b, m, deterministic)
}
func (m *QueryCurrentPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentPlanRequest.Merge(m, src)
}
func (m *QueryCurrentPlanRequest) XXX_Size() int {
	return xxx_messageInfo_QueryCurrentPlanRequest.Size(m)
}
func (m *QueryCurrentPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentPlanRequest proto.InternalMessageInfo

// QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC
// method.
type QueryCurrentPlanResponse struct {
	// plan is the current upgrade plan.
	Plan                 *Plan    `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryCurrentPlanResponse) Reset()         { *m = QueryCurrentPlanResponse{} }
func (m *QueryCurrentPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentPlanResponse) ProtoMessage()    {}
func (*QueryCurrentPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d6e2e2517e583f0, []int{1}
}

func (m *QueryCurrentPlanResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryCurrentPlanResponse.Unmarshal(m, b)
}
func (m *QueryCurrentPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryCurrentPlanResponse.Marshal(b, m, deterministic)
}
func (m *QueryCurrentPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentPlanResponse.Merge(m, src)
}
func (m *QueryCurrentPlanResponse) XXX_Size() int {
	return xxx_messageInfo_QueryCurrentPlanResponse.Size(m)
}
func (m *QueryCurrentPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentPlanResponse proto.InternalMessageInfo

func (m *QueryCurrentPlanResponse) GetPlan() *Plan {
	if m != nil {
		return m.Plan
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCurrentPlanRequest)(nil), "kira.upgrade.QueryCurrentPlanRequest")
	proto.RegisterType((*QueryCurrentPlanResponse)(nil), "kira.upgrade.QueryCurrentPlanResponse")
}

func init() {
	proto.RegisterFile("kira/upgrade/query.proto", fileDescriptor_4d6e2e2517e583f0)
}

var fileDescriptor_4d6e2e2517e583f0 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x4a, 0x3b, 0x31,
	0x10, 0xc7, 0xc9, 0xef, 0x67, 0x3d, 0xa4, 0x3d, 0xe5, 0xd2, 0x76, 0x11, 0x59, 0x0a, 0x96, 0x22,
	0x74, 0xa3, 0xeb, 0x41, 0xf1, 0x22, 0x6d, 0xf5, 0x20, 0x82, 0xd4, 0xa2, 0x20, 0x5e, 0x64, 0x5a,
	0x63, 0x1a, 0x5a, 0x93, 0x34, 0x9b, 0x55, 0x7a, 0x13, 0x1f, 0xa1, 0xbe, 0x93, 0x67, 0xc1, 0x57,
	0xf0, 0x41, 0x64, 0xb3, 0x39, 0x74, 0xf1, 0x4f, 0x4f, 0x81, 0xfd, 0x7c, 0x66, 0xf8, 0xce, 0xce,
	0xe0, 0xda, 0x44, 0x18, 0xa0, 0xa9, 0xe6, 0x06, 0xee, 0x18, 0x9d, 0xa5, 0xcc, 0xcc, 0x23, 0x6d,
	0x94, 0x55, 0xa4, 0x92, 0x91, 0xc8, 0x93, 0xa0, 0xce, 0x95, 0xe2, 0x53, 0x46, 0x1d, 0x1b, 0xa6,
	0xf7, 0x14, 0xa4, 0x17, 0x83, 0x0d, 0x8f, 0x40, 0x0b, 0x0a, 0x52, 0x2a, 0x0b, 0x56, 0x28, 0x99,
	0x78, 0x9a, 0x3f, 0xa3, 0x36, 0x67, 0xb2, 0xad, 0x34, 0x93, 0xa0, 0xc5, 0x63, 0x4c, 0x95, 0x76,
	0xce, 0x0f, 0x7e, 0x50, 0x08, 0xe4, 0x5f, 0xcf, 0xaa, 0x05, 0xa6, 0xa7, 0x20, 0x73, 0xd0, 0xa8,
	0xe3, 0xea, 0x45, 0x16, 0xbd, 0x97, 0x1a, 0xc3, 0xa4, 0xed, 0x4f, 0x41, 0x0e, 0xd8, 0x2c, 0x65,
	0x89, 0x6d, 0x74, 0x71, 0xed, 0x3b, 0x4a, 0xb4, 0x92, 0x09, 0x23, 0x4d, 0xbc, 0x96, 0x35, 0xa9,
	0xa1, 0x10, 0xb5, 0xca, 0x31, 0x89, 0x96, 0x27, 0x8e, 0x9c, 0xe9, 0x78, 0xfc, 0x8e, 0x70, 0xc9,
	0x35, 0x21, 0x6f, 0x08, 0x97, 0x97, 0x3a, 0x91, 0xad, 0x62, 0xcd, 0x2f, 0x21, 0x82, 0xe6, 0x2a,
	0x2d, 0x0f, 0xd4, 0x18, 0x2f, 0x3a, 0x47, 0xb8, 0xe4, 0xb6, 0x40, 0x02, 0x67, 0x85, 0x5e, 0x0b,
	0xaf, 0xf2, 0xda, 0x30, 0xf3, 0x83, 0x3f, 0xd8, 0xcb, 0xc7, 0xe7, 0xeb, 0xbf, 0x90, 0x6c, 0xba,
	0x75, 0x14, 0xfe, 0xd7, 0x28, 0xb7, 0x6f, 0xb3, 0x91, 0xba, 0xcf, 0x68, 0xd1, 0x39, 0x26, 0xa5,
	0xf8, 0xff, 0x6e, 0xb4, 0xb3, 0x8d, 0x90, 0x39, 0xc0, 0x15, 0x3e, 0xe8, 0xf7, 0xda, 0x1c, 0x2c,
	0x7b, 0x82, 0x39, 0x69, 0x8d, 0xad, 0xd5, 0xc9, 0x21, 0xa5, 0x5c, 0xd8, 0x71, 0x3a, 0x8c, 0x46,
	0xea, 0x81, 0x9e, 0x09, 0x03, 0x3d, 0x65, 0x18, 0x4d, 0xd8, 0x04, 0x04, 0x3d, 0x3d, 0xbf, 0x3c,
	0x19, 0x5c, 0xdf, 0xec, 0xaf, 0x32, 0xf2, 0x9b, 0xc9, 0x0e, 0xa0, 0x90, 0x67, 0xb8, 0xee, 0xbe,
	0xef, 0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x24, 0x80, 0xf1, 0x36, 0x83, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// CurrentPlan queries the current upgrade plan.
	CurrentPlan(ctx context.Context, in *QueryCurrentPlanRequest, opts ...grpc.CallOption) (*QueryCurrentPlanResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CurrentPlan(ctx context.Context, in *QueryCurrentPlanRequest, opts ...grpc.CallOption) (*QueryCurrentPlanResponse, error) {
	out := new(QueryCurrentPlanResponse)
	err := c.cc.Invoke(ctx, "/kira.upgrade.Query/CurrentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// CurrentPlan queries the current upgrade plan.
	CurrentPlan(context.Context, *QueryCurrentPlanRequest) (*QueryCurrentPlanResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CurrentPlan(ctx context.Context, req *QueryCurrentPlanRequest) (*QueryCurrentPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentPlan not implemented")
}

func RegisterQueryServer(s *grpc.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CurrentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.upgrade.Query/CurrentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentPlan(ctx, req.(*QueryCurrentPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.upgrade.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CurrentPlan",
			Handler:    _Query_CurrentPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/upgrade/query.proto",
}
