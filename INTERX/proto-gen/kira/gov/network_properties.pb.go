// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kira/gov/network_properties.proto

package gov

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkProperty int32

const (
	NetworkProperty_MIN_TX_FEE                     NetworkProperty = 0
	NetworkProperty_MAX_TX_FEE                     NetworkProperty = 1
	NetworkProperty_VOTE_QUORUM                    NetworkProperty = 2
	NetworkProperty_PROPOSAL_END_TIME              NetworkProperty = 3
	NetworkProperty_PROPOSAL_ENACTMENT_TIME        NetworkProperty = 4
	NetworkProperty_MIN_PROPOSAL_END_BLOCKS        NetworkProperty = 5
	NetworkProperty_MIN_PROPOSAL_ENACTMENT_BLOCKS  NetworkProperty = 6
	NetworkProperty_ENABLE_FOREIGN_FEE_PAYMENTS    NetworkProperty = 7
	NetworkProperty_MISCHANCE_RANK_DECREASE_AMOUNT NetworkProperty = 8
	NetworkProperty_MAX_MISCHANCE                  NetworkProperty = 9
	NetworkProperty_MISCHANCE_CONFIDENCE           NetworkProperty = 10
	NetworkProperty_INACTIVE_RANK_DECREASE_PERCENT NetworkProperty = 11
	NetworkProperty_POOR_NETWORK_MAX_BANK_SEND     NetworkProperty = 12
	NetworkProperty_MIN_VALIDATORS                 NetworkProperty = 13
	NetworkProperty_JAIL_MAX_TIME                  NetworkProperty = 14
	NetworkProperty_ENABLE_TOKEN_WHITELIST         NetworkProperty = 15
	NetworkProperty_ENABLE_TOKEN_BLACKLIST         NetworkProperty = 16
	NetworkProperty_MIN_IDENTITY_APPROVAL_TIP      NetworkProperty = 17
	NetworkProperty_UNIQUE_IDENTITY_KEYS           NetworkProperty = 18
)

var NetworkProperty_name = map[int32]string{
	0:  "MIN_TX_FEE",
	1:  "MAX_TX_FEE",
	2:  "VOTE_QUORUM",
	3:  "PROPOSAL_END_TIME",
	4:  "PROPOSAL_ENACTMENT_TIME",
	5:  "MIN_PROPOSAL_END_BLOCKS",
	6:  "MIN_PROPOSAL_ENACTMENT_BLOCKS",
	7:  "ENABLE_FOREIGN_FEE_PAYMENTS",
	8:  "MISCHANCE_RANK_DECREASE_AMOUNT",
	9:  "MAX_MISCHANCE",
	10: "MISCHANCE_CONFIDENCE",
	11: "INACTIVE_RANK_DECREASE_PERCENT",
	12: "POOR_NETWORK_MAX_BANK_SEND",
	13: "MIN_VALIDATORS",
	14: "JAIL_MAX_TIME",
	15: "ENABLE_TOKEN_WHITELIST",
	16: "ENABLE_TOKEN_BLACKLIST",
	17: "MIN_IDENTITY_APPROVAL_TIP",
	18: "UNIQUE_IDENTITY_KEYS",
}

var NetworkProperty_value = map[string]int32{
	"MIN_TX_FEE":                     0,
	"MAX_TX_FEE":                     1,
	"VOTE_QUORUM":                    2,
	"PROPOSAL_END_TIME":              3,
	"PROPOSAL_ENACTMENT_TIME":        4,
	"MIN_PROPOSAL_END_BLOCKS":        5,
	"MIN_PROPOSAL_ENACTMENT_BLOCKS":  6,
	"ENABLE_FOREIGN_FEE_PAYMENTS":    7,
	"MISCHANCE_RANK_DECREASE_AMOUNT": 8,
	"MAX_MISCHANCE":                  9,
	"MISCHANCE_CONFIDENCE":           10,
	"INACTIVE_RANK_DECREASE_PERCENT": 11,
	"POOR_NETWORK_MAX_BANK_SEND":     12,
	"MIN_VALIDATORS":                 13,
	"JAIL_MAX_TIME":                  14,
	"ENABLE_TOKEN_WHITELIST":         15,
	"ENABLE_TOKEN_BLACKLIST":         16,
	"MIN_IDENTITY_APPROVAL_TIP":      17,
	"UNIQUE_IDENTITY_KEYS":           18,
}

func (x NetworkProperty) String() string {
	return proto.EnumName(NetworkProperty_name, int32(x))
}

func (NetworkProperty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}

type MsgSetNetworkProperties struct {
	NetworkProperties    *NetworkProperties `protobuf:"bytes,1,opt,name=network_properties,json=networkProperties,proto3" json:"network_properties,omitempty"`
	Proposer             []byte             `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MsgSetNetworkProperties) Reset()         { *m = MsgSetNetworkProperties{} }
func (m *MsgSetNetworkProperties) String() string { return proto.CompactTextString(m) }
func (*MsgSetNetworkProperties) ProtoMessage()    {}
func (*MsgSetNetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}

func (m *MsgSetNetworkProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgSetNetworkProperties.Unmarshal(m, b)
}
func (m *MsgSetNetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgSetNetworkProperties.Marshal(b, m, deterministic)
}
func (m *MsgSetNetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNetworkProperties.Merge(m, src)
}
func (m *MsgSetNetworkProperties) XXX_Size() int {
	return xxx_messageInfo_MsgSetNetworkProperties.Size(m)
}
func (m *MsgSetNetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNetworkProperties proto.InternalMessageInfo

func (m *MsgSetNetworkProperties) GetNetworkProperties() *NetworkProperties {
	if m != nil {
		return m.NetworkProperties
	}
	return nil
}

func (m *MsgSetNetworkProperties) GetProposer() []byte {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type NetworkPropertyValue struct {
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	StrValue             string   `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkPropertyValue) Reset()         { *m = NetworkPropertyValue{} }
func (m *NetworkPropertyValue) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertyValue) ProtoMessage()    {}
func (*NetworkPropertyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{1}
}

func (m *NetworkPropertyValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkPropertyValue.Unmarshal(m, b)
}
func (m *NetworkPropertyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkPropertyValue.Marshal(b, m, deterministic)
}
func (m *NetworkPropertyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertyValue.Merge(m, src)
}
func (m *NetworkPropertyValue) XXX_Size() int {
	return xxx_messageInfo_NetworkPropertyValue.Size(m)
}
func (m *NetworkPropertyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertyValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertyValue proto.InternalMessageInfo

func (m *NetworkPropertyValue) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NetworkPropertyValue) GetStrValue() string {
	if m != nil {
		return m.StrValue
	}
	return ""
}

type NetworkProperties struct {
	MinTxFee                    uint64   `protobuf:"varint,1,opt,name=min_tx_fee,json=minTxFee,proto3" json:"min_tx_fee,omitempty"`
	MaxTxFee                    uint64   `protobuf:"varint,2,opt,name=max_tx_fee,json=maxTxFee,proto3" json:"max_tx_fee,omitempty"`
	VoteQuorum                  uint64   `protobuf:"varint,3,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	ProposalEndTime             uint64   `protobuf:"varint,4,opt,name=proposal_end_time,json=proposalEndTime,proto3" json:"proposal_end_time,omitempty"`
	ProposalEnactmentTime       uint64   `protobuf:"varint,5,opt,name=proposal_enactment_time,json=proposalEnactmentTime,proto3" json:"proposal_enactment_time,omitempty"`
	MinProposalEndBlocks        uint64   `protobuf:"varint,6,opt,name=min_proposal_end_blocks,json=minProposalEndBlocks,proto3" json:"min_proposal_end_blocks,omitempty"`
	MinProposalEnactmentBlocks  uint64   `protobuf:"varint,7,opt,name=min_proposal_enactment_blocks,json=minProposalEnactmentBlocks,proto3" json:"min_proposal_enactment_blocks,omitempty"`
	EnableForeignFeePayments    bool     `protobuf:"varint,8,opt,name=enable_foreign_fee_payments,json=enableForeignFeePayments,proto3" json:"enable_foreign_fee_payments,omitempty"`
	MischanceRankDecreaseAmount uint64   `protobuf:"varint,9,opt,name=mischance_rank_decrease_amount,json=mischanceRankDecreaseAmount,proto3" json:"mischance_rank_decrease_amount,omitempty"`
	MaxMischance                uint64   `protobuf:"varint,10,opt,name=max_mischance,json=maxMischance,proto3" json:"max_mischance,omitempty"`
	MischanceConfidence         uint64   `protobuf:"varint,11,opt,name=mischance_confidence,json=mischanceConfidence,proto3" json:"mischance_confidence,omitempty"`
	InactiveRankDecreasePercent uint64   `protobuf:"varint,12,opt,name=inactive_rank_decrease_percent,json=inactiveRankDecreasePercent,proto3" json:"inactive_rank_decrease_percent,omitempty"`
	MinValidators               uint64   `protobuf:"varint,13,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
	PoorNetworkMaxBankSend      uint64   `protobuf:"varint,14,opt,name=poor_network_max_bank_send,json=poorNetworkMaxBankSend,proto3" json:"poor_network_max_bank_send,omitempty"`
	JailMaxTime                 uint64   `protobuf:"varint,15,opt,name=jail_max_time,json=jailMaxTime,proto3" json:"jail_max_time,omitempty"`
	EnableTokenWhitelist        bool     `protobuf:"varint,16,opt,name=enable_token_whitelist,json=enableTokenWhitelist,proto3" json:"enable_token_whitelist,omitempty"`
	EnableTokenBlacklist        bool     `protobuf:"varint,17,opt,name=enable_token_blacklist,json=enableTokenBlacklist,proto3" json:"enable_token_blacklist,omitempty"`
	MinIdentityApprovalTip      uint64   `protobuf:"varint,18,opt,name=min_identity_approval_tip,json=minIdentityApprovalTip,proto3" json:"min_identity_approval_tip,omitempty"`
	UniqueIdentityKeys          string   `protobuf:"bytes,19,opt,name=unique_identity_keys,json=uniqueIdentityKeys,proto3" json:"unique_identity_keys,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *NetworkProperties) Reset()         { *m = NetworkProperties{} }
func (m *NetworkProperties) String() string { return proto.CompactTextString(m) }
func (*NetworkProperties) ProtoMessage()    {}
func (*NetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{2}
}

func (m *NetworkProperties) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkProperties.Unmarshal(m, b)
}
func (m *NetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkProperties.Marshal(b, m, deterministic)
}
func (m *NetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProperties.Merge(m, src)
}
func (m *NetworkProperties) XXX_Size() int {
	return xxx_messageInfo_NetworkProperties.Size(m)
}
func (m *NetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProperties proto.InternalMessageInfo

func (m *NetworkProperties) GetMinTxFee() uint64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *NetworkProperties) GetMaxTxFee() uint64 {
	if m != nil {
		return m.MaxTxFee
	}
	return 0
}

func (m *NetworkProperties) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *NetworkProperties) GetProposalEndTime() uint64 {
	if m != nil {
		return m.ProposalEndTime
	}
	return 0
}

func (m *NetworkProperties) GetProposalEnactmentTime() uint64 {
	if m != nil {
		return m.ProposalEnactmentTime
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEndBlocks() uint64 {
	if m != nil {
		return m.MinProposalEndBlocks
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEnactmentBlocks() uint64 {
	if m != nil {
		return m.MinProposalEnactmentBlocks
	}
	return 0
}

func (m *NetworkProperties) GetEnableForeignFeePayments() bool {
	if m != nil {
		return m.EnableForeignFeePayments
	}
	return false
}

func (m *NetworkProperties) GetMischanceRankDecreaseAmount() uint64 {
	if m != nil {
		return m.MischanceRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxMischance() uint64 {
	if m != nil {
		return m.MaxMischance
	}
	return 0
}

func (m *NetworkProperties) GetMischanceConfidence() uint64 {
	if m != nil {
		return m.MischanceConfidence
	}
	return 0
}

func (m *NetworkProperties) GetInactiveRankDecreasePercent() uint64 {
	if m != nil {
		return m.InactiveRankDecreasePercent
	}
	return 0
}

func (m *NetworkProperties) GetMinValidators() uint64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

func (m *NetworkProperties) GetPoorNetworkMaxBankSend() uint64 {
	if m != nil {
		return m.PoorNetworkMaxBankSend
	}
	return 0
}

func (m *NetworkProperties) GetJailMaxTime() uint64 {
	if m != nil {
		return m.JailMaxTime
	}
	return 0
}

func (m *NetworkProperties) GetEnableTokenWhitelist() bool {
	if m != nil {
		return m.EnableTokenWhitelist
	}
	return false
}

func (m *NetworkProperties) GetEnableTokenBlacklist() bool {
	if m != nil {
		return m.EnableTokenBlacklist
	}
	return false
}

func (m *NetworkProperties) GetMinIdentityApprovalTip() uint64 {
	if m != nil {
		return m.MinIdentityApprovalTip
	}
	return 0
}

func (m *NetworkProperties) GetUniqueIdentityKeys() string {
	if m != nil {
		return m.UniqueIdentityKeys
	}
	return ""
}

func init() {
	proto.RegisterEnum("kira.gov.NetworkProperty", NetworkProperty_name, NetworkProperty_value)
	proto.RegisterType((*MsgSetNetworkProperties)(nil), "kira.gov.MsgSetNetworkProperties")
	proto.RegisterType((*NetworkPropertyValue)(nil), "kira.gov.NetworkPropertyValue")
	proto.RegisterType((*NetworkProperties)(nil), "kira.gov.NetworkProperties")
}

func init() {
	proto.RegisterFile("kira/gov/network_properties.proto", fileDescriptor_98011a6048e5dde3)
}

var fileDescriptor_98011a6048e5dde3 = []byte{
	// 1176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0x4d, 0x6e, 0xdb, 0x46,
	0x18, 0x8d, 0x12, 0x27, 0x96, 0xc7, 0x96, 0x4d, 0xd3, 0x8a, 0xcd, 0xd0, 0x69, 0xcc, 0xba, 0x08,
	0x10, 0x04, 0x88, 0xd5, 0x34, 0x4d, 0x81, 0x06, 0xe8, 0x82, 0x92, 0xc7, 0x0d, 0x23, 0xf1, 0x27,
	0x14, 0xad, 0x24, 0xdd, 0x0c, 0xc6, 0xd2, 0x44, 0x9e, 0x4a, 0xe4, 0x28, 0x24, 0xa5, 0xc8, 0x37,
	0x28, 0x78, 0x07, 0x02, 0x05, 0x7a, 0x85, 0xde, 0xa3, 0x8b, 0xee, 0xbb, 0xee, 0x19, 0xba, 0x2a,
	0x66, 0x48, 0xca, 0x96, 0x14, 0x7b, 0x25, 0xea, 0x7b, 0xef, 0x7d, 0x7f, 0x33, 0x8f, 0x20, 0xf8,
	0x7a, 0x40, 0x43, 0x5c, 0xeb, 0xb3, 0x49, 0x2d, 0x20, 0xf1, 0x67, 0x16, 0x0e, 0xd0, 0x28, 0x64,
	0x23, 0x12, 0xc6, 0x94, 0x44, 0x47, 0xa3, 0x90, 0xc5, 0x4c, 0x2e, 0x73, 0xca, 0x51, 0x9f, 0x4d,
	0xd4, 0x6a, 0x9f, 0xf5, 0x99, 0x08, 0xd6, 0xf8, 0x53, 0x86, 0x1f, 0xfe, 0x59, 0x02, 0x7b, 0x66,
	0xd4, 0x6f, 0x93, 0xd8, 0xca, 0x52, 0x38, 0xb3, 0x0c, 0xf2, 0x1b, 0x20, 0x2f, 0xe7, 0x55, 0x4a,
	0x5a, 0xe9, 0xc9, 0xfa, 0x77, 0xfb, 0x47, 0x45, 0xe2, 0xa3, 0x25, 0xa1, 0xbb, 0x1d, 0x2c, 0xe5,
	0x32, 0x41, 0x99, 0xe7, 0x60, 0x11, 0x09, 0x95, 0xdb, 0x5a, 0xe9, 0xc9, 0x46, 0xfd, 0xf9, 0x7f,
	0xff, 0x1c, 0x3c, 0xeb, 0xd3, 0xf8, 0x7c, 0x7c, 0x76, 0xd4, 0x65, 0x7e, 0xad, 0xcb, 0x22, 0x9f,
	0x45, 0xf9, 0xcf, 0xb3, 0xa8, 0x37, 0xa8, 0xc5, 0x17, 0x23, 0x12, 0x1d, 0xe9, 0xdd, 0xae, 0xde,
	0xeb, 0x85, 0x24, 0x8a, 0xdc, 0x59, 0x8a, 0x43, 0x1b, 0x54, 0xe7, 0xcb, 0x5e, 0x74, 0xf0, 0x70,
	0x4c, 0xe4, 0x2a, 0xb8, 0x3b, 0xe1, 0x0f, 0xa2, 0xcb, 0x15, 0x37, 0xfb, 0x23, 0xef, 0x83, 0xb5,
	0x28, 0x0e, 0x51, 0x86, 0xf0, 0xea, 0x6b, 0x6e, 0x39, 0x8a, 0x43, 0x21, 0x79, 0xb5, 0xf2, 0xef,
	0xef, 0x07, 0xa5, 0xc3, 0xbf, 0x56, 0xc1, 0xf6, 0xf2, 0x06, 0x1e, 0x02, 0xe0, 0xd3, 0x00, 0xc5,
	0x53, 0xf4, 0x91, 0x14, 0x39, 0xcb, 0x3e, 0x0d, 0xbc, 0xe9, 0x09, 0x21, 0x02, 0xc5, 0xd3, 0x02,
	0xbd, 0x9d, 0xa3, 0x78, 0x9a, 0xa1, 0x07, 0x60, 0x7d, 0xc2, 0x62, 0x82, 0x3e, 0x8d, 0x59, 0x38,
	0xf6, 0x95, 0x3b, 0x02, 0x06, 0x3c, 0xf4, 0x56, 0x44, 0xe4, 0xa7, 0x60, 0x3b, 0x9b, 0x07, 0x0f,
	0x11, 0x09, 0x7a, 0x28, 0xa6, 0x3e, 0x51, 0x56, 0x04, 0x6d, 0xab, 0x00, 0x60, 0xd0, 0xf3, 0xa8,
	0x4f, 0xe4, 0x1f, 0xc0, 0xde, 0x15, 0x2e, 0xee, 0xc6, 0x3e, 0x09, 0xe2, 0x4c, 0x71, 0x57, 0x28,
	0xee, 0x5f, 0x2a, 0x72, 0x54, 0xe8, 0x5e, 0x82, 0x3d, 0x3e, 0xc0, 0x5c, 0x9d, 0xb3, 0x21, 0xeb,
	0x0e, 0x22, 0xe5, 0x9e, 0xd0, 0x55, 0x7d, 0x1a, 0x38, 0x97, 0xc5, 0xea, 0x02, 0x93, 0x75, 0xf0,
	0xd5, 0x82, 0xac, 0x28, 0x99, 0x8b, 0x57, 0x85, 0x58, 0x9d, 0x13, 0xe7, 0x94, 0x3c, 0xc5, 0x4f,
	0x60, 0x9f, 0x04, 0xf8, 0x6c, 0x48, 0xd0, 0x47, 0x16, 0x12, 0xda, 0x0f, 0xf8, 0x92, 0xd0, 0x08,
	0x5f, 0x70, 0x4e, 0xa4, 0x94, 0xb5, 0xd2, 0x93, 0xb2, 0xab, 0x64, 0x94, 0x93, 0x8c, 0x71, 0x42,
	0x88, 0x93, 0xe3, 0x72, 0x03, 0x3c, 0xf2, 0x69, 0xd4, 0x3d, 0xc7, 0x41, 0x97, 0xa0, 0x10, 0x07,
	0x03, 0xd4, 0x23, 0xdd, 0x90, 0xe0, 0x88, 0x20, 0xec, 0xb3, 0x71, 0x10, 0x2b, 0x6b, 0xa2, 0x85,
	0xfd, 0x19, 0xcb, 0xc5, 0xc1, 0xe0, 0x38, 0xe7, 0xe8, 0x82, 0x22, 0x7f, 0x03, 0x2a, 0xfc, 0x80,
	0x66, 0x14, 0x05, 0x08, 0xcd, 0x86, 0x8f, 0xa7, 0x66, 0x11, 0x93, 0x9f, 0x83, 0xea, 0x65, 0xa5,
	0x2e, 0x0b, 0x3e, 0xd2, 0x1e, 0xe1, 0xdc, 0x75, 0xc1, 0xdd, 0x99, 0x61, 0x8d, 0x19, 0xc4, 0x9b,
	0xa3, 0x7c, 0x5c, 0x3a, 0x59, 0xec, 0x6d, 0x44, 0xc2, 0x2e, 0x09, 0x62, 0x65, 0x23, 0x6b, 0xae,
	0x60, 0x5d, 0xed, 0xcd, 0xc9, 0x28, 0xf2, 0x63, 0xb0, 0xc9, 0x77, 0x3c, 0xc1, 0x43, 0xda, 0xc3,
	0x31, 0x0b, 0x23, 0xa5, 0x22, 0x44, 0x15, 0x9f, 0x06, 0x9d, 0x59, 0x50, 0x7e, 0x05, 0xd4, 0x11,
	0x63, 0x21, 0x2a, 0x9c, 0xc8, 0x07, 0x3a, 0xe3, 0x35, 0x23, 0x12, 0xf4, 0x94, 0x4d, 0x21, 0xd9,
	0xe5, 0x8c, 0xfc, 0xf6, 0x9a, 0x78, 0x5a, 0xc7, 0xc1, 0xa0, 0x4d, 0x82, 0x9e, 0x7c, 0x08, 0x2a,
	0xbf, 0x62, 0x3a, 0x14, 0x1a, 0x71, 0x57, 0xb6, 0x04, 0x7d, 0x9d, 0x07, 0x4d, 0x3c, 0x15, 0x37,
	0xe4, 0x7b, 0xb0, 0x9b, 0x9f, 0x53, 0xcc, 0x06, 0x24, 0x40, 0x9f, 0xcf, 0x69, 0x4c, 0x86, 0x34,
	0x8a, 0x15, 0x49, 0x1c, 0x51, 0x35, 0x43, 0x3d, 0x0e, 0xbe, 0x2b, 0xb0, 0x25, 0xd5, 0xd9, 0x10,
	0x77, 0x07, 0x42, 0xb5, 0xbd, 0xa4, 0xaa, 0x17, 0x98, 0xfc, 0x23, 0x78, 0xc0, 0x47, 0xe6, 0x5b,
	0x8c, 0x69, 0x7c, 0x81, 0xf0, 0x68, 0x14, 0xb2, 0x09, 0x1e, 0xa2, 0x98, 0x8e, 0x14, 0x39, 0x1b,
	0xc5, 0xa7, 0x81, 0x91, 0xe3, 0x7a, 0x0e, 0x7b, 0x74, 0x24, 0x7f, 0x0b, 0xaa, 0xe3, 0x80, 0x7e,
	0x1a, 0x93, 0x4b, 0xf5, 0x80, 0x5c, 0x44, 0xca, 0x8e, 0x70, 0xb3, 0x9c, 0x61, 0x85, 0xb0, 0x49,
	0x2e, 0xa2, 0xa7, 0x7f, 0xaf, 0x82, 0xad, 0x85, 0x77, 0x04, 0x77, 0xac, 0x69, 0x58, 0xc8, 0x7b,
	0x8f, 0x4e, 0x20, 0x94, 0x6e, 0xa9, 0x1b, 0x49, 0xaa, 0x95, 0xcd, 0x2b, 0x7e, 0x36, 0xf5, 0xf7,
	0x05, 0x5a, 0xca, 0xd1, 0x2b, 0x7e, 0xee, 0xd8, 0x1e, 0x44, 0x6f, 0x4f, 0x6d, 0xf7, 0xd4, 0x94,
	0x6e, 0xab, 0x9b, 0x49, 0xaa, 0x81, 0xce, 0x9c, 0x9f, 0x1d, 0xd7, 0x76, 0xec, 0xb6, 0xde, 0x42,
	0xd0, 0x3a, 0x46, 0x9e, 0x61, 0x42, 0xe9, 0x8e, 0xba, 0x93, 0xa4, 0xda, 0x96, 0xb3, 0xec, 0xe7,
	0x2b, 0x5c, 0xbd, 0xe1, 0x99, 0xd0, 0xf2, 0x32, 0xc5, 0x8a, 0xfa, 0x20, 0x49, 0xb5, 0xfb, 0xce,
	0x75, 0x7e, 0xe6, 0x03, 0xcc, 0xd5, 0xa9, 0xb7, 0xec, 0x46, 0xb3, 0x2d, 0xdd, 0x55, 0x95, 0x24,
	0xd5, 0xaa, 0xe6, 0x35, 0x7e, 0x5e, 0x90, 0x15, 0x25, 0x73, 0xf1, 0x3d, 0xf5, 0x51, 0x92, 0x6a,
	0xaa, 0x79, 0xa3, 0x9f, 0xa1, 0xa5, 0xd7, 0x5b, 0x10, 0x9d, 0xd8, 0x2e, 0x34, 0x7e, 0xb6, 0xf8,
	0x92, 0x90, 0xa3, 0x7f, 0xe0, 0x69, 0xda, 0xd2, 0xaa, 0xfa, 0x30, 0x49, 0x35, 0x05, 0xde, 0xe0,
	0x67, 0xd3, 0x68, 0x37, 0x5e, 0xeb, 0x56, 0x03, 0x22, 0x57, 0xb7, 0x9a, 0xe8, 0x18, 0x36, 0x5c,
	0xa8, 0xb7, 0x21, 0xd2, 0x4d, 0xfb, 0xd4, 0xf2, 0xa4, 0xb2, 0x7a, 0x90, 0xa4, 0xda, 0xbe, 0x79,
	0xb3, 0x9f, 0xf9, 0x01, 0xcd, 0x12, 0x49, 0x6b, 0xaa, 0x94, 0xa4, 0xda, 0x86, 0xb9, 0xe0, 0xe7,
	0xcb, 0x4a, 0x0d, 0xdb, 0x3a, 0x31, 0x8e, 0x21, 0xe7, 0x02, 0x75, 0x2f, 0x49, 0xb5, 0x1d, 0xf3,
	0xcb, 0x7e, 0x36, 0xf8, 0x46, 0x8c, 0xce, 0x62, 0x6f, 0x0e, 0x74, 0x1b, 0xd0, 0xf2, 0xa4, 0xf5,
	0xac, 0x39, 0xe3, 0x06, 0x3f, 0xbf, 0x02, 0xaa, 0x63, 0xdb, 0x2e, 0xb2, 0xa0, 0xf7, 0xce, 0x76,
	0x9b, 0x88, 0x77, 0x5a, 0xe7, 0xc9, 0xda, 0xd0, 0x3a, 0x96, 0x36, 0x54, 0x35, 0x49, 0xb5, 0x5d,
	0xe7, 0xcb, 0x46, 0x7d, 0x0c, 0x36, 0xf9, 0xf9, 0x74, 0xf4, 0x96, 0x71, 0xac, 0x7b, 0xb6, 0xdb,
	0x96, 0x2a, 0xea, 0x76, 0x92, 0x6a, 0x15, 0x73, 0xee, 0x5d, 0x70, 0x08, 0x2a, 0x6f, 0x74, 0xa3,
	0x25, 0x52, 0x8b, 0xbb, 0xb2, 0xa9, 0x6e, 0x25, 0xa9, 0xb6, 0xfe, 0x66, 0xde, 0xcf, 0xf9, 0x39,
	0x79, 0x76, 0x13, 0x5a, 0xe8, 0xdd, 0x6b, 0xc3, 0x83, 0x2d, 0xa3, 0xed, 0x49, 0x5b, 0xd9, 0x05,
	0x81, 0xd7, 0xf8, 0x79, 0x4e, 0x55, 0x6f, 0xe9, 0x8d, 0xa6, 0x50, 0x49, 0x4b, 0xaa, 0x39, 0x3f,
	0xf3, 0xb6, 0xf9, 0x82, 0x3d, 0xc3, 0xfb, 0x80, 0x74, 0xc7, 0x71, 0xed, 0x8e, 0xde, 0x42, 0x9e,
	0xe1, 0x48, 0xdb, 0xd9, 0xc4, 0xe6, 0xb5, 0x7e, 0x3e, 0xb5, 0x8c, 0xb7, 0xa7, 0xf0, 0x52, 0xdd,
	0x84, 0x1f, 0xda, 0x92, 0xac, 0xee, 0x26, 0xa9, 0x26, 0x9f, 0x2e, 0xf9, 0x59, 0x5d, 0xf9, 0xed,
	0x8f, 0x47, 0xb7, 0xea, 0x2f, 0x7f, 0x79, 0x71, 0xe5, 0x9b, 0xa1, 0x49, 0x43, 0xdc, 0x60, 0x21,
	0xa9, 0x45, 0x64, 0x80, 0x69, 0xcd, 0xb0, 0x3c, 0xe8, 0xbe, 0xaf, 0x89, 0x2f, 0x9b, 0x67, 0x7d,
	0x12, 0xd4, 0x8a, 0xef, 0xa3, 0xb3, 0x7b, 0x22, 0xf6, 0xe2, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x4b, 0x67, 0xb4, 0xbc, 0x32, 0x09, 0x00, 0x00,
}
