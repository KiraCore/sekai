// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: kira/gov/permission.proto

package proto

import (
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PermValue int32

const (
	// PERMISSION_ZERO is a no-op permission.
	PermValue_PERMISSION_ZERO PermValue = 0
	// PERMISSION_SET_PERMISSIONS defines the permission that allows to Set Permissions to other actors.
	PermValue_PERMISSION_SET_PERMISSIONS PermValue = 1
	// PERMISSION_CLAIM_VALIDATOR defines the permission that allows to Claim a validator Seat.
	PermValue_PERMISSION_CLAIM_VALIDATOR PermValue = 2
	// PERMISSION_CLAIM_COUNCILOR defines the permission that allows to Claim a Councilor Seat.
	PermValue_PERMISSION_CLAIM_COUNCILOR PermValue = 3
	// PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL defines the permission needed to create proposals for setting permissions.
	PermValue_PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL PermValue = 4
	// PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL defines the permission that an actor must have in order to vote a
	// Proposal to set permissions.
	PermValue_PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL PermValue = 5
	//  PERMISSION_UPSERT_TOKEN_ALIAS
	PermValue_PERMISSION_UPSERT_TOKEN_ALIAS PermValue = 6
	// PERMISSION_CHANGE_TX_FEE
	PermValue_PERMISSION_CHANGE_TX_FEE PermValue = 7
	// PERMISSION_UPSERT_TOKEN_RATE
	PermValue_PERMISSION_UPSERT_TOKEN_RATE PermValue = 8
	// PERMISSION_UPSERT_ROLE makes possible to add, modify and assign roles.
	PermValue_PERMISSION_UPSERT_ROLE PermValue = 9
	// PERMISSION_CREATE_UPSERT_DATA_REGISTRY_PROPOSAL makes possible to create a proposal to change the Data Registry.
	PermValue_PERMISSION_CREATE_UPSERT_DATA_REGISTRY_PROPOSAL PermValue = 10
	// PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL makes possible to create a proposal to change the Data Registry.
	PermValue_PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL PermValue = 11
	// PERMISSION_CREATE_SET_NETWORK_PROPERTY_PROPOSAL defines the permission needed to create proposals for setting network property.
	PermValue_PERMISSION_CREATE_SET_NETWORK_PROPERTY_PROPOSAL PermValue = 12
	// PERMISSION_VOTE_SET_NETWORK_PROPERTY_PROPOSAL defines the permission that an actor must have in order to vote a
	// Proposal to set network property.
	PermValue_PERMISSION_VOTE_SET_NETWORK_PROPERTY_PROPOSAL PermValue = 13
	// PERMISSION_CREATE_UPSERT_TOKEN_ALIAS_PROPOSAL defines the permission needed to create proposals for upsert token Alias.
	PermValue_PERMISSION_CREATE_UPSERT_TOKEN_ALIAS_PROPOSAL PermValue = 14
	// PERMISSION_VOTE_UPSERT_TOKEN_ALIAS_PROPOSAL defines the permission needed to vote proposals for upsert token.
	PermValue_PERMISSION_VOTE_UPSERT_TOKEN_ALIAS_PROPOSAL PermValue = 15
	// PERMISSION_CREATE_SET_POOR_NETWORK_MESSAGES defines the permission needed to create proposals for setting poor network messages
	PermValue_PERMISSION_CREATE_SET_POOR_NETWORK_MESSAGES PermValue = 16
	// PERMISSION_VOTE_SET_POOR_NETWORK_MESSAGES_PROPOSAL defines the permission needed to vote proposals to set poor network messages
	PermValue_PERMISSION_VOTE_SET_POOR_NETWORK_MESSAGES_PROPOSAL PermValue = 17
	// PERMISSION_CREATE_UPSERT_TOKEN_RATE_PROPOSAL defines the permission needed to create proposals for upsert token rate.
	PermValue_PERMISSION_CREATE_UPSERT_TOKEN_RATE_PROPOSAL PermValue = 18
	// PERMISSION_VOTE_UPSERT_TOKEN_RATE_PROPOSAL defines the permission needed to vote proposals for upsert token rate.
	PermValue_PERMISSION_VOTE_UPSERT_TOKEN_RATE_PROPOSAL PermValue = 19
	// PERMISSION_CREATE_UNJAIL_VALIDATOR_PROPOSAL defines the permission needed to create a proposal to unjail a validator.
	PermValue_PERMISSION_CREATE_UNJAIL_VALIDATOR_PROPOSAL PermValue = 20
	// PERMISSION_VOTE_UNJAIL_VALIDATOR_PROPOSAL defines the permission needed to vote a proposal to unjail a validator.
	PermValue_PERMISSION_VOTE_UNJAIL_VALIDATOR_PROPOSAL PermValue = 21
	// PERMISSION_CREATE_CREATE_ROLE_PROPOSAL defines the permission needed to create a proposal to create a role.
	PermValue_PERMISSION_CREATE_CREATE_ROLE_PROPOSAL PermValue = 22
	// PERMISSION_VOTE_CREATE_ROLE_PROPOSAL defines the permission needed to vote a proposal to create a role.
	PermValue_PERMISSION_VOTE_CREATE_ROLE_PROPOSAL PermValue = 23
	// PERMISSION_CREATE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL defines the permission needed to create a proposal to blacklist/whitelisted tokens
	PermValue_PERMISSION_CREATE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL PermValue = 24
	// PERMISSION_VOTE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL defines the permission needed to vote on blacklist/whitelisted tokens proposal
	PermValue_PERMISSION_VOTE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL PermValue = 25
)

// Enum value maps for PermValue.
var (
	PermValue_name = map[int32]string{
		0:  "PERMISSION_ZERO",
		1:  "PERMISSION_SET_PERMISSIONS",
		2:  "PERMISSION_CLAIM_VALIDATOR",
		3:  "PERMISSION_CLAIM_COUNCILOR",
		4:  "PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL",
		5:  "PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL",
		6:  "PERMISSION_UPSERT_TOKEN_ALIAS",
		7:  "PERMISSION_CHANGE_TX_FEE",
		8:  "PERMISSION_UPSERT_TOKEN_RATE",
		9:  "PERMISSION_UPSERT_ROLE",
		10: "PERMISSION_CREATE_UPSERT_DATA_REGISTRY_PROPOSAL",
		11: "PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL",
		12: "PERMISSION_CREATE_SET_NETWORK_PROPERTY_PROPOSAL",
		13: "PERMISSION_VOTE_SET_NETWORK_PROPERTY_PROPOSAL",
		14: "PERMISSION_CREATE_UPSERT_TOKEN_ALIAS_PROPOSAL",
		15: "PERMISSION_VOTE_UPSERT_TOKEN_ALIAS_PROPOSAL",
		16: "PERMISSION_CREATE_SET_POOR_NETWORK_MESSAGES",
		17: "PERMISSION_VOTE_SET_POOR_NETWORK_MESSAGES_PROPOSAL",
		18: "PERMISSION_CREATE_UPSERT_TOKEN_RATE_PROPOSAL",
		19: "PERMISSION_VOTE_UPSERT_TOKEN_RATE_PROPOSAL",
		20: "PERMISSION_CREATE_UNJAIL_VALIDATOR_PROPOSAL",
		21: "PERMISSION_VOTE_UNJAIL_VALIDATOR_PROPOSAL",
		22: "PERMISSION_CREATE_CREATE_ROLE_PROPOSAL",
		23: "PERMISSION_VOTE_CREATE_ROLE_PROPOSAL",
		24: "PERMISSION_CREATE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL",
		25: "PERMISSION_VOTE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL",
	}
	PermValue_value = map[string]int32{
		"PERMISSION_ZERO":                                      0,
		"PERMISSION_SET_PERMISSIONS":                           1,
		"PERMISSION_CLAIM_VALIDATOR":                           2,
		"PERMISSION_CLAIM_COUNCILOR":                           3,
		"PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL":           4,
		"PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL":             5,
		"PERMISSION_UPSERT_TOKEN_ALIAS":                        6,
		"PERMISSION_CHANGE_TX_FEE":                             7,
		"PERMISSION_UPSERT_TOKEN_RATE":                         8,
		"PERMISSION_UPSERT_ROLE":                               9,
		"PERMISSION_CREATE_UPSERT_DATA_REGISTRY_PROPOSAL":      10,
		"PERMISSION_VOTE_UPSERT_DATA_REGISTRY_PROPOSAL":        11,
		"PERMISSION_CREATE_SET_NETWORK_PROPERTY_PROPOSAL":      12,
		"PERMISSION_VOTE_SET_NETWORK_PROPERTY_PROPOSAL":        13,
		"PERMISSION_CREATE_UPSERT_TOKEN_ALIAS_PROPOSAL":        14,
		"PERMISSION_VOTE_UPSERT_TOKEN_ALIAS_PROPOSAL":          15,
		"PERMISSION_CREATE_SET_POOR_NETWORK_MESSAGES":          16,
		"PERMISSION_VOTE_SET_POOR_NETWORK_MESSAGES_PROPOSAL":   17,
		"PERMISSION_CREATE_UPSERT_TOKEN_RATE_PROPOSAL":         18,
		"PERMISSION_VOTE_UPSERT_TOKEN_RATE_PROPOSAL":           19,
		"PERMISSION_CREATE_UNJAIL_VALIDATOR_PROPOSAL":          20,
		"PERMISSION_VOTE_UNJAIL_VALIDATOR_PROPOSAL":            21,
		"PERMISSION_CREATE_CREATE_ROLE_PROPOSAL":               22,
		"PERMISSION_VOTE_CREATE_ROLE_PROPOSAL":                 23,
		"PERMISSION_CREATE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL": 24,
		"PERMISSION_VOTE_TOKENS_WHITE_BLACK_CHANGE_PROPOSAL":   25,
	}
)

func (x PermValue) Enum() *PermValue {
	p := new(PermValue)
	*p = x
	return p
}

func (x PermValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PermValue) Descriptor() protoreflect.EnumDescriptor {
	return file_kira_gov_permission_proto_enumTypes[0].Descriptor()
}

func (PermValue) Type() protoreflect.EnumType {
	return &file_kira_gov_permission_proto_enumTypes[0]
}

func (x PermValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PermValue.Descriptor instead.
func (PermValue) EnumDescriptor() ([]byte, []int) {
	return file_kira_gov_permission_proto_rawDescGZIP(), []int{0}
}

var File_kira_gov_permission_proto protoreflect.FileDescriptor

var file_kira_gov_permission_proto_rawDesc = []byte{
	0x0a, 0x19, 0x6b, 0x69, 0x72, 0x61, 0x2f, 0x67, 0x6f, 0x76, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x72,
	0x61, 0x2e, 0x67, 0x6f, 0x76, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2a, 0xff, 0x0f, 0x0a, 0x09,
	0x50, 0x65, 0x72, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0f, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x1a, 0x0c,
	0x8a, 0x9d, 0x20, 0x08, 0x50, 0x65, 0x72, 0x6d, 0x5a, 0x65, 0x72, 0x6f, 0x12, 0x36, 0x0a, 0x1a,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x1a, 0x16, 0x8a, 0x9d,
	0x20, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x1a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x02, 0x1a, 0x16, 0x8a, 0x9d, 0x20, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x1a,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x43, 0x49, 0x4c, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x16, 0x8a, 0x9d,
	0x20, 0x12, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x2a, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x10, 0x04, 0x1a, 0x24, 0x8a, 0x9d, 0x20, 0x20, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x28, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x21, 0x8a, 0x9d, 0x20, 0x1d, 0x50, 0x65,
	0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x1d, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x06, 0x1a, 0x18,
	0x8a, 0x9d, 0x20, 0x14, 0x50, 0x65, 0x72, 0x6d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x18, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x58,
	0x5f, 0x46, 0x45, 0x45, 0x10, 0x07, 0x1a, 0x13, 0x8a, 0x9d, 0x20, 0x0f, 0x50, 0x65, 0x72, 0x6d,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x78, 0x46, 0x65, 0x65, 0x12, 0x39, 0x0a, 0x1c, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x08, 0x1a, 0x17, 0x8a,
	0x9d, 0x20, 0x13, 0x50, 0x65, 0x72, 0x6d, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x16, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x10, 0x09, 0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x5d, 0x0a, 0x2f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45,
	0x52, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0a, 0x1a, 0x28, 0x8a, 0x9d, 0x20,
	0x24, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x2d, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0b, 0x1a, 0x26, 0x8a, 0x9d, 0x20, 0x22, 0x50, 0x65,
	0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x12, 0x5d, 0x0a, 0x2f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x10, 0x0c, 0x1a, 0x28, 0x8a, 0x9d, 0x20, 0x24, 0x50, 0x65, 0x72, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x59, 0x0a, 0x2d, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c,
	0x10, 0x0d, 0x1a, 0x26, 0x8a, 0x9d, 0x20, 0x22, 0x50, 0x65, 0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x59, 0x0a, 0x2d, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x49,
	0x41, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0e, 0x1a, 0x26, 0x8a,
	0x9d, 0x20, 0x22, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x55, 0x0a, 0x2b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f,
	0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x4f, 0x53, 0x41, 0x4c, 0x10, 0x0f, 0x1a, 0x24, 0x8a, 0x9d, 0x20, 0x20, 0x50, 0x65, 0x72, 0x6d,
	0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x5d, 0x0a, 0x2b,
	0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x10, 0x10, 0x1a, 0x2c, 0x8a,
	0x9d, 0x20, 0x28, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x32, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x10, 0x11, 0x1a, 0x2a, 0x8a, 0x9d, 0x20, 0x26, 0x50, 0x65, 0x72, 0x6d, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x50, 0x6f, 0x6f, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12,
	0x57, 0x0a, 0x2c, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10,
	0x12, 0x1a, 0x25, 0x8a, 0x9d, 0x20, 0x21, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x2a, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x53, 0x45,
	0x52, 0x54, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x13, 0x1a, 0x23, 0x8a, 0x9d, 0x20, 0x1f, 0x50, 0x65,
	0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x56, 0x0a,
	0x2b, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4a, 0x41, 0x49, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41,
	0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x14, 0x1a, 0x25,
	0x8a, 0x9d, 0x20, 0x21, 0x50, 0x65, 0x72, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x6a, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x29, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4a, 0x41, 0x49, 0x4c, 0x5f,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53,
	0x41, 0x4c, 0x10, 0x15, 0x1a, 0x23, 0x8a, 0x9d, 0x20, 0x1f, 0x50, 0x65, 0x72, 0x6d, 0x56, 0x6f,
	0x74, 0x65, 0x55, 0x6e, 0x6a, 0x61, 0x69, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x26, 0x50, 0x45, 0x52,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x10, 0x16, 0x1a, 0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x50, 0x65, 0x72, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x48, 0x0a, 0x24, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x17, 0x1a, 0x1e, 0x8a, 0x9d, 0x20,
	0x1a, 0x50, 0x65, 0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x66, 0x0a, 0x34, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x10, 0x18, 0x1a, 0x2c, 0x8a, 0x9d, 0x20, 0x28, 0x50, 0x65, 0x72, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57, 0x68, 0x69, 0x74, 0x65,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x32, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x56, 0x4f, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x53, 0x5f, 0x57, 0x48,
	0x49, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41, 0x4c, 0x10, 0x19, 0x1a, 0x2a, 0x8a, 0x9d, 0x20,
	0x26, 0x50, 0x65, 0x72, 0x6d, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x57,
	0x68, 0x69, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x28, 0x5a,
	0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4b, 0x69, 0x72, 0x61,
	0x43, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x6b, 0x61, 0x69, 0x2f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x58, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kira_gov_permission_proto_rawDescOnce sync.Once
	file_kira_gov_permission_proto_rawDescData = file_kira_gov_permission_proto_rawDesc
)

func file_kira_gov_permission_proto_rawDescGZIP() []byte {
	file_kira_gov_permission_proto_rawDescOnce.Do(func() {
		file_kira_gov_permission_proto_rawDescData = protoimpl.X.CompressGZIP(file_kira_gov_permission_proto_rawDescData)
	})
	return file_kira_gov_permission_proto_rawDescData
}

var file_kira_gov_permission_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_kira_gov_permission_proto_goTypes = []interface{}{
	(PermValue)(0), // 0: kira.gov.PermValue
}
var file_kira_gov_permission_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_kira_gov_permission_proto_init() }
func file_kira_gov_permission_proto_init() {
	if File_kira_gov_permission_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kira_gov_permission_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kira_gov_permission_proto_goTypes,
		DependencyIndexes: file_kira_gov_permission_proto_depIdxs,
		EnumInfos:         file_kira_gov_permission_proto_enumTypes,
	}.Build()
	File_kira_gov_permission_proto = out.File
	file_kira_gov_permission_proto_rawDesc = nil
	file_kira_gov_permission_proto_goTypes = nil
	file_kira_gov_permission_proto_depIdxs = nil
}
