syntax="proto3";

package kira.gov;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "kira/gov/data_registry.proto";
import "kira/gov/proposal.proto";
import "kira/gov/identity_registrar.proto";
import "kira/gov/actor.proto";
import "kira/gov/network_properties.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/KiraCore/sekai/INTERX/proto-gen/kira/gov";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/KiraCore/sekai/INTERX";
    description: "gRPC-gateway";
  }
  schemes: HTTP;
};

service Query {
  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/api/kira/gov/proposals/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Proposal"
      description: "Query Proposal."
      tags: "query"
    };
  }
  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/api/kira/gov/proposals";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Proposals"
      description: "Query Proposals."
      tags: "query"
    };
  }
  // Query all data reference keys with pagination.
  rpc AllDataReferenceKeys(QueryDataReferenceKeysRequest) returns (QueryDataReferenceKeysResponse) {
    option (google.api.http).get = "/api/kira/gov/data_keys";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query All Data Reference Keys"
      description: "Query Data Reference Keys."
      tags: "query"
    };
  }
  // Query data reference by key.
  rpc DataReferenceByKey(QueryDataReferenceRequest) returns (QueryDataReferenceResponse) {
    option (google.api.http).get = "/api/kira/gov/data/{key}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Data Refernce"
      description: "Query Data Reference."
      tags: "query"
    };
  }
  // WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
  rpc WhitelistedProposalVoters(QueryWhitelistedProposalVotersRequest) returns (QueryWhitelistedProposalVotersResponse) {
    option (google.api.http).get = "/api/kira/gov/voters/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query whitelisted proposal voters by a given proposal_id"
      description: "Query whitelisted proposal voters by a given proposal_id."
      tags: "query"
    };
  }
  // Votes queries votes of a given proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/api/kira/gov/votes/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query proposal votes by a given proposal_id"
      description: "Query proposal votes by a given proposal_id."
      tags: "query"
    };
  }
  // NetworkProperties returns network properties
  rpc NetworkProperties (NetworkPropertiesRequest) returns (NetworkPropertiesResponse) {
    option (google.api.http).get = "/api/kira/gov/network_properties";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query network properties"
      description: "Query network properties."
      tags: "query"
    };
  }

  // Query identity record by id
  rpc IdentityRecord(QueryIdentityRecordRequest) returns (QueryIdentityRecordResponse) {
    option (google.api.http).get = "/api/kira/gov/identity_record/{id}";
  }
  // Query identity records by records creator
  rpc IdentityRecordsByAddress(QueryIdentityRecordsByAddressRequest) returns (QueryIdentityRecordsByAddressResponse) {
    option (google.api.http).get = "/api/kira/gov/identity_records/{creator}";
  }
  // Query all identity records
  rpc AllIdentityRecords(QueryAllIdentityRecordsRequest) returns (QueryAllIdentityRecordsResponse) {
    option (google.api.http).get = "/api/kira/gov/all_identity_records";
  }
  // Query identity record verify request by id
  rpc IdentityRecordVerifyRequest(QueryIdentityVerifyRecordRequest) returns (QueryIdentityVerifyRecordResponse) {
    option (google.api.http).get = "/api/kira/gov/identity_verify_record/{request_id}";
  }
  // Query identity records verify requests by requester
  rpc IdentityRecordVerifyRequestsByRequester(QueryIdentityRecordVerifyRequestsByRequester) returns (QueryIdentityRecordVerifyRequestsByRequesterResponse) {
    option (google.api.http).get = "/api/kira/gov/identity_verify_requests_by_requester/{requester}";
  }
  // Query identity records verify requests by approver
  rpc IdentityRecordVerifyRequestsByApprover(QueryIdentityRecordVerifyRequestsByApprover) returns (QueryIdentityRecordVerifyRequestsByApproverResponse) {
    option (google.api.http).get = "/api/kira/gov/identity_verify_requests_by_approver/{approver}";
  }
  // Query all identity records verify requests
  rpc AllIdentityRecordVerifyRequests(QueryAllIdentityRecordVerifyRequests) returns (QueryAllIdentityRecordVerifyRequestsResponse) {
    option (google.api.http).get = "/api/kira/gov/all_identity_verify_requests";
  }
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // voter defines the voter address for the proposals.
  string voter = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
  bool all = 3;
  bool reverse = 4;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  repeated Proposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDataReferenceKeysRequest is the response type for data reference keys query.
message QueryDataReferenceKeysRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
message QueryDataReferenceKeysResponse {
  repeated string keys = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryDataReferenceRequest is the response type for data reference query.
message QueryDataReferenceRequest {
  string key = 1;
}

// QueryDataReferenceResponse is the response type for data referencequery.
message QueryDataReferenceResponse {
  DataRegistryEntry data = 1;
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersResponse {
  repeated NetworkActor voters = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
message QueryVotesRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
message QueryVotesResponse {
  // votes defined the queried votes.
  repeated Vote votes = 1 [(gogoproto.nullable) = false];
}

// NetworkPropertiesRequest is the request type for the NetworkProperties Query
message NetworkPropertiesRequest {}

// NetworkPropertiesResponse is the response type for the NetworkProperties Query
message NetworkPropertiesResponse {
  NetworkProperties properties = 1;
}


message QueryIdentityRecordRequest {
  uint64 id = 1;
}
message QueryIdentityRecordResponse {
  IdentityRecord record = 1;
}

message QueryIdentityRecordsByAddressRequest {
  bytes creator = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"creator\""
  ];
  repeated string keys = 2;
}
message QueryIdentityRecordsByAddressResponse {
  repeated IdentityRecord records = 1 [(gogoproto.nullable) = false];
}

message QueryAllIdentityRecordsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordsResponse {
  repeated IdentityRecord records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityVerifyRecordRequest {
  uint64 request_id = 1;
}
message QueryIdentityVerifyRecordResponse {
  IdentityRecordsVerify verify_record = 1;
}

message QueryIdentityRecordVerifyRequestsByApprover {
  bytes approver = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"approver\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByApproverResponse {
  repeated IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryIdentityRecordVerifyRequestsByRequester {
  bytes requester = 1 [
    (gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types.AccAddress",
    (gogoproto.moretags) = "yaml:\"requester\""
  ];
  cosmos.base.query.v1beta1.PageRequest pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryIdentityRecordVerifyRequestsByRequesterResponse {
  repeated IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}

message QueryAllIdentityRecordVerifyRequests {
  cosmos.base.query.v1beta1.PageRequest pagination = 1 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageRequest"];
}
message QueryAllIdentityRecordVerifyRequestsResponse {
  repeated IdentityRecordsVerify verify_records = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2 [(gogoproto.casttype) = "github.com/cosmos/cosmos-sdk/types/query.PageResponse"];
}
