syntax="proto3";

package kira.gov;

import "google/api/annotations.proto";
import "gogoproto/gogo.proto";
import "kira/gov/data_registry.proto";
import "kira/gov/pagination.proto";
import "kira/gov/proposal.proto";
import "kira/gov/actor.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "kira/gov/network_properties.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/KiraCore/sekai/INTERX/proto";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/KiraCore/sekai/INTERX";
    description: "gRPC-gateway";
  }
  schemes: HTTP;
};

service Query {
  // Proposal queries proposal details based on ProposalID.
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/api/kira/gov/proposals/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Proposal"
      description: "Query Proposal."
      tags: "query"
    };
  }
  // Proposals queries all proposals based on given status.
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/api/kira/gov/proposals";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Proposals"
      description: "Query Proposals."
      tags: "query"
    };
  }
  // Query all data reference keys with pagination.
  rpc GetAllDataReferenceKeys(QueryDataReferenceKeysRequest) returns (QueryDataReferenceKeysResponse) {
    option (google.api.http).get = "/api/kira/gov/data_keys";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query All Data Reference Keys"
      description: "Query Data Reference Keys."
      tags: "query"
    };
  }
  // Query data reference by key.
  rpc GetDataReferenceByKey(QueryDataReferenceRequest) returns (QueryDataReferenceResponse) {
    option (google.api.http).get = "/api/kira/gov/data/{key}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query Data Refernce"
      description: "Query Data Reference."
      tags: "query"
    };
  }
  // GetWhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
  rpc GetWhitelistedProposalVoters(QueryWhitelistedProposalVotersRequest) returns (QueryWhitelistedProposalVotersResponse) {
    option (google.api.http).get = "/api/kira/gov/voters/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query whitelisted proposal voters by a given proposal_id"
      description: "Query whitelisted proposal voters by a given proposal_id."
      tags: "query"
    };
  }
  // Votes queries votes of a given proposal.
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/api/kira/gov/votes/{proposal_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query proposal votes by a given proposal_id"
      description: "Query proposal votes by a given proposal_id."
      tags: "query"
    };
  }
  // GetNetworkProperties returns network properties
  rpc GetNetworkProperties (NetworkPropertiesRequest) returns (NetworkPropertiesResponse) {
    option (google.api.http).get = "/api/kira/gov/network_properties";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Query network properties"
      description: "Query network properties."
      tags: "query"
    };
  }
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
message QueryProposalRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
message QueryProposalResponse {
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
message QueryProposalsRequest {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;

  // voter defines the voter address for the proposals.
  string voter = 1;
  PageRequest pagination = 2;
  bool all = 3;
  bool reverse = 4;
}

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
message QueryProposalsResponse {
  repeated Proposal proposals = 1 [(gogoproto.nullable) = false];
  PageResponse pagination = 2;
}

// QueryDataReferenceKeysRequest is the response type for data reference keys query.
message QueryDataReferenceKeysRequest {
  PageRequest pagination = 1;
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
message QueryDataReferenceKeysResponse {
  repeated string keys = 1;
  PageResponse pagination = 2;
}

// QueryDataReferenceRequest is the response type for data reference query.
message QueryDataReferenceRequest {
  string key = 1;
}

// QueryDataReferenceResponse is the response type for data referencequery.
message QueryDataReferenceResponse {
  DataRegistryEntry data = 1;
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
message QueryWhitelistedProposalVotersResponse {
  repeated NetworkActor voters = 1 [(gogoproto.nullable) = false];
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
message QueryVotesRequest {
  // proposal_id defines the unique id of the proposal.
  uint64 proposal_id = 1;
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
message QueryVotesResponse {
  // votes defined the queried votes.
  repeated Vote votes = 1 [(gogoproto.nullable) = false];
}

// NetworkPropertiesRequest is the request type for the NetworkProperties Query
message NetworkPropertiesRequest {}

// NetworkPropertiesResponse is the response type for the NetworkProperties Query
message NetworkPropertiesResponse {
  NetworkProperties properties = 1;
}
