syntax="proto3";

package query;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "interx/type.proto";

// Defines the import path that should be used to import the generated package,
// and the package name.
option go_package = "github.com/KiraCore/sekai/INTERX/proto";

// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/KiraCore/sekai/INTERX";
    description: "gRPC-gateway";
  }
  schemes: HTTP;
};

service Query {
  rpc RPCMethods(RPCMethodsRequest) returns (RPCMethodsResponse) {
    option (google.api.http) = {
      get: "/api/rpc_methods"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "RPC Methods"
      description: "Query the list of available RPC methods."
      tags: "query"
    };
  }
}

message Endpoint {
  string url = 1;
  string method = 2;
}

message RPCMethod {
  Endpoint api = 1;
  bool enabled = 2;
  double rate_limit = 3;
  double auth_rate_limit = 4;
}

// RPCMethodsRequest is the request type for the query RPC methods.
message RPCMethodsRequest {}
  
// RPCMethodsResponse is the response type for the query RPC methods.
message RPCMethodsResponse {
  string chain_id = 1;
  uint64 block = 2;
  string block_time = 3;
  uint64 timestamp = 4;
  map<string, RPCMethod> response = 5;
  interx.Error error = 6;
  string signature = 7;
  string hash = 8;
}
