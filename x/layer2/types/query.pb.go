// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/layer2/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryExecutionRegistrarRequest struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *QueryExecutionRegistrarRequest) Reset()         { *m = QueryExecutionRegistrarRequest{} }
func (m *QueryExecutionRegistrarRequest) String() string { return proto.CompactTextString(m) }
func (*QueryExecutionRegistrarRequest) ProtoMessage()    {}
func (*QueryExecutionRegistrarRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{0}
}
func (m *QueryExecutionRegistrarRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionRegistrarRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionRegistrarRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutionRegistrarRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionRegistrarRequest.Merge(m, src)
}
func (m *QueryExecutionRegistrarRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionRegistrarRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionRegistrarRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionRegistrarRequest proto.InternalMessageInfo

func (m *QueryExecutionRegistrarRequest) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

type QueryExecutionRegistrarResponse struct {
	Dapp               *Dapp               `protobuf:"bytes,1,opt,name=dapp,proto3" json:"dapp,omitempty"`
	ExecutionRegistrar *ExecutionRegistrar `protobuf:"bytes,2,opt,name=execution_registrar,json=executionRegistrar,proto3" json:"execution_registrar,omitempty"`
}

func (m *QueryExecutionRegistrarResponse) Reset()         { *m = QueryExecutionRegistrarResponse{} }
func (m *QueryExecutionRegistrarResponse) String() string { return proto.CompactTextString(m) }
func (*QueryExecutionRegistrarResponse) ProtoMessage()    {}
func (*QueryExecutionRegistrarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{1}
}
func (m *QueryExecutionRegistrarResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryExecutionRegistrarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryExecutionRegistrarResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryExecutionRegistrarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryExecutionRegistrarResponse.Merge(m, src)
}
func (m *QueryExecutionRegistrarResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryExecutionRegistrarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryExecutionRegistrarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryExecutionRegistrarResponse proto.InternalMessageInfo

func (m *QueryExecutionRegistrarResponse) GetDapp() *Dapp {
	if m != nil {
		return m.Dapp
	}
	return nil
}

func (m *QueryExecutionRegistrarResponse) GetExecutionRegistrar() *ExecutionRegistrar {
	if m != nil {
		return m.ExecutionRegistrar
	}
	return nil
}

type QueryAllDappsRequest struct {
}

func (m *QueryAllDappsRequest) Reset()         { *m = QueryAllDappsRequest{} }
func (m *QueryAllDappsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDappsRequest) ProtoMessage()    {}
func (*QueryAllDappsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{2}
}
func (m *QueryAllDappsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDappsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDappsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDappsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDappsRequest.Merge(m, src)
}
func (m *QueryAllDappsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDappsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDappsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDappsRequest proto.InternalMessageInfo

type QueryAllDappsResponse struct {
	Dapps []Dapp `protobuf:"bytes,1,rep,name=dapps,proto3" json:"dapps"`
}

func (m *QueryAllDappsResponse) Reset()         { *m = QueryAllDappsResponse{} }
func (m *QueryAllDappsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDappsResponse) ProtoMessage()    {}
func (*QueryAllDappsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{3}
}
func (m *QueryAllDappsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDappsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDappsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDappsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDappsResponse.Merge(m, src)
}
func (m *QueryAllDappsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDappsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDappsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDappsResponse proto.InternalMessageInfo

func (m *QueryAllDappsResponse) GetDapps() []Dapp {
	if m != nil {
		return m.Dapps
	}
	return nil
}

type QueryTransferDappsRequest struct {
}

func (m *QueryTransferDappsRequest) Reset()         { *m = QueryTransferDappsRequest{} }
func (m *QueryTransferDappsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTransferDappsRequest) ProtoMessage()    {}
func (*QueryTransferDappsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{4}
}
func (m *QueryTransferDappsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferDappsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferDappsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferDappsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferDappsRequest.Merge(m, src)
}
func (m *QueryTransferDappsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferDappsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferDappsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferDappsRequest proto.InternalMessageInfo

type QueryTransferDappsResponse struct {
	XAMs []XAM `protobuf:"bytes,1,rep,name=XAMs,proto3" json:"XAMs"`
}

func (m *QueryTransferDappsResponse) Reset()         { *m = QueryTransferDappsResponse{} }
func (m *QueryTransferDappsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTransferDappsResponse) ProtoMessage()    {}
func (*QueryTransferDappsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{5}
}
func (m *QueryTransferDappsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTransferDappsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTransferDappsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTransferDappsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTransferDappsResponse.Merge(m, src)
}
func (m *QueryTransferDappsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTransferDappsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTransferDappsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTransferDappsResponse proto.InternalMessageInfo

func (m *QueryTransferDappsResponse) GetXAMs() []XAM {
	if m != nil {
		return m.XAMs
	}
	return nil
}

type QueryGlobalTokensRequest struct {
}

func (m *QueryGlobalTokensRequest) Reset()         { *m = QueryGlobalTokensRequest{} }
func (m *QueryGlobalTokensRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGlobalTokensRequest) ProtoMessage()    {}
func (*QueryGlobalTokensRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{6}
}
func (m *QueryGlobalTokensRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGlobalTokensRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGlobalTokensRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGlobalTokensRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGlobalTokensRequest.Merge(m, src)
}
func (m *QueryGlobalTokensRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGlobalTokensRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGlobalTokensRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGlobalTokensRequest proto.InternalMessageInfo

type QueryGlobalTokensResponse struct {
	Tokens []TokenInfo `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens"`
}

func (m *QueryGlobalTokensResponse) Reset()         { *m = QueryGlobalTokensResponse{} }
func (m *QueryGlobalTokensResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGlobalTokensResponse) ProtoMessage()    {}
func (*QueryGlobalTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9c14366296fd7f4, []int{7}
}
func (m *QueryGlobalTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGlobalTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGlobalTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGlobalTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGlobalTokensResponse.Merge(m, src)
}
func (m *QueryGlobalTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGlobalTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGlobalTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGlobalTokensResponse proto.InternalMessageInfo

func (m *QueryGlobalTokensResponse) GetTokens() []TokenInfo {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryExecutionRegistrarRequest)(nil), "kira.layer2.QueryExecutionRegistrarRequest")
	proto.RegisterType((*QueryExecutionRegistrarResponse)(nil), "kira.layer2.QueryExecutionRegistrarResponse")
	proto.RegisterType((*QueryAllDappsRequest)(nil), "kira.layer2.QueryAllDappsRequest")
	proto.RegisterType((*QueryAllDappsResponse)(nil), "kira.layer2.QueryAllDappsResponse")
	proto.RegisterType((*QueryTransferDappsRequest)(nil), "kira.layer2.QueryTransferDappsRequest")
	proto.RegisterType((*QueryTransferDappsResponse)(nil), "kira.layer2.QueryTransferDappsResponse")
	proto.RegisterType((*QueryGlobalTokensRequest)(nil), "kira.layer2.QueryGlobalTokensRequest")
	proto.RegisterType((*QueryGlobalTokensResponse)(nil), "kira.layer2.QueryGlobalTokensResponse")
}

func init() { proto.RegisterFile("kira/layer2/query.proto", fileDescriptor_b9c14366296fd7f4) }

var fileDescriptor_b9c14366296fd7f4 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x4f, 0x6f, 0xd3, 0x30,
	0x1c, 0x6d, 0x46, 0x37, 0x81, 0x07, 0x12, 0x98, 0x51, 0xb2, 0x30, 0xa5, 0x23, 0xd2, 0xc6, 0x34,
	0x58, 0xad, 0x15, 0xb8, 0xd3, 0xf2, 0x5f, 0x68, 0x12, 0xab, 0x76, 0x98, 0xb8, 0x54, 0x4e, 0xe7,
	0x06, 0xab, 0xa9, 0x9d, 0xda, 0x2e, 0x5a, 0x85, 0x38, 0x80, 0xf8, 0x00, 0x48, 0xdc, 0xf8, 0x00,
	0x1c, 0xf9, 0x1c, 0x3b, 0x4e, 0xe2, 0xc2, 0x09, 0xa1, 0x96, 0x0f, 0x82, 0xe2, 0xb8, 0x23, 0x59,
	0x42, 0xc7, 0xa9, 0xee, 0xef, 0xbd, 0xdf, 0x7b, 0xcf, 0xfe, 0xfd, 0x14, 0x70, 0xbd, 0x47, 0x05,
	0x46, 0x21, 0x1e, 0x11, 0x51, 0x47, 0x83, 0x21, 0x11, 0xa3, 0x5a, 0x24, 0xb8, 0xe2, 0x70, 0x31,
	0x06, 0x6a, 0x09, 0xe0, 0x6c, 0x76, 0xb8, 0xec, 0x73, 0x89, 0x7c, 0x2c, 0x49, 0xc2, 0x42, 0x6f,
	0xb6, 0x7d, 0xa2, 0xf0, 0x36, 0x8a, 0x70, 0x40, 0x19, 0x56, 0x94, 0xb3, 0xa4, 0xd1, 0x59, 0x0a,
	0x78, 0xc0, 0xf5, 0x11, 0xc5, 0x27, 0x53, 0x5d, 0x0e, 0x38, 0x0f, 0x42, 0x82, 0xf4, 0x3f, 0x7f,
	0xd8, 0x45, 0x98, 0x19, 0x27, 0x67, 0xc5, 0x40, 0x38, 0xa2, 0x08, 0x33, 0xc6, 0x95, 0x56, 0x93,
	0x06, 0xb5, 0xd3, 0x01, 0x93, 0x1f, 0x83, 0x54, 0xd2, 0x48, 0x9f, 0x32, 0x95, 0xd4, 0xbd, 0x07,
	0xc0, 0xdd, 0x8d, 0x23, 0x3e, 0x3e, 0x24, 0x9d, 0x61, 0x2c, 0xd5, 0x22, 0x01, 0x95, 0x4a, 0x60,
	0xd1, 0x22, 0x83, 0x21, 0x91, 0x0a, 0xba, 0x00, 0xd0, 0x03, 0xc2, 0x14, 0xed, 0x52, 0x22, 0x6c,
	0x6b, 0xd5, 0xda, 0xb8, 0xd0, 0x4a, 0x55, 0xbc, 0x2f, 0x16, 0xa8, 0xfe, 0x53, 0x42, 0x46, 0x9c,
	0x49, 0x02, 0xd7, 0x40, 0xf9, 0x00, 0x47, 0x91, 0xee, 0x5e, 0xac, 0x5f, 0xa9, 0xa5, 0x9e, 0xab,
	0xf6, 0x08, 0x47, 0x51, 0x4b, 0xc3, 0xf0, 0x25, 0xb8, 0x4a, 0xa6, 0x22, 0x6d, 0x31, 0x55, 0xb1,
	0xe7, 0x74, 0x57, 0x35, 0xd3, 0x55, 0x60, 0x06, 0x49, 0xae, 0xe6, 0x55, 0xc0, 0x92, 0xce, 0xd6,
	0x08, 0xc3, 0xd8, 0x47, 0x9a, 0x4b, 0x79, 0x4f, 0xc0, 0xb5, 0x53, 0x75, 0x93, 0x74, 0x0b, 0xcc,
	0xc7, 0x51, 0xa4, 0x6d, 0xad, 0x9e, 0x2b, 0x8c, 0xda, 0x2c, 0x1f, 0xfd, 0xac, 0x96, 0x5a, 0x09,
	0xcb, 0xbb, 0x01, 0x96, 0xb5, 0xce, 0x9e, 0xc0, 0x4c, 0x76, 0x89, 0xc8, 0x98, 0x3c, 0x03, 0x4e,
	0x11, 0x68, 0x9c, 0x36, 0x41, 0x79, 0xbf, 0xb1, 0x33, 0x35, 0xba, 0x9c, 0x31, 0xda, 0x6f, 0xec,
	0x18, 0x1f, 0xcd, 0xf1, 0x1c, 0x60, 0x6b, 0xa5, 0xa7, 0x21, 0xf7, 0x71, 0xb8, 0xc7, 0x7b, 0x84,
	0x9d, 0xb8, 0xec, 0x9a, 0x08, 0x59, 0xcc, 0x98, 0xdc, 0x03, 0x0b, 0x4a, 0x57, 0x8c, 0x4d, 0x25,
	0x63, 0xa3, 0xc9, 0xcf, 0x59, 0x97, 0x1b, 0x33, 0xc3, 0xad, 0x7f, 0x2b, 0x83, 0x79, 0xad, 0x09,
	0xbf, 0x5a, 0x00, 0xe6, 0x9f, 0x1a, 0xde, 0xce, 0xc8, 0xcc, 0x5e, 0x20, 0xe7, 0xce, 0xff, 0x91,
	0x93, 0xc4, 0xde, 0xfd, 0x0f, 0xdf, 0x7f, 0x7f, 0x9e, 0x43, 0x70, 0x0b, 0xa5, 0x37, 0xb6, 0x60,
	0x2d, 0xd0, 0xdb, 0xbf, 0x4b, 0xf8, 0x0e, 0x0e, 0xc0, 0xf9, 0xe9, 0x2c, 0xe1, 0xcd, 0xbc, 0xe1,
	0xa9, 0xf9, 0x3b, 0xde, 0x2c, 0x8a, 0x49, 0xe2, 0xea, 0x24, 0x36, 0xac, 0x64, 0x92, 0xe0, 0x30,
	0x6c, 0xeb, 0xd9, 0xc3, 0x8f, 0x16, 0xb8, 0x94, 0x19, 0x2d, 0x5c, 0xcf, 0xab, 0x16, 0x2d, 0x86,
	0x73, 0xeb, 0x4c, 0x9e, 0x89, 0xe0, 0xe9, 0x08, 0x2b, 0xd0, 0xc9, 0x44, 0x50, 0x86, 0xab, 0x73,
	0xc0, 0xf7, 0x16, 0xb8, 0x98, 0x9e, 0x3d, 0x5c, 0xcb, 0xab, 0x17, 0xec, 0x8d, 0xb3, 0x7e, 0x16,
	0x6d, 0x66, 0x86, 0x40, 0x53, 0xdb, 0xc9, 0xc2, 0x34, 0x9b, 0x47, 0x63, 0xd7, 0x3a, 0x1e, 0xbb,
	0xd6, 0xaf, 0xb1, 0x6b, 0x7d, 0x9a, 0xb8, 0xa5, 0xe3, 0x89, 0x5b, 0xfa, 0x31, 0x71, 0x4b, 0xaf,
	0x36, 0x02, 0xaa, 0x5e, 0x0f, 0xfd, 0x5a, 0x87, 0xf7, 0xd1, 0x0b, 0x2a, 0xf0, 0x43, 0x2e, 0x08,
	0x92, 0xa4, 0x87, 0x29, 0x3a, 0x3c, 0xb9, 0xcf, 0x28, 0x22, 0xd2, 0x5f, 0xd0, 0x1f, 0xa4, 0xbb,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae, 0x94, 0x53, 0xc9, 0x65, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// query info of a specific application by dApp ID or name
	ExecutionRegistrar(ctx context.Context, in *QueryExecutionRegistrarRequest, opts ...grpc.CallOption) (*QueryExecutionRegistrarResponse, error)
	// list IDs of all execution registrars and allow search by
	// executor or verifier kira public key (e.g. list all dApps run by address kiraXXX…YYY)
	AllDapps(ctx context.Context, in *QueryAllDappsRequest, opts ...grpc.CallOption) (*QueryAllDappsResponse, error)
	// query XAMs’ records by either account address, account index, xid or
	// transaction hash in which cross-app transaction was added to the ABR.
	TransferDapps(ctx context.Context, in *QueryTransferDappsRequest, opts ...grpc.CallOption) (*QueryTransferDappsResponse, error)
	// query list of all token denoms on the network including those created in
	// the genesis (ukex, samolean etc..) as well as those in the minting module,
	// lp tokens, validator recovery tokens and so on. If the flag with specific
	// name is specified provide a detailed information about the token including
	// its current circulating supply etc.
	GlobalTokens(ctx context.Context, in *QueryGlobalTokensRequest, opts ...grpc.CallOption) (*QueryGlobalTokensResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ExecutionRegistrar(ctx context.Context, in *QueryExecutionRegistrarRequest, opts ...grpc.CallOption) (*QueryExecutionRegistrarResponse, error) {
	out := new(QueryExecutionRegistrarResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Query/ExecutionRegistrar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDapps(ctx context.Context, in *QueryAllDappsRequest, opts ...grpc.CallOption) (*QueryAllDappsResponse, error) {
	out := new(QueryAllDappsResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Query/AllDapps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransferDapps(ctx context.Context, in *QueryTransferDappsRequest, opts ...grpc.CallOption) (*QueryTransferDappsResponse, error) {
	out := new(QueryTransferDappsResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Query/TransferDapps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GlobalTokens(ctx context.Context, in *QueryGlobalTokensRequest, opts ...grpc.CallOption) (*QueryGlobalTokensResponse, error) {
	out := new(QueryGlobalTokensResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Query/GlobalTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// query info of a specific application by dApp ID or name
	ExecutionRegistrar(context.Context, *QueryExecutionRegistrarRequest) (*QueryExecutionRegistrarResponse, error)
	// list IDs of all execution registrars and allow search by
	// executor or verifier kira public key (e.g. list all dApps run by address kiraXXX…YYY)
	AllDapps(context.Context, *QueryAllDappsRequest) (*QueryAllDappsResponse, error)
	// query XAMs’ records by either account address, account index, xid or
	// transaction hash in which cross-app transaction was added to the ABR.
	TransferDapps(context.Context, *QueryTransferDappsRequest) (*QueryTransferDappsResponse, error)
	// query list of all token denoms on the network including those created in
	// the genesis (ukex, samolean etc..) as well as those in the minting module,
	// lp tokens, validator recovery tokens and so on. If the flag with specific
	// name is specified provide a detailed information about the token including
	// its current circulating supply etc.
	GlobalTokens(context.Context, *QueryGlobalTokensRequest) (*QueryGlobalTokensResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ExecutionRegistrar(ctx context.Context, req *QueryExecutionRegistrarRequest) (*QueryExecutionRegistrarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionRegistrar not implemented")
}
func (*UnimplementedQueryServer) AllDapps(ctx context.Context, req *QueryAllDappsRequest) (*QueryAllDappsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDapps not implemented")
}
func (*UnimplementedQueryServer) TransferDapps(ctx context.Context, req *QueryTransferDappsRequest) (*QueryTransferDappsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferDapps not implemented")
}
func (*UnimplementedQueryServer) GlobalTokens(ctx context.Context, req *QueryGlobalTokensRequest) (*QueryGlobalTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalTokens not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ExecutionRegistrar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExecutionRegistrarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutionRegistrar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Query/ExecutionRegistrar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutionRegistrar(ctx, req.(*QueryExecutionRegistrarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDapps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDappsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDapps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Query/AllDapps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDapps(ctx, req.(*QueryAllDappsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransferDapps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTransferDappsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransferDapps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Query/TransferDapps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransferDapps(ctx, req.(*QueryTransferDappsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GlobalTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGlobalTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GlobalTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Query/GlobalTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GlobalTokens(ctx, req.(*QueryGlobalTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.layer2.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutionRegistrar",
			Handler:    _Query_ExecutionRegistrar_Handler,
		},
		{
			MethodName: "AllDapps",
			Handler:    _Query_AllDapps_Handler,
		},
		{
			MethodName: "TransferDapps",
			Handler:    _Query_TransferDapps_Handler,
		},
		{
			MethodName: "GlobalTokens",
			Handler:    _Query_GlobalTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/layer2/query.proto",
}

func (m *QueryExecutionRegistrarRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionRegistrarRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutionRegistrarRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryExecutionRegistrarResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryExecutionRegistrarResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryExecutionRegistrarResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionRegistrar != nil {
		{
			size, err := m.ExecutionRegistrar.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Dapp != nil {
		{
			size, err := m.Dapp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDappsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDappsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDappsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllDappsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDappsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDappsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dapps) > 0 {
		for iNdEx := len(m.Dapps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dapps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTransferDappsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferDappsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferDappsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTransferDappsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTransferDappsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTransferDappsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.XAMs) > 0 {
		for iNdEx := len(m.XAMs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.XAMs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGlobalTokensRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGlobalTokensRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGlobalTokensRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGlobalTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGlobalTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGlobalTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryExecutionRegistrarRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryExecutionRegistrarResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dapp != nil {
		l = m.Dapp.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ExecutionRegistrar != nil {
		l = m.ExecutionRegistrar.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDappsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllDappsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Dapps) > 0 {
		for _, e := range m.Dapps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTransferDappsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTransferDappsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.XAMs) > 0 {
		for _, e := range m.XAMs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGlobalTokensRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGlobalTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryExecutionRegistrarRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionRegistrarRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionRegistrarRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryExecutionRegistrarResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryExecutionRegistrarResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryExecutionRegistrarResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dapp == nil {
				m.Dapp = &Dapp{}
			}
			if err := m.Dapp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionRegistrar", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecutionRegistrar == nil {
				m.ExecutionRegistrar = &ExecutionRegistrar{}
			}
			if err := m.ExecutionRegistrar.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDappsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDappsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDappsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDappsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDappsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDappsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dapps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dapps = append(m.Dapps, Dapp{})
			if err := m.Dapps[len(m.Dapps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferDappsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferDappsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferDappsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTransferDappsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTransferDappsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTransferDappsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAMs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAMs = append(m.XAMs, XAM{})
			if err := m.XAMs[len(m.XAMs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGlobalTokensRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGlobalTokensRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGlobalTokensRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGlobalTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGlobalTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGlobalTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, TokenInfo{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
