// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/layer2/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Allows joining applications as executor or fisherman. By default all
// executors are also verifiers so it should not be possible to set both
// executor and verifier flags to true at the same time. This tx MUST also allow
// to define or update a globally unique INTERX address that will be tasked with
// operating the application. Tx should also fail if someone already joined
// application and is applying for a different role, in other words all
// operators must be unique for each dApp although different applications can
// have the same operators.
type ProposalJoinDapp struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DappName string `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Executor bool   `protobuf:"varint,3,opt,name=executor,proto3" json:"executor,omitempty"`
	Verifier bool   `protobuf:"varint,4,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Interx   string `protobuf:"bytes,5,opt,name=interx,proto3" json:"interx,omitempty"`
}

func (m *ProposalJoinDapp) Reset()         { *m = ProposalJoinDapp{} }
func (m *ProposalJoinDapp) String() string { return proto.CompactTextString(m) }
func (*ProposalJoinDapp) ProtoMessage()    {}
func (*ProposalJoinDapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1582b91a5d65ebd, []int{0}
}
func (m *ProposalJoinDapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalJoinDapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalJoinDapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalJoinDapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalJoinDapp.Merge(m, src)
}
func (m *ProposalJoinDapp) XXX_Size() int {
	return m.Size()
}
func (m *ProposalJoinDapp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalJoinDapp.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalJoinDapp proto.InternalMessageInfo

func (m *ProposalJoinDapp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ProposalJoinDapp) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *ProposalJoinDapp) GetExecutor() bool {
	if m != nil {
		return m.Executor
	}
	return false
}

func (m *ProposalJoinDapp) GetVerifier() bool {
	if m != nil {
		return m.Verifier
	}
	return false
}

func (m *ProposalJoinDapp) GetInterx() string {
	if m != nil {
		return m.Interx
	}
	return ""
}

// update CURRENT session state (can only be sent by current session leader),
// this tx MUST include dApp version.
type ProposalTransitionDapp struct {
	Sender     string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DappName   string `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	StatusHash string `protobuf:"bytes,3,opt,name=status_hash,json=statusHash,proto3" json:"status_hash,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *ProposalTransitionDapp) Reset()         { *m = ProposalTransitionDapp{} }
func (m *ProposalTransitionDapp) String() string { return proto.CompactTextString(m) }
func (*ProposalTransitionDapp) ProtoMessage()    {}
func (*ProposalTransitionDapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1582b91a5d65ebd, []int{1}
}
func (m *ProposalTransitionDapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalTransitionDapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalTransitionDapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalTransitionDapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalTransitionDapp.Merge(m, src)
}
func (m *ProposalTransitionDapp) XXX_Size() int {
	return m.Size()
}
func (m *ProposalTransitionDapp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalTransitionDapp.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalTransitionDapp proto.InternalMessageInfo

func (m *ProposalTransitionDapp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ProposalTransitionDapp) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *ProposalTransitionDapp) GetStatusHash() string {
	if m != nil {
		return m.StatusHash
	}
	return ""
}

func (m *ProposalTransitionDapp) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// can only be sent by the dApp controllers, allowing to upgrade binaries,
// controlled and modify all other properties
type ProposalUpsertDapp struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Dapp   Dapp   `protobuf:"bytes,2,opt,name=dapp,proto3" json:"dapp"`
}

func (m *ProposalUpsertDapp) Reset()         { *m = ProposalUpsertDapp{} }
func (m *ProposalUpsertDapp) String() string { return proto.CompactTextString(m) }
func (*ProposalUpsertDapp) ProtoMessage()    {}
func (*ProposalUpsertDapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b1582b91a5d65ebd, []int{2}
}
func (m *ProposalUpsertDapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalUpsertDapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalUpsertDapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalUpsertDapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalUpsertDapp.Merge(m, src)
}
func (m *ProposalUpsertDapp) XXX_Size() int {
	return m.Size()
}
func (m *ProposalUpsertDapp) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalUpsertDapp.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalUpsertDapp proto.InternalMessageInfo

func (m *ProposalUpsertDapp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *ProposalUpsertDapp) GetDapp() Dapp {
	if m != nil {
		return m.Dapp
	}
	return Dapp{}
}

func init() {
	proto.RegisterType((*ProposalJoinDapp)(nil), "kira.layer2.ProposalJoinDapp")
	proto.RegisterType((*ProposalTransitionDapp)(nil), "kira.layer2.ProposalTransitionDapp")
	proto.RegisterType((*ProposalUpsertDapp)(nil), "kira.layer2.ProposalUpsertDapp")
}

func init() { proto.RegisterFile("kira/layer2/proposal.proto", fileDescriptor_b1582b91a5d65ebd) }

var fileDescriptor_b1582b91a5d65ebd = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x86, 0x3b, 0xf7, 0x72, 0x81, 0x0e, 0x8b, 0xab, 0x8d, 0x21, 0xb5, 0x26, 0x85, 0xb0, 0x22,
	0x31, 0xb6, 0x09, 0xee, 0x5c, 0x82, 0x0b, 0xa3, 0x89, 0x31, 0x8d, 0x2e, 0x74, 0x43, 0x06, 0x38,
	0xd2, 0x09, 0x74, 0x66, 0x32, 0x33, 0x10, 0x78, 0x03, 0x97, 0x3e, 0x82, 0x4b, 0x1f, 0xc0, 0x87,
	0x60, 0x49, 0x5c, 0xb9, 0x32, 0x06, 0x36, 0x3e, 0x86, 0x69, 0x87, 0x1a, 0x56, 0x6e, 0x5c, 0xb5,
	0xff, 0xf9, 0x4e, 0xfb, 0x7f, 0xc9, 0xc1, 0xde, 0x88, 0x4a, 0x12, 0x8e, 0xc9, 0x1c, 0x64, 0x2b,
	0x14, 0x92, 0x0b, 0xae, 0xc8, 0x38, 0x10, 0x92, 0x6b, 0xee, 0x54, 0x52, 0x16, 0x18, 0xe6, 0xed,
	0x0d, 0xf9, 0x90, 0x67, 0xf3, 0x30, 0x7d, 0x33, 0x2b, 0xde, 0x7e, 0x9f, 0xab, 0x84, 0xab, 0xae,
	0x01, 0x26, 0x6c, 0x90, 0xbb, 0xfd, 0x67, 0xf3, 0x30, 0xa4, 0xf1, 0x8c, 0xf0, 0xce, 0xd5, 0xa6,
	0xea, 0x9c, 0x53, 0x76, 0x4a, 0x84, 0x70, 0xaa, 0xb8, 0xa8, 0x80, 0x0d, 0x40, 0xba, 0xa8, 0x8e,
	0x9a, 0x76, 0xb4, 0x49, 0xce, 0x01, 0xb6, 0x07, 0x44, 0x88, 0x2e, 0x23, 0x09, 0xb8, 0x7f, 0x32,
	0x54, 0x4e, 0x07, 0x97, 0x24, 0x01, 0xc7, 0xc3, 0x65, 0x98, 0x41, 0x7f, 0xa2, 0xb9, 0x74, 0xff,
	0xd6, 0x51, 0xb3, 0x1c, 0x7d, 0xe7, 0x94, 0x4d, 0x41, 0xd2, 0x7b, 0x0a, 0xd2, 0x2d, 0x18, 0x96,
	0xe7, 0xb4, 0x8c, 0x32, 0x0d, 0x72, 0xe6, 0xfe, 0x33, 0x65, 0x26, 0x9d, 0xfc, 0xff, 0x7c, 0xaa,
	0xa1, 0xd7, 0x97, 0xa3, 0x52, 0x87, 0x33, 0x0d, 0x4c, 0x37, 0x1e, 0x10, 0xae, 0xe6, 0xaa, 0xd7,
	0x92, 0x30, 0x45, 0x35, 0xe5, 0xbf, 0x10, 0xae, 0xe1, 0x8a, 0xd2, 0x44, 0x4f, 0x54, 0x37, 0x26,
	0x2a, 0xce, 0x9c, 0xed, 0x08, 0x9b, 0xd1, 0x19, 0x51, 0xb1, 0xe3, 0xe2, 0xd2, 0x14, 0xa4, 0xa2,
	0x9c, 0x65, 0xd2, 0x76, 0x94, 0xc7, 0xc6, 0x2d, 0x76, 0x72, 0x93, 0x1b, 0xa1, 0x40, 0xea, 0x1f,
	0x2d, 0x0e, 0x71, 0x21, 0x2d, 0xcd, 0x04, 0x2a, 0xad, 0xdd, 0x60, 0xeb, 0x94, 0x41, 0xfa, 0x61,
	0xbb, 0xb0, 0x78, 0xaf, 0x59, 0x51, 0xb6, 0xd4, 0x6e, 0x2f, 0x56, 0x3e, 0x5a, 0xae, 0x7c, 0xf4,
	0xb1, 0xf2, 0xd1, 0xe3, 0xda, 0xb7, 0x96, 0x6b, 0xdf, 0x7a, 0x5b, 0xfb, 0xd6, 0x5d, 0x73, 0x48,
	0x75, 0x3c, 0xe9, 0x05, 0x7d, 0x9e, 0x84, 0x17, 0x54, 0x92, 0x0e, 0x97, 0x10, 0x2a, 0x18, 0x11,
	0x1a, 0xce, 0xf2, 0xdb, 0xea, 0xb9, 0x00, 0xd5, 0x2b, 0x66, 0xb7, 0x3d, 0xfe, 0x0a, 0x00, 0x00,
	0xff, 0xff, 0x33, 0xe7, 0xf5, 0x90, 0x51, 0x02, 0x00, 0x00,
}

func (this *ProposalJoinDapp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProposalJoinDapp)
	if !ok {
		that2, ok := that.(ProposalJoinDapp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if this.Executor != that1.Executor {
		return false
	}
	if this.Verifier != that1.Verifier {
		return false
	}
	if this.Interx != that1.Interx {
		return false
	}
	return true
}
func (m *ProposalJoinDapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalJoinDapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalJoinDapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interx) > 0 {
		i -= len(m.Interx)
		copy(dAtA[i:], m.Interx)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Interx)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Verifier {
		i--
		if m.Verifier {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executor {
		i--
		if m.Executor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalTransitionDapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalTransitionDapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalTransitionDapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StatusHash) > 0 {
		i -= len(m.StatusHash)
		copy(dAtA[i:], m.StatusHash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.StatusHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalUpsertDapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalUpsertDapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalUpsertDapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Dapp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalJoinDapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Executor {
		n += 2
	}
	if m.Verifier {
		n += 2
	}
	l = len(m.Interx)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalTransitionDapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.StatusHash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *ProposalUpsertDapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.Dapp.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalJoinDapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalJoinDapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalJoinDapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executor = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verifier = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalTransitionDapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalTransitionDapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalTransitionDapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalUpsertDapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalUpsertDapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalUpsertDapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dapp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
