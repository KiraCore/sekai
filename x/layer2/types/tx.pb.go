// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/layer2/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// allow to raise dApp launch proposal using a token
// bond or with a dedicated permission (where no starting 1% bond needed). Fail
// proposal if min_dapp_bond is not reached. This proposal does NOT require
// governance approval only sufficient number of bonded tokens.
type MsgCreateDappProposal struct {
	Sender string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Dapp   Dapp                                    `protobuf:"bytes,2,opt,name=dapp,proto3" json:"dapp"`
	Bond   github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bond"`
}

func (m *MsgCreateDappProposal) Reset()         { *m = MsgCreateDappProposal{} }
func (m *MsgCreateDappProposal) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDappProposal) ProtoMessage()    {}
func (*MsgCreateDappProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{0}
}
func (m *MsgCreateDappProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDappProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDappProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDappProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDappProposal.Merge(m, src)
}
func (m *MsgCreateDappProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDappProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDappProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDappProposal proto.InternalMessageInfo

func (m *MsgCreateDappProposal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateDappProposal) GetDapp() Dapp {
	if m != nil {
		return m.Dapp
	}
	return Dapp{}
}

type MsgCreateDappProposalResponse struct {
}

func (m *MsgCreateDappProposalResponse) Reset()         { *m = MsgCreateDappProposalResponse{} }
func (m *MsgCreateDappProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateDappProposalResponse) ProtoMessage()    {}
func (*MsgCreateDappProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{1}
}
func (m *MsgCreateDappProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateDappProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateDappProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateDappProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateDappProposalResponse.Merge(m, src)
}
func (m *MsgCreateDappProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateDappProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateDappProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateDappProposalResponse proto.InternalMessageInfo

// allow KEX holders to bond extra tokens to dApp
// proposal unless max_dapp_bond is reached in which case fail the tx.
type MsgBondDappProposal struct {
	Sender   string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DappName string                                  `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Bond     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bond"`
}

func (m *MsgBondDappProposal) Reset()         { *m = MsgBondDappProposal{} }
func (m *MsgBondDappProposal) String() string { return proto.CompactTextString(m) }
func (*MsgBondDappProposal) ProtoMessage()    {}
func (*MsgBondDappProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{2}
}
func (m *MsgBondDappProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondDappProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondDappProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondDappProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondDappProposal.Merge(m, src)
}
func (m *MsgBondDappProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondDappProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondDappProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondDappProposal proto.InternalMessageInfo

func (m *MsgBondDappProposal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBondDappProposal) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

type MsgBondDappProposalResponse struct {
}

func (m *MsgBondDappProposalResponse) Reset()         { *m = MsgBondDappProposalResponse{} }
func (m *MsgBondDappProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBondDappProposalResponse) ProtoMessage()    {}
func (*MsgBondDappProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{3}
}
func (m *MsgBondDappProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondDappProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondDappProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondDappProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondDappProposalResponse.Merge(m, src)
}
func (m *MsgBondDappProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondDappProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondDappProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondDappProposalResponse proto.InternalMessageInfo

// claim your KEX back from dApp proposal, should
// be possible to execute regardless if the proposal is still ongoing or failed
type MsgReclaimDappBondProposal struct {
	Sender   string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	DappName string                                  `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Bond     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bond"`
}

func (m *MsgReclaimDappBondProposal) Reset()         { *m = MsgReclaimDappBondProposal{} }
func (m *MsgReclaimDappBondProposal) String() string { return proto.CompactTextString(m) }
func (*MsgReclaimDappBondProposal) ProtoMessage()    {}
func (*MsgReclaimDappBondProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{4}
}
func (m *MsgReclaimDappBondProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReclaimDappBondProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReclaimDappBondProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReclaimDappBondProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReclaimDappBondProposal.Merge(m, src)
}
func (m *MsgReclaimDappBondProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgReclaimDappBondProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReclaimDappBondProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReclaimDappBondProposal proto.InternalMessageInfo

func (m *MsgReclaimDappBondProposal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgReclaimDappBondProposal) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

type MsgReclaimDappBondProposalResponse struct {
}

func (m *MsgReclaimDappBondProposalResponse) Reset()         { *m = MsgReclaimDappBondProposalResponse{} }
func (m *MsgReclaimDappBondProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReclaimDappBondProposalResponse) ProtoMessage()    {}
func (*MsgReclaimDappBondProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{5}
}
func (m *MsgReclaimDappBondProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReclaimDappBondProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReclaimDappBondProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReclaimDappBondProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReclaimDappBondProposalResponse.Merge(m, src)
}
func (m *MsgReclaimDappBondProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReclaimDappBondProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReclaimDappBondProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReclaimDappBondProposalResponse proto.InternalMessageInfo

// Allows joining applications as executor or fisherman. By default all
// executors are also verifiers so it should not be possible to set both
// executor and verifier flags to true at the same time. This tx MUST also allow
// to define or update a globally unique INTERX address that will be tasked with
// operating the application. Tx should also fail if someone already joined
// application and is applying for a different role, in other words all
// operators must be unique for each dApp although different applications can
// have the same operators.
type MsgJoinDappTx struct {
	Sender   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Executor bool   `protobuf:"varint,2,opt,name=executor,proto3" json:"executor,omitempty"`
	Verifier bool   `protobuf:"varint,3,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Interx   string `protobuf:"bytes,4,opt,name=interx,proto3" json:"interx,omitempty"`
}

func (m *MsgJoinDappTx) Reset()         { *m = MsgJoinDappTx{} }
func (m *MsgJoinDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDappTx) ProtoMessage()    {}
func (*MsgJoinDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{6}
}
func (m *MsgJoinDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDappTx.Merge(m, src)
}
func (m *MsgJoinDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDappTx proto.InternalMessageInfo

func (m *MsgJoinDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgJoinDappTx) GetExecutor() bool {
	if m != nil {
		return m.Executor
	}
	return false
}

func (m *MsgJoinDappTx) GetVerifier() bool {
	if m != nil {
		return m.Verifier
	}
	return false
}

func (m *MsgJoinDappTx) GetInterx() string {
	if m != nil {
		return m.Interx
	}
	return ""
}

type MsgJoinDappTxResponse struct {
}

func (m *MsgJoinDappTxResponse) Reset()         { *m = MsgJoinDappTxResponse{} }
func (m *MsgJoinDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinDappTxResponse) ProtoMessage()    {}
func (*MsgJoinDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{7}
}
func (m *MsgJoinDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinDappTxResponse.Merge(m, src)
}
func (m *MsgJoinDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinDappTxResponse proto.InternalMessageInfo

// stop being a dApp operator and remove the record in the Execution Registrar.
// Return bonded funds if the operator is a verifier.
type MsgExitDapp struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgExitDapp) Reset()         { *m = MsgExitDapp{} }
func (m *MsgExitDapp) String() string { return proto.CompactTextString(m) }
func (*MsgExitDapp) ProtoMessage()    {}
func (*MsgExitDapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{8}
}
func (m *MsgExitDapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitDapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitDapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitDapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitDapp.Merge(m, src)
}
func (m *MsgExitDapp) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitDapp) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitDapp.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitDapp proto.InternalMessageInfo

func (m *MsgExitDapp) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgExitDappResponse struct {
}

func (m *MsgExitDappResponse) Reset()         { *m = MsgExitDappResponse{} }
func (m *MsgExitDappResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExitDappResponse) ProtoMessage()    {}
func (*MsgExitDappResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{9}
}
func (m *MsgExitDappResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExitDappResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExitDappResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExitDappResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExitDappResponse.Merge(m, src)
}
func (m *MsgExitDappResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExitDappResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExitDappResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExitDappResponse proto.InternalMessageInfo

// accept/reject executor candidate, can only be sent by the controllers,
// corresponding proposal should be automatically raised once join dApp tx is
// sent by the validator.
type MsgVoteDappOperatorTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgVoteDappOperatorTx) Reset()         { *m = MsgVoteDappOperatorTx{} }
func (m *MsgVoteDappOperatorTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDappOperatorTx) ProtoMessage()    {}
func (*MsgVoteDappOperatorTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{10}
}
func (m *MsgVoteDappOperatorTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDappOperatorTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDappOperatorTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDappOperatorTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDappOperatorTx.Merge(m, src)
}
func (m *MsgVoteDappOperatorTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDappOperatorTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDappOperatorTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDappOperatorTx proto.InternalMessageInfo

func (m *MsgVoteDappOperatorTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgVoteDappOperatorTxResponse struct {
}

func (m *MsgVoteDappOperatorTxResponse) Reset()         { *m = MsgVoteDappOperatorTxResponse{} }
func (m *MsgVoteDappOperatorTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteDappOperatorTxResponse) ProtoMessage()    {}
func (*MsgVoteDappOperatorTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{11}
}
func (m *MsgVoteDappOperatorTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteDappOperatorTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteDappOperatorTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteDappOperatorTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteDappOperatorTxResponse.Merge(m, src)
}
func (m *MsgVoteDappOperatorTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteDappOperatorTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteDappOperatorTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteDappOperatorTxResponse proto.InternalMessageInfo

// return lp_<denom> tokens to the pool and redeem KEX or dp_<denom> token
// unless slippage is exceeded then fail the tx.
type MsgRedeemDappPoolTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRedeemDappPoolTx) Reset()         { *m = MsgRedeemDappPoolTx{} }
func (m *MsgRedeemDappPoolTx) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemDappPoolTx) ProtoMessage()    {}
func (*MsgRedeemDappPoolTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{12}
}
func (m *MsgRedeemDappPoolTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemDappPoolTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemDappPoolTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemDappPoolTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemDappPoolTx.Merge(m, src)
}
func (m *MsgRedeemDappPoolTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemDappPoolTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemDappPoolTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemDappPoolTx proto.InternalMessageInfo

func (m *MsgRedeemDappPoolTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgRedeemDappPoolTxResponse struct {
}

func (m *MsgRedeemDappPoolTxResponse) Reset()         { *m = MsgRedeemDappPoolTxResponse{} }
func (m *MsgRedeemDappPoolTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemDappPoolTxResponse) ProtoMessage()    {}
func (*MsgRedeemDappPoolTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{13}
}
func (m *MsgRedeemDappPoolTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemDappPoolTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemDappPoolTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemDappPoolTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemDappPoolTxResponse.Merge(m, src)
}
func (m *MsgRedeemDappPoolTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemDappPoolTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemDappPoolTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemDappPoolTxResponse proto.InternalMessageInfo

// send KEX and receive dp_<denom> or send dp_<denom> and receive KEX unless
// slippage is exceeded then fail the tx.
type MsgSwapDappPoolTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgSwapDappPoolTx) Reset()         { *m = MsgSwapDappPoolTx{} }
func (m *MsgSwapDappPoolTx) String() string { return proto.CompactTextString(m) }
func (*MsgSwapDappPoolTx) ProtoMessage()    {}
func (*MsgSwapDappPoolTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{14}
}
func (m *MsgSwapDappPoolTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapDappPoolTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapDappPoolTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapDappPoolTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapDappPoolTx.Merge(m, src)
}
func (m *MsgSwapDappPoolTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapDappPoolTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapDappPoolTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapDappPoolTx proto.InternalMessageInfo

func (m *MsgSwapDappPoolTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgSwapDappPoolTxResponse struct {
}

func (m *MsgSwapDappPoolTxResponse) Reset()         { *m = MsgSwapDappPoolTxResponse{} }
func (m *MsgSwapDappPoolTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSwapDappPoolTxResponse) ProtoMessage()    {}
func (*MsgSwapDappPoolTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{15}
}
func (m *MsgSwapDappPoolTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSwapDappPoolTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSwapDappPoolTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSwapDappPoolTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSwapDappPoolTxResponse.Merge(m, src)
}
func (m *MsgSwapDappPoolTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSwapDappPoolTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSwapDappPoolTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSwapDappPoolTxResponse proto.InternalMessageInfo

// allow user to convert any dp_<denom> for any other dp_<denom> token unless
// slippage is exceeded then fail the tx.
type MsgConvertDappPoolTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgConvertDappPoolTx) Reset()         { *m = MsgConvertDappPoolTx{} }
func (m *MsgConvertDappPoolTx) String() string { return proto.CompactTextString(m) }
func (*MsgConvertDappPoolTx) ProtoMessage()    {}
func (*MsgConvertDappPoolTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{16}
}
func (m *MsgConvertDappPoolTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertDappPoolTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertDappPoolTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertDappPoolTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertDappPoolTx.Merge(m, src)
}
func (m *MsgConvertDappPoolTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertDappPoolTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertDappPoolTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertDappPoolTx proto.InternalMessageInfo

func (m *MsgConvertDappPoolTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgConvertDappPoolTxResponse struct {
}

func (m *MsgConvertDappPoolTxResponse) Reset()         { *m = MsgConvertDappPoolTxResponse{} }
func (m *MsgConvertDappPoolTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgConvertDappPoolTxResponse) ProtoMessage()    {}
func (*MsgConvertDappPoolTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{17}
}
func (m *MsgConvertDappPoolTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgConvertDappPoolTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgConvertDappPoolTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgConvertDappPoolTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgConvertDappPoolTxResponse.Merge(m, src)
}
func (m *MsgConvertDappPoolTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgConvertDappPoolTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgConvertDappPoolTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgConvertDappPoolTxResponse proto.InternalMessageInfo

// allow executors to change their status to paused. This tx does NOT pause the
// dApp, it only pauses the ability of an executor to continue running the dApp
// in the next session. If the executor is currently running the session then he
// needs to finish it before paused status is applied.
type MsgPauseDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgPauseDappTx) Reset()         { *m = MsgPauseDappTx{} }
func (m *MsgPauseDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgPauseDappTx) ProtoMessage()    {}
func (*MsgPauseDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{18}
}
func (m *MsgPauseDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseDappTx.Merge(m, src)
}
func (m *MsgPauseDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseDappTx proto.InternalMessageInfo

func (m *MsgPauseDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgPauseDappTxResponse struct {
}

func (m *MsgPauseDappTxResponse) Reset()         { *m = MsgPauseDappTxResponse{} }
func (m *MsgPauseDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseDappTxResponse) ProtoMessage()    {}
func (*MsgPauseDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{19}
}
func (m *MsgPauseDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseDappTxResponse.Merge(m, src)
}
func (m *MsgPauseDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseDappTxResponse proto.InternalMessageInfo

// exit maintenance mode to signal that verifier or executor is ready to operate
// the dApp again.
type MsgUnPauseDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUnPauseDappTx) Reset()         { *m = MsgUnPauseDappTx{} }
func (m *MsgUnPauseDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgUnPauseDappTx) ProtoMessage()    {}
func (*MsgUnPauseDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{20}
}
func (m *MsgUnPauseDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnPauseDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnPauseDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnPauseDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnPauseDappTx.Merge(m, src)
}
func (m *MsgUnPauseDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnPauseDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnPauseDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnPauseDappTx proto.InternalMessageInfo

func (m *MsgUnPauseDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgUnPauseDappTxResponse struct {
}

func (m *MsgUnPauseDappTxResponse) Reset()         { *m = MsgUnPauseDappTxResponse{} }
func (m *MsgUnPauseDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnPauseDappTxResponse) ProtoMessage()    {}
func (*MsgUnPauseDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{21}
}
func (m *MsgUnPauseDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnPauseDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnPauseDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnPauseDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnPauseDappTxResponse.Merge(m, src)
}
func (m *MsgUnPauseDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnPauseDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnPauseDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnPauseDappTxResponse proto.InternalMessageInfo

// re-activate deactivated dApp operator
type MsgReactivateDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgReactivateDappTx) Reset()         { *m = MsgReactivateDappTx{} }
func (m *MsgReactivateDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgReactivateDappTx) ProtoMessage()    {}
func (*MsgReactivateDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{22}
}
func (m *MsgReactivateDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReactivateDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReactivateDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReactivateDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReactivateDappTx.Merge(m, src)
}
func (m *MsgReactivateDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgReactivateDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReactivateDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReactivateDappTx proto.InternalMessageInfo

func (m *MsgReactivateDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgReactivateDappTxResponse struct {
}

func (m *MsgReactivateDappTxResponse) Reset()         { *m = MsgReactivateDappTxResponse{} }
func (m *MsgReactivateDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReactivateDappTxResponse) ProtoMessage()    {}
func (*MsgReactivateDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{23}
}
func (m *MsgReactivateDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReactivateDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReactivateDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReactivateDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReactivateDappTxResponse.Merge(m, src)
}
func (m *MsgReactivateDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReactivateDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReactivateDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReactivateDappTxResponse proto.InternalMessageInfo

// allow next session leader to announce or update his IP address and start
// execution.
type MsgExecuteDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgExecuteDappTx) Reset()         { *m = MsgExecuteDappTx{} }
func (m *MsgExecuteDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteDappTx) ProtoMessage()    {}
func (*MsgExecuteDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{24}
}
func (m *MsgExecuteDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteDappTx.Merge(m, src)
}
func (m *MsgExecuteDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteDappTx proto.InternalMessageInfo

func (m *MsgExecuteDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgExecuteDappTxResponse struct {
}

func (m *MsgExecuteDappTxResponse) Reset()         { *m = MsgExecuteDappTxResponse{} }
func (m *MsgExecuteDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecuteDappTxResponse) ProtoMessage()    {}
func (*MsgExecuteDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{25}
}
func (m *MsgExecuteDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecuteDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecuteDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecuteDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecuteDappTxResponse.Merge(m, src)
}
func (m *MsgExecuteDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecuteDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecuteDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecuteDappTxResponse proto.InternalMessageInfo

//  allow executors to denounce the current session leader, should take a
//  session id as a parameter as well as a true or false flag to allow vote
//  change.
type MsgDenounceLeaderTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgDenounceLeaderTx) Reset()         { *m = MsgDenounceLeaderTx{} }
func (m *MsgDenounceLeaderTx) String() string { return proto.CompactTextString(m) }
func (*MsgDenounceLeaderTx) ProtoMessage()    {}
func (*MsgDenounceLeaderTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{26}
}
func (m *MsgDenounceLeaderTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDenounceLeaderTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDenounceLeaderTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDenounceLeaderTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDenounceLeaderTx.Merge(m, src)
}
func (m *MsgDenounceLeaderTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgDenounceLeaderTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDenounceLeaderTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDenounceLeaderTx proto.InternalMessageInfo

func (m *MsgDenounceLeaderTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgDenounceLeaderTxResponse struct {
}

func (m *MsgDenounceLeaderTxResponse) Reset()         { *m = MsgDenounceLeaderTxResponse{} }
func (m *MsgDenounceLeaderTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDenounceLeaderTxResponse) ProtoMessage()    {}
func (*MsgDenounceLeaderTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{27}
}
func (m *MsgDenounceLeaderTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDenounceLeaderTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDenounceLeaderTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDenounceLeaderTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDenounceLeaderTxResponse.Merge(m, src)
}
func (m *MsgDenounceLeaderTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDenounceLeaderTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDenounceLeaderTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDenounceLeaderTxResponse proto.InternalMessageInfo

// update CURRENT session state (can only be sent by current session leader),
// this tx MUST include dApp version.
type MsgTransitionDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTransitionDappTx) Reset()         { *m = MsgTransitionDappTx{} }
func (m *MsgTransitionDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgTransitionDappTx) ProtoMessage()    {}
func (*MsgTransitionDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{28}
}
func (m *MsgTransitionDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransitionDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransitionDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransitionDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransitionDappTx.Merge(m, src)
}
func (m *MsgTransitionDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransitionDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransitionDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransitionDappTx proto.InternalMessageInfo

func (m *MsgTransitionDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgTransitionDappTxResponse struct {
}

func (m *MsgTransitionDappTxResponse) Reset()         { *m = MsgTransitionDappTxResponse{} }
func (m *MsgTransitionDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransitionDappTxResponse) ProtoMessage()    {}
func (*MsgTransitionDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{29}
}
func (m *MsgTransitionDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransitionDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransitionDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransitionDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransitionDappTxResponse.Merge(m, src)
}
func (m *MsgTransitionDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransitionDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransitionDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransitionDappTxResponse proto.InternalMessageInfo

// approve CURRENT session state (can only be sent by the verifiers or executors
// who are NOT a leader), this tx MUST include dApp version.
type MsgApproveDappTransitionTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgApproveDappTransitionTx) Reset()         { *m = MsgApproveDappTransitionTx{} }
func (m *MsgApproveDappTransitionTx) String() string { return proto.CompactTextString(m) }
func (*MsgApproveDappTransitionTx) ProtoMessage()    {}
func (*MsgApproveDappTransitionTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{30}
}
func (m *MsgApproveDappTransitionTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveDappTransitionTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveDappTransitionTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveDappTransitionTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveDappTransitionTx.Merge(m, src)
}
func (m *MsgApproveDappTransitionTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveDappTransitionTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveDappTransitionTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveDappTransitionTx proto.InternalMessageInfo

func (m *MsgApproveDappTransitionTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgApproveDappTransitionTxResponse struct {
}

func (m *MsgApproveDappTransitionTxResponse) Reset()         { *m = MsgApproveDappTransitionTxResponse{} }
func (m *MsgApproveDappTransitionTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveDappTransitionTxResponse) ProtoMessage()    {}
func (*MsgApproveDappTransitionTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{31}
}
func (m *MsgApproveDappTransitionTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveDappTransitionTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveDappTransitionTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveDappTransitionTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveDappTransitionTxResponse.Merge(m, src)
}
func (m *MsgApproveDappTransitionTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveDappTransitionTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveDappTransitionTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveDappTransitionTxResponse proto.InternalMessageInfo

// reject session transition and immediately set the state of the current
// session to halted, this tx MUST include dApp version and session id.
type MsgRejectDappTransitionTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgRejectDappTransitionTx) Reset()         { *m = MsgRejectDappTransitionTx{} }
func (m *MsgRejectDappTransitionTx) String() string { return proto.CompactTextString(m) }
func (*MsgRejectDappTransitionTx) ProtoMessage()    {}
func (*MsgRejectDappTransitionTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{32}
}
func (m *MsgRejectDappTransitionTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectDappTransitionTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectDappTransitionTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectDappTransitionTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectDappTransitionTx.Merge(m, src)
}
func (m *MsgRejectDappTransitionTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectDappTransitionTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectDappTransitionTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectDappTransitionTx proto.InternalMessageInfo

func (m *MsgRejectDappTransitionTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgRejectDappTransitionTxResponse struct {
}

func (m *MsgRejectDappTransitionTxResponse) Reset()         { *m = MsgRejectDappTransitionTxResponse{} }
func (m *MsgRejectDappTransitionTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRejectDappTransitionTxResponse) ProtoMessage()    {}
func (*MsgRejectDappTransitionTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{33}
}
func (m *MsgRejectDappTransitionTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRejectDappTransitionTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRejectDappTransitionTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRejectDappTransitionTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRejectDappTransitionTxResponse.Merge(m, src)
}
func (m *MsgRejectDappTransitionTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRejectDappTransitionTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRejectDappTransitionTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRejectDappTransitionTxResponse proto.InternalMessageInfo

// can only be sent by the dApp controllers, allowing to upgrade binaries,
// controlled and modify all other properties
type MsgUpsertDappProposalTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgUpsertDappProposalTx) Reset()         { *m = MsgUpsertDappProposalTx{} }
func (m *MsgUpsertDappProposalTx) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertDappProposalTx) ProtoMessage()    {}
func (*MsgUpsertDappProposalTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{34}
}
func (m *MsgUpsertDappProposalTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertDappProposalTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertDappProposalTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertDappProposalTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertDappProposalTx.Merge(m, src)
}
func (m *MsgUpsertDappProposalTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertDappProposalTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertDappProposalTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertDappProposalTx proto.InternalMessageInfo

func (m *MsgUpsertDappProposalTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgUpsertDappProposalTxResponse struct {
}

func (m *MsgUpsertDappProposalTxResponse) Reset()         { *m = MsgUpsertDappProposalTxResponse{} }
func (m *MsgUpsertDappProposalTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertDappProposalTxResponse) ProtoMessage()    {}
func (*MsgUpsertDappProposalTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{35}
}
func (m *MsgUpsertDappProposalTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertDappProposalTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertDappProposalTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertDappProposalTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertDappProposalTxResponse.Merge(m, src)
}
func (m *MsgUpsertDappProposalTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertDappProposalTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertDappProposalTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertDappProposalTxResponse proto.InternalMessageInfo

// can only be voted by the dApp controllers, accept/reject upsert proposal to
// modify the dApp, executors set or any other properties
type MsgVoteUpsertDappProposalTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgVoteUpsertDappProposalTx) Reset()         { *m = MsgVoteUpsertDappProposalTx{} }
func (m *MsgVoteUpsertDappProposalTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteUpsertDappProposalTx) ProtoMessage()    {}
func (*MsgVoteUpsertDappProposalTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{36}
}
func (m *MsgVoteUpsertDappProposalTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteUpsertDappProposalTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteUpsertDappProposalTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteUpsertDappProposalTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteUpsertDappProposalTx.Merge(m, src)
}
func (m *MsgVoteUpsertDappProposalTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteUpsertDappProposalTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteUpsertDappProposalTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteUpsertDappProposalTx proto.InternalMessageInfo

func (m *MsgVoteUpsertDappProposalTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgVoteUpsertDappProposalTxResponse struct {
}

func (m *MsgVoteUpsertDappProposalTxResponse) Reset()         { *m = MsgVoteUpsertDappProposalTxResponse{} }
func (m *MsgVoteUpsertDappProposalTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteUpsertDappProposalTxResponse) ProtoMessage()    {}
func (*MsgVoteUpsertDappProposalTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{37}
}
func (m *MsgVoteUpsertDappProposalTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteUpsertDappProposalTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteUpsertDappProposalTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteUpsertDappProposalTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteUpsertDappProposalTxResponse.Merge(m, src)
}
func (m *MsgVoteUpsertDappProposalTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteUpsertDappProposalTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteUpsertDappProposalTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteUpsertDappProposalTxResponse proto.InternalMessageInfo

// allow user to manually deposit/transfer/withdrawal funds to / from / within
// ABR and communicate with apps by including xam string message.
type MsgTransferDappTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgTransferDappTx) Reset()         { *m = MsgTransferDappTx{} }
func (m *MsgTransferDappTx) String() string { return proto.CompactTextString(m) }
func (*MsgTransferDappTx) ProtoMessage()    {}
func (*MsgTransferDappTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{38}
}
func (m *MsgTransferDappTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferDappTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferDappTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferDappTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferDappTx.Merge(m, src)
}
func (m *MsgTransferDappTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferDappTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferDappTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferDappTx proto.InternalMessageInfo

func (m *MsgTransferDappTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgTransferDappTxResponse struct {
}

func (m *MsgTransferDappTxResponse) Reset()         { *m = MsgTransferDappTxResponse{} }
func (m *MsgTransferDappTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferDappTxResponse) ProtoMessage()    {}
func (*MsgTransferDappTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{39}
}
func (m *MsgTransferDappTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferDappTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferDappTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferDappTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferDappTxResponse.Merge(m, src)
}
func (m *MsgTransferDappTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferDappTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferDappTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferDappTxResponse proto.InternalMessageInfo

// create new fungible token record in the minting module
type MsgMintCreateFtTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgMintCreateFtTx) Reset()         { *m = MsgMintCreateFtTx{} }
func (m *MsgMintCreateFtTx) String() string { return proto.CompactTextString(m) }
func (*MsgMintCreateFtTx) ProtoMessage()    {}
func (*MsgMintCreateFtTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{40}
}
func (m *MsgMintCreateFtTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCreateFtTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCreateFtTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCreateFtTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCreateFtTx.Merge(m, src)
}
func (m *MsgMintCreateFtTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCreateFtTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCreateFtTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCreateFtTx proto.InternalMessageInfo

func (m *MsgMintCreateFtTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgMintCreateFtTxResponse struct {
}

func (m *MsgMintCreateFtTxResponse) Reset()         { *m = MsgMintCreateFtTxResponse{} }
func (m *MsgMintCreateFtTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintCreateFtTxResponse) ProtoMessage()    {}
func (*MsgMintCreateFtTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{41}
}
func (m *MsgMintCreateFtTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCreateFtTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCreateFtTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCreateFtTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCreateFtTxResponse.Merge(m, src)
}
func (m *MsgMintCreateFtTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCreateFtTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCreateFtTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCreateFtTxResponse proto.InternalMessageInfo

// create new non-fungible token record in the minting module
type MsgMintCreateNftTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgMintCreateNftTx) Reset()         { *m = MsgMintCreateNftTx{} }
func (m *MsgMintCreateNftTx) String() string { return proto.CompactTextString(m) }
func (*MsgMintCreateNftTx) ProtoMessage()    {}
func (*MsgMintCreateNftTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{42}
}
func (m *MsgMintCreateNftTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCreateNftTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCreateNftTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCreateNftTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCreateNftTx.Merge(m, src)
}
func (m *MsgMintCreateNftTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCreateNftTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCreateNftTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCreateNftTx proto.InternalMessageInfo

func (m *MsgMintCreateNftTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgMintCreateNftTxResponse struct {
}

func (m *MsgMintCreateNftTxResponse) Reset()         { *m = MsgMintCreateNftTxResponse{} }
func (m *MsgMintCreateNftTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintCreateNftTxResponse) ProtoMessage()    {}
func (*MsgMintCreateNftTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{43}
}
func (m *MsgMintCreateNftTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintCreateNftTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintCreateNftTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintCreateNftTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintCreateNftTxResponse.Merge(m, src)
}
func (m *MsgMintCreateNftTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintCreateNftTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintCreateNftTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintCreateNftTxResponse proto.InternalMessageInfo

// allow owner to mint new tokens or anyone if the minting-fee is set to value
// other then 0.
type MsgMintIssueTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgMintIssueTx) Reset()         { *m = MsgMintIssueTx{} }
func (m *MsgMintIssueTx) String() string { return proto.CompactTextString(m) }
func (*MsgMintIssueTx) ProtoMessage()    {}
func (*MsgMintIssueTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{44}
}
func (m *MsgMintIssueTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintIssueTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintIssueTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintIssueTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintIssueTx.Merge(m, src)
}
func (m *MsgMintIssueTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintIssueTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintIssueTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintIssueTx proto.InternalMessageInfo

func (m *MsgMintIssueTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgMintIssueTxResponse struct {
}

func (m *MsgMintIssueTxResponse) Reset()         { *m = MsgMintIssueTxResponse{} }
func (m *MsgMintIssueTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintIssueTxResponse) ProtoMessage()    {}
func (*MsgMintIssueTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{45}
}
func (m *MsgMintIssueTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintIssueTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintIssueTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintIssueTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintIssueTxResponse.Merge(m, src)
}
func (m *MsgMintIssueTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintIssueTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintIssueTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintIssueTxResponse proto.InternalMessageInfo

// allow anyone burn the tokens they own
type MsgMintBurnTx struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgMintBurnTx) Reset()         { *m = MsgMintBurnTx{} }
func (m *MsgMintBurnTx) String() string { return proto.CompactTextString(m) }
func (*MsgMintBurnTx) ProtoMessage()    {}
func (*MsgMintBurnTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{46}
}
func (m *MsgMintBurnTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintBurnTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintBurnTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintBurnTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintBurnTx.Merge(m, src)
}
func (m *MsgMintBurnTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintBurnTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintBurnTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintBurnTx proto.InternalMessageInfo

func (m *MsgMintBurnTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type MsgMintBurnTxResponse struct {
}

func (m *MsgMintBurnTxResponse) Reset()         { *m = MsgMintBurnTxResponse{} }
func (m *MsgMintBurnTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintBurnTxResponse) ProtoMessage()    {}
func (*MsgMintBurnTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c30a928a62b31d6d, []int{47}
}
func (m *MsgMintBurnTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintBurnTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintBurnTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintBurnTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintBurnTxResponse.Merge(m, src)
}
func (m *MsgMintBurnTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintBurnTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintBurnTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintBurnTxResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateDappProposal)(nil), "kira.layer2.MsgCreateDappProposal")
	proto.RegisterType((*MsgCreateDappProposalResponse)(nil), "kira.layer2.MsgCreateDappProposalResponse")
	proto.RegisterType((*MsgBondDappProposal)(nil), "kira.layer2.MsgBondDappProposal")
	proto.RegisterType((*MsgBondDappProposalResponse)(nil), "kira.layer2.MsgBondDappProposalResponse")
	proto.RegisterType((*MsgReclaimDappBondProposal)(nil), "kira.layer2.MsgReclaimDappBondProposal")
	proto.RegisterType((*MsgReclaimDappBondProposalResponse)(nil), "kira.layer2.MsgReclaimDappBondProposalResponse")
	proto.RegisterType((*MsgJoinDappTx)(nil), "kira.layer2.MsgJoinDappTx")
	proto.RegisterType((*MsgJoinDappTxResponse)(nil), "kira.layer2.MsgJoinDappTxResponse")
	proto.RegisterType((*MsgExitDapp)(nil), "kira.layer2.MsgExitDapp")
	proto.RegisterType((*MsgExitDappResponse)(nil), "kira.layer2.MsgExitDappResponse")
	proto.RegisterType((*MsgVoteDappOperatorTx)(nil), "kira.layer2.MsgVoteDappOperatorTx")
	proto.RegisterType((*MsgVoteDappOperatorTxResponse)(nil), "kira.layer2.MsgVoteDappOperatorTxResponse")
	proto.RegisterType((*MsgRedeemDappPoolTx)(nil), "kira.layer2.MsgRedeemDappPoolTx")
	proto.RegisterType((*MsgRedeemDappPoolTxResponse)(nil), "kira.layer2.MsgRedeemDappPoolTxResponse")
	proto.RegisterType((*MsgSwapDappPoolTx)(nil), "kira.layer2.MsgSwapDappPoolTx")
	proto.RegisterType((*MsgSwapDappPoolTxResponse)(nil), "kira.layer2.MsgSwapDappPoolTxResponse")
	proto.RegisterType((*MsgConvertDappPoolTx)(nil), "kira.layer2.MsgConvertDappPoolTx")
	proto.RegisterType((*MsgConvertDappPoolTxResponse)(nil), "kira.layer2.MsgConvertDappPoolTxResponse")
	proto.RegisterType((*MsgPauseDappTx)(nil), "kira.layer2.MsgPauseDappTx")
	proto.RegisterType((*MsgPauseDappTxResponse)(nil), "kira.layer2.MsgPauseDappTxResponse")
	proto.RegisterType((*MsgUnPauseDappTx)(nil), "kira.layer2.MsgUnPauseDappTx")
	proto.RegisterType((*MsgUnPauseDappTxResponse)(nil), "kira.layer2.MsgUnPauseDappTxResponse")
	proto.RegisterType((*MsgReactivateDappTx)(nil), "kira.layer2.MsgReactivateDappTx")
	proto.RegisterType((*MsgReactivateDappTxResponse)(nil), "kira.layer2.MsgReactivateDappTxResponse")
	proto.RegisterType((*MsgExecuteDappTx)(nil), "kira.layer2.MsgExecuteDappTx")
	proto.RegisterType((*MsgExecuteDappTxResponse)(nil), "kira.layer2.MsgExecuteDappTxResponse")
	proto.RegisterType((*MsgDenounceLeaderTx)(nil), "kira.layer2.MsgDenounceLeaderTx")
	proto.RegisterType((*MsgDenounceLeaderTxResponse)(nil), "kira.layer2.MsgDenounceLeaderTxResponse")
	proto.RegisterType((*MsgTransitionDappTx)(nil), "kira.layer2.MsgTransitionDappTx")
	proto.RegisterType((*MsgTransitionDappTxResponse)(nil), "kira.layer2.MsgTransitionDappTxResponse")
	proto.RegisterType((*MsgApproveDappTransitionTx)(nil), "kira.layer2.MsgApproveDappTransitionTx")
	proto.RegisterType((*MsgApproveDappTransitionTxResponse)(nil), "kira.layer2.MsgApproveDappTransitionTxResponse")
	proto.RegisterType((*MsgRejectDappTransitionTx)(nil), "kira.layer2.MsgRejectDappTransitionTx")
	proto.RegisterType((*MsgRejectDappTransitionTxResponse)(nil), "kira.layer2.MsgRejectDappTransitionTxResponse")
	proto.RegisterType((*MsgUpsertDappProposalTx)(nil), "kira.layer2.MsgUpsertDappProposalTx")
	proto.RegisterType((*MsgUpsertDappProposalTxResponse)(nil), "kira.layer2.MsgUpsertDappProposalTxResponse")
	proto.RegisterType((*MsgVoteUpsertDappProposalTx)(nil), "kira.layer2.MsgVoteUpsertDappProposalTx")
	proto.RegisterType((*MsgVoteUpsertDappProposalTxResponse)(nil), "kira.layer2.MsgVoteUpsertDappProposalTxResponse")
	proto.RegisterType((*MsgTransferDappTx)(nil), "kira.layer2.MsgTransferDappTx")
	proto.RegisterType((*MsgTransferDappTxResponse)(nil), "kira.layer2.MsgTransferDappTxResponse")
	proto.RegisterType((*MsgMintCreateFtTx)(nil), "kira.layer2.MsgMintCreateFtTx")
	proto.RegisterType((*MsgMintCreateFtTxResponse)(nil), "kira.layer2.MsgMintCreateFtTxResponse")
	proto.RegisterType((*MsgMintCreateNftTx)(nil), "kira.layer2.MsgMintCreateNftTx")
	proto.RegisterType((*MsgMintCreateNftTxResponse)(nil), "kira.layer2.MsgMintCreateNftTxResponse")
	proto.RegisterType((*MsgMintIssueTx)(nil), "kira.layer2.MsgMintIssueTx")
	proto.RegisterType((*MsgMintIssueTxResponse)(nil), "kira.layer2.MsgMintIssueTxResponse")
	proto.RegisterType((*MsgMintBurnTx)(nil), "kira.layer2.MsgMintBurnTx")
	proto.RegisterType((*MsgMintBurnTxResponse)(nil), "kira.layer2.MsgMintBurnTxResponse")
}

func init() { proto.RegisterFile("kira/layer2/tx.proto", fileDescriptor_c30a928a62b31d6d) }

var fileDescriptor_c30a928a62b31d6d = []byte{
	// 1143 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x6e, 0xdc, 0x44,
	0x14, 0x8e, 0x69, 0x54, 0x25, 0x27, 0x6a, 0x69, 0x4c, 0x9a, 0x6c, 0x9d, 0xc6, 0x49, 0x36, 0x4d,
	0xb3, 0xf4, 0x67, 0x0d, 0x29, 0x3c, 0x00, 0x49, 0x1b, 0x09, 0xa8, 0xdb, 0xc8, 0xb4, 0x08, 0x81,
	0x44, 0xe5, 0xac, 0x27, 0xc6, 0x4d, 0xd6, 0x63, 0xcd, 0x78, 0xb7, 0x9b, 0xa7, 0x80, 0x2b, 0xee,
	0xb9, 0xe3, 0x51, 0x7a, 0xd9, 0x4b, 0xc4, 0x45, 0x85, 0x92, 0x47, 0xe0, 0x05, 0xd0, 0x8c, 0x77,
	0x27, 0xf6, 0xfc, 0x78, 0x8d, 0xc4, 0x05, 0x57, 0xc9, 0xf8, 0x7c, 0xe7, 0x9b, 0xcf, 0x33, 0xc7,
	0xe7, 0x7c, 0x5a, 0x58, 0x3a, 0x49, 0x48, 0xe8, 0x9d, 0x86, 0x67, 0x88, 0xec, 0x7a, 0xf9, 0xa8,
	0x9b, 0x11, 0x9c, 0x63, 0x7b, 0x81, 0x3d, 0xed, 0x16, 0x4f, 0x9d, 0xa5, 0x18, 0xc7, 0x98, 0x3f,
	0xf7, 0xd8, 0x7f, 0x05, 0xc4, 0xb9, 0x15, 0x63, 0x1c, 0x9f, 0x22, 0x8f, 0xaf, 0x8e, 0x06, 0xc7,
	0x5e, 0x98, 0x9e, 0x4d, 0x42, 0x3d, 0x4c, 0xfb, 0x98, 0xbe, 0x2a, 0x72, 0x8a, 0xc5, 0x38, 0xd4,
	0x2a, 0x6f, 0x57, 0xfc, 0x29, 0x22, 0xed, 0xdf, 0x2c, 0xb8, 0xe9, 0xd3, 0x78, 0x9f, 0xa0, 0x30,
	0x47, 0x8f, 0xc3, 0x2c, 0x3b, 0x24, 0x38, 0xc3, 0x34, 0x3c, 0xb5, 0x97, 0xe1, 0x2a, 0x45, 0x69,
	0x84, 0x48, 0xcb, 0xda, 0xb0, 0x3a, 0xf3, 0xc1, 0x78, 0x65, 0xdf, 0x87, 0xd9, 0x28, 0xcc, 0xb2,
	0xd6, 0x07, 0x1b, 0x56, 0x67, 0x61, 0x77, 0xb1, 0x5b, 0xd2, 0xdc, 0x65, 0x04, 0x7b, 0xb3, 0x6f,
	0xdf, 0xaf, 0xcf, 0x04, 0x1c, 0x64, 0xef, 0xc3, 0xec, 0x11, 0x4e, 0xa3, 0xd6, 0x15, 0x46, 0xb1,
	0xe7, 0xb1, 0xc8, 0x9f, 0xef, 0xd7, 0x77, 0xe2, 0x24, 0xff, 0x69, 0x70, 0xd4, 0xed, 0xe1, 0xfe,
	0x58, 0xe7, 0xf8, 0xcf, 0x43, 0x1a, 0x9d, 0x78, 0xf9, 0x59, 0x86, 0x68, 0x77, 0x1f, 0x27, 0x69,
	0xc0, 0x93, 0xdb, 0xeb, 0xb0, 0xa6, 0x95, 0x18, 0x20, 0x9a, 0xe1, 0x94, 0xa2, 0xf6, 0xcf, 0x16,
	0x7c, 0xe4, 0xd3, 0x78, 0x0f, 0xa7, 0x51, 0xa3, 0x57, 0x58, 0x85, 0x79, 0xa6, 0xee, 0x55, 0x1a,
	0xf6, 0x11, 0x7f, 0x8f, 0xf9, 0x60, 0x8e, 0x3d, 0x78, 0x16, 0xf6, 0xd1, 0x7f, 0x23, 0x79, 0x0d,
	0x56, 0x35, 0x82, 0x84, 0xe0, 0x5f, 0x2d, 0x70, 0x7c, 0x1a, 0x07, 0xa8, 0x77, 0x1a, 0x26, 0x7d,
	0x7e, 0x6a, 0x38, 0x8d, 0xfe, 0x07, 0xba, 0xef, 0x40, 0xdb, 0xac, 0x4b, 0xc8, 0x7f, 0x03, 0xd7,
	0x7c, 0x1a, 0x7f, 0x85, 0x93, 0x94, 0x41, 0x5e, 0x8c, 0x8c, 0x82, 0x1d, 0x98, 0x43, 0x23, 0xd4,
	0x1b, 0xe4, 0x98, 0x70, 0xbd, 0x73, 0x81, 0x58, 0xb3, 0xd8, 0x10, 0x91, 0xe4, 0x38, 0x41, 0x84,
	0x6b, 0x9e, 0x0b, 0xc4, 0x9a, 0xf1, 0x25, 0x69, 0x8e, 0xc8, 0xa8, 0x35, 0x5b, 0xf0, 0x15, 0xab,
	0xf6, 0x0a, 0x2f, 0xd6, 0xcb, 0x8d, 0x85, 0xa2, 0x6d, 0x58, 0xf0, 0x69, 0xfc, 0x64, 0x94, 0xe4,
	0x2c, 0x60, 0xd2, 0xd3, 0xbe, 0xc9, 0xeb, 0x64, 0x02, 0x13, 0xd9, 0x1e, 0xa7, 0xfd, 0x16, 0x17,
	0xe5, 0xf5, 0x3c, 0x43, 0x24, 0xcc, 0x31, 0x31, 0xbf, 0xd7, 0xb8, 0x22, 0xd5, 0x04, 0xc1, 0xf8,
	0x90, 0x6f, 0x14, 0xa0, 0x08, 0x21, 0x7e, 0x8c, 0x87, 0x18, 0x9f, 0xd6, 0xf0, 0x15, 0xe5, 0x22,
	0xc3, 0x05, 0xdb, 0x7d, 0x58, 0xf4, 0x69, 0xfc, 0xcd, 0x9b, 0x30, 0x6b, 0xc0, 0xb5, 0x0a, 0xb7,
	0x14, 0xb0, 0x60, 0xea, 0xc2, 0x12, 0xfb, 0x94, 0x70, 0x3a, 0x44, 0x24, 0x6f, 0x40, 0xe6, 0xc2,
	0x6d, 0x1d, 0x5e, 0xf0, 0x75, 0xe0, 0xba, 0x4f, 0xe3, 0xc3, 0x70, 0x40, 0x51, 0x7d, 0x29, 0xb4,
	0x5b, 0xb0, 0x5c, 0x45, 0x0a, 0x8e, 0x7b, 0x70, 0xc3, 0xa7, 0xf1, 0xcb, 0xb4, 0x09, 0x8b, 0x03,
	0x2d, 0x19, 0xab, 0x9c, 0x79, 0xd8, 0xcb, 0x93, 0xe1, 0xb8, 0x55, 0x34, 0x38, 0xf3, 0x2a, 0x5c,
	0x52, 0xf5, 0x84, 0x57, 0x6b, 0x33, 0x55, 0x15, 0xac, 0xa4, 0xea, 0x31, 0x4a, 0xf1, 0x20, 0xed,
	0xa1, 0xa7, 0x28, 0x8c, 0x10, 0x99, 0xaa, 0x4a, 0x86, 0x4b, 0x6c, 0x2f, 0x48, 0x98, 0xd2, 0x24,
	0x4f, 0x70, 0xda, 0xe8, 0x1d, 0x65, 0xb8, 0x60, 0xfb, 0x8c, 0x77, 0xa1, 0x2f, 0xb2, 0x8c, 0xe0,
	0x61, 0xa1, 0x5b, 0x20, 0x6b, 0x48, 0x8b, 0x1e, 0x61, 0xc8, 0x12, 0xdc, 0x8f, 0x78, 0x19, 0x06,
	0xe8, 0x35, 0xea, 0xe5, 0x8d, 0xa9, 0xb7, 0x60, 0xd3, 0x98, 0x24, 0x98, 0x3f, 0x85, 0x15, 0x56,
	0x03, 0x19, 0x9d, 0x94, 0xe4, 0xb8, 0x3d, 0xd5, 0xf0, 0x6e, 0xc2, 0xba, 0x21, 0x45, 0xb0, 0x7e,
	0xce, 0x8f, 0x8a, 0x7d, 0xd2, 0xff, 0x8a, 0x79, 0x1b, 0xb6, 0x6a, 0xd2, 0xa4, 0x2f, 0x98, 0xbf,
	0xce, 0x31, 0x22, 0x53, 0x6e, 0xad, 0xf8, 0x82, 0xab, 0x60, 0x89, 0xc9, 0x4f, 0xd2, 0xbc, 0x18,
	0x88, 0x07, 0xf9, 0x54, 0xa6, 0x2a, 0x58, 0x30, 0x3d, 0x00, 0xbb, 0x12, 0x7c, 0x76, 0x5c, 0x47,
	0x75, 0x9b, 0xd7, 0x8a, 0x84, 0x96, 0xfa, 0x00, 0x8b, 0x7e, 0x49, 0xe9, 0x00, 0x4d, 0xed, 0x03,
	0x25, 0xa4, 0xe0, 0xd8, 0xe1, 0x53, 0x85, 0x45, 0xf6, 0x06, 0xa4, 0xae, 0x4a, 0x8a, 0x29, 0x70,
	0x09, 0x9c, 0x30, 0xec, 0xfe, 0xbd, 0x08, 0x57, 0x7c, 0x1a, 0xdb, 0x11, 0xd8, 0x1a, 0x43, 0xd3,
	0xae, 0x58, 0x15, 0xad, 0xa3, 0x70, 0xee, 0x4d, 0xc7, 0x4c, 0x76, 0xb3, 0x7f, 0x84, 0x1b, 0x8a,
	0xe3, 0xd8, 0x90, 0xf3, 0x65, 0x84, 0xd3, 0x99, 0x86, 0x10, 0xfc, 0x14, 0x56, 0x4c, 0x06, 0x61,
	0x47, 0x26, 0x31, 0x00, 0x1d, 0xaf, 0x21, 0x50, 0x6c, 0xfa, 0x14, 0xa0, 0x34, 0xd7, 0x1d, 0x39,
	0xfd, 0x32, 0xe6, 0xb4, 0xcd, 0x31, 0xc1, 0x76, 0x00, 0x73, 0x62, 0x26, 0xb7, 0x64, 0xfc, 0x24,
	0xe2, 0x6c, 0x98, 0x22, 0x82, 0x27, 0x02, 0x5b, 0x33, 0x9d, 0x15, 0x05, 0x2a, 0x46, 0xbd, 0x50,
	0xf3, 0xd0, 0x66, 0x17, 0xaa, 0x4c, 0xec, 0x0d, 0xf5, 0x00, 0xab, 0x08, 0xf5, 0x42, 0x4d, 0x63,
	0xdc, 0xfe, 0x0e, 0xae, 0x4b, 0x33, 0xdc, 0x95, 0x73, 0xab, 0x71, 0xe7, 0x6e, 0x7d, 0x5c, 0x30,
	0x87, 0xb0, 0xa8, 0xce, 0xf4, 0x4d, 0xa5, 0x96, 0x65, 0x88, 0xf3, 0xf1, 0x54, 0x88, 0xd8, 0xe2,
	0x39, 0x2c, 0x94, 0x07, 0xf4, 0xaa, 0x9c, 0x59, 0x0a, 0x3a, 0x5b, 0x35, 0x41, 0x41, 0xf8, 0x12,
	0xae, 0x55, 0x67, 0xfe, 0x9a, 0x9c, 0x55, 0x09, 0x3b, 0xdb, 0xb5, 0xe1, 0xea, 0x25, 0x4a, 0x16,
	0x40, 0x73, 0x89, 0x55, 0x84, 0xee, 0x12, 0xf5, 0xbe, 0x80, 0xc9, 0xae, 0x9a, 0x82, 0x35, 0xb5,
	0x7a, 0x4b, 0x61, 0x55, 0xb6, 0xd6, 0x26, 0x30, 0xd9, 0x8a, 0x47, 0x50, 0x64, 0xcb, 0x08, 0x55,
	0xb6, 0xc9, 0x38, 0x30, 0x7e, 0xc5, 0x35, 0x28, 0xfc, 0x32, 0x42, 0xe5, 0x37, 0x59, 0x09, 0xd6,
	0xac, 0x4c, 0x3e, 0x42, 0x69, 0x56, 0x06, 0xa0, 0xda, 0xac, 0xa6, 0x78, 0x0c, 0x3b, 0x83, 0x65,
	0x83, 0xc1, 0xb8, 0xab, 0xde, 0xa7, 0x0e, 0xe7, 0x74, 0x9b, 0xe1, 0xc4, 0x8e, 0xaf, 0x61, 0x49,
	0x6b, 0x0f, 0xee, 0x28, 0xc5, 0xa9, 0x41, 0x39, 0x0f, 0x9a, 0xa0, 0xc4, 0x5e, 0x43, 0x68, 0x19,
	0xed, 0x48, 0x47, 0xd7, 0xd6, 0xb4, 0x7b, 0x7e, 0xd2, 0x14, 0x59, 0x6e, 0x53, 0x92, 0x51, 0x71,
	0xb5, 0x65, 0x20, 0xe2, 0x6a, 0x9b, 0xd2, 0x7b, 0x17, 0xc6, 0x2c, 0x19, 0x17, 0x85, 0xb9, 0x1a,
	0x57, 0x99, 0xf5, 0x5e, 0xc6, 0xfe, 0x01, 0x3e, 0x94, 0x8d, 0xcc, 0xba, 0x39, 0x95, 0x03, 0x9c,
	0x9d, 0x29, 0x80, 0x72, 0xeb, 0x2b, 0x3b, 0x9b, 0x55, 0x5d, 0xde, 0x38, 0xa8, 0xb6, 0x3e, 0x8d,
	0xd3, 0x61, 0x43, 0xb6, 0x64, 0x73, 0x1c, 0x5d, 0x4a, 0x11, 0x53, 0x87, 0xac, 0xea, 0x7a, 0xf6,
	0x0e, 0x7e, 0x3f, 0x77, 0xad, 0xb7, 0xe7, 0xae, 0xf5, 0xee, 0xdc, 0xb5, 0xfe, 0x3a, 0x77, 0xad,
	0x5f, 0x2e, 0xdc, 0x99, 0x77, 0x17, 0xee, 0xcc, 0x1f, 0x17, 0xee, 0xcc, 0xf7, 0x9d, 0xd2, 0x0f,
	0x00, 0x5f, 0x27, 0x24, 0xdc, 0xc7, 0x04, 0x79, 0x14, 0x9d, 0x84, 0x89, 0x37, 0x12, 0x3f, 0x40,
	0x9d, 0x65, 0x88, 0x1e, 0x5d, 0xe5, 0xbf, 0x08, 0x3d, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0xaa,
	0x4c, 0xc3, 0x49, 0x9c, 0x12, 0x00, 0x00,
}

func (this *MsgCreateDappProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateDappProposal)
	if !ok {
		that2, ok := that.(MsgCreateDappProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if !this.Dapp.Equal(&that1.Dapp) {
		return false
	}
	if !this.Bond.Equal(that1.Bond) {
		return false
	}
	return true
}
func (this *MsgCreateDappProposalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateDappProposalResponse)
	if !ok {
		that2, ok := that.(MsgCreateDappProposalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBondDappProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBondDappProposal)
	if !ok {
		that2, ok := that.(MsgBondDappProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if !this.Bond.Equal(that1.Bond) {
		return false
	}
	return true
}
func (this *MsgBondDappProposalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBondDappProposalResponse)
	if !ok {
		that2, ok := that.(MsgBondDappProposalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgReclaimDappBondProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgReclaimDappBondProposal)
	if !ok {
		that2, ok := that.(MsgReclaimDappBondProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if !this.Bond.Equal(that1.Bond) {
		return false
	}
	return true
}
func (this *MsgReclaimDappBondProposalResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgReclaimDappBondProposalResponse)
	if !ok {
		that2, ok := that.(MsgReclaimDappBondProposalResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgJoinDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgJoinDappTx)
	if !ok {
		that2, ok := that.(MsgJoinDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Executor != that1.Executor {
		return false
	}
	if this.Verifier != that1.Verifier {
		return false
	}
	if this.Interx != that1.Interx {
		return false
	}
	return true
}
func (this *MsgJoinDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgJoinDappTxResponse)
	if !ok {
		that2, ok := that.(MsgJoinDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgExitDapp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgExitDapp)
	if !ok {
		that2, ok := that.(MsgExitDapp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgExitDappResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgExitDappResponse)
	if !ok {
		that2, ok := that.(MsgExitDappResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgVoteDappOperatorTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgVoteDappOperatorTx)
	if !ok {
		that2, ok := that.(MsgVoteDappOperatorTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgVoteDappOperatorTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgVoteDappOperatorTxResponse)
	if !ok {
		that2, ok := that.(MsgVoteDappOperatorTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRedeemDappPoolTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRedeemDappPoolTx)
	if !ok {
		that2, ok := that.(MsgRedeemDappPoolTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgRedeemDappPoolTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRedeemDappPoolTxResponse)
	if !ok {
		that2, ok := that.(MsgRedeemDappPoolTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgSwapDappPoolTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSwapDappPoolTx)
	if !ok {
		that2, ok := that.(MsgSwapDappPoolTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgSwapDappPoolTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgSwapDappPoolTxResponse)
	if !ok {
		that2, ok := that.(MsgSwapDappPoolTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgConvertDappPoolTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertDappPoolTx)
	if !ok {
		that2, ok := that.(MsgConvertDappPoolTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgConvertDappPoolTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgConvertDappPoolTxResponse)
	if !ok {
		that2, ok := that.(MsgConvertDappPoolTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgPauseDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgPauseDappTx)
	if !ok {
		that2, ok := that.(MsgPauseDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgPauseDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgPauseDappTxResponse)
	if !ok {
		that2, ok := that.(MsgPauseDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgUnPauseDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUnPauseDappTx)
	if !ok {
		that2, ok := that.(MsgUnPauseDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgUnPauseDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUnPauseDappTxResponse)
	if !ok {
		that2, ok := that.(MsgUnPauseDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgReactivateDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgReactivateDappTx)
	if !ok {
		that2, ok := that.(MsgReactivateDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgReactivateDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgReactivateDappTxResponse)
	if !ok {
		that2, ok := that.(MsgReactivateDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgExecuteDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgExecuteDappTx)
	if !ok {
		that2, ok := that.(MsgExecuteDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgExecuteDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgExecuteDappTxResponse)
	if !ok {
		that2, ok := that.(MsgExecuteDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDenounceLeaderTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDenounceLeaderTx)
	if !ok {
		that2, ok := that.(MsgDenounceLeaderTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgDenounceLeaderTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDenounceLeaderTxResponse)
	if !ok {
		that2, ok := that.(MsgDenounceLeaderTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgTransitionDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTransitionDappTx)
	if !ok {
		that2, ok := that.(MsgTransitionDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgTransitionDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTransitionDappTxResponse)
	if !ok {
		that2, ok := that.(MsgTransitionDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgApproveDappTransitionTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgApproveDappTransitionTx)
	if !ok {
		that2, ok := that.(MsgApproveDappTransitionTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgApproveDappTransitionTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgApproveDappTransitionTxResponse)
	if !ok {
		that2, ok := that.(MsgApproveDappTransitionTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRejectDappTransitionTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRejectDappTransitionTx)
	if !ok {
		that2, ok := that.(MsgRejectDappTransitionTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgRejectDappTransitionTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRejectDappTransitionTxResponse)
	if !ok {
		that2, ok := that.(MsgRejectDappTransitionTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgUpsertDappProposalTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpsertDappProposalTx)
	if !ok {
		that2, ok := that.(MsgUpsertDappProposalTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgUpsertDappProposalTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgUpsertDappProposalTxResponse)
	if !ok {
		that2, ok := that.(MsgUpsertDappProposalTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgVoteUpsertDappProposalTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgVoteUpsertDappProposalTx)
	if !ok {
		that2, ok := that.(MsgVoteUpsertDappProposalTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgVoteUpsertDappProposalTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgVoteUpsertDappProposalTxResponse)
	if !ok {
		that2, ok := that.(MsgVoteUpsertDappProposalTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgTransferDappTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTransferDappTx)
	if !ok {
		that2, ok := that.(MsgTransferDappTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgTransferDappTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTransferDappTxResponse)
	if !ok {
		that2, ok := that.(MsgTransferDappTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgMintCreateFtTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintCreateFtTx)
	if !ok {
		that2, ok := that.(MsgMintCreateFtTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgMintCreateFtTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintCreateFtTxResponse)
	if !ok {
		that2, ok := that.(MsgMintCreateFtTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgMintCreateNftTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintCreateNftTx)
	if !ok {
		that2, ok := that.(MsgMintCreateNftTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgMintCreateNftTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintCreateNftTxResponse)
	if !ok {
		that2, ok := that.(MsgMintCreateNftTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgMintIssueTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintIssueTx)
	if !ok {
		that2, ok := that.(MsgMintIssueTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgMintIssueTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintIssueTxResponse)
	if !ok {
		that2, ok := that.(MsgMintIssueTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgMintBurnTx) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintBurnTx)
	if !ok {
		that2, ok := that.(MsgMintBurnTx)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	return true
}
func (this *MsgMintBurnTxResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgMintBurnTxResponse)
	if !ok {
		that2, ok := that.(MsgMintBurnTxResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateDappProposal(ctx context.Context, in *MsgCreateDappProposal, opts ...grpc.CallOption) (*MsgCreateDappProposalResponse, error)
	BondDappProposal(ctx context.Context, in *MsgBondDappProposal, opts ...grpc.CallOption) (*MsgBondDappProposalResponse, error)
	ReclaimDappBondProposal(ctx context.Context, in *MsgReclaimDappBondProposal, opts ...grpc.CallOption) (*MsgReclaimDappBondProposalResponse, error)
	JoinDappTx(ctx context.Context, in *MsgJoinDappTx, opts ...grpc.CallOption) (*MsgJoinDappTxResponse, error)
	ExitDapp(ctx context.Context, in *MsgExitDapp, opts ...grpc.CallOption) (*MsgExitDappResponse, error)
	VoteDappOperatorTx(ctx context.Context, in *MsgVoteDappOperatorTx, opts ...grpc.CallOption) (*MsgVoteDappOperatorTxResponse, error)
	RedeemDappPoolTx(ctx context.Context, in *MsgRedeemDappPoolTx, opts ...grpc.CallOption) (*MsgRedeemDappPoolTxResponse, error)
	SwapDappPoolTx(ctx context.Context, in *MsgSwapDappPoolTx, opts ...grpc.CallOption) (*MsgSwapDappPoolTxResponse, error)
	ConvertDappPoolTx(ctx context.Context, in *MsgConvertDappPoolTx, opts ...grpc.CallOption) (*MsgConvertDappPoolTxResponse, error)
	PauseDappTx(ctx context.Context, in *MsgPauseDappTx, opts ...grpc.CallOption) (*MsgPauseDappTxResponse, error)
	UnPauseDappTx(ctx context.Context, in *MsgUnPauseDappTx, opts ...grpc.CallOption) (*MsgUnPauseDappTxResponse, error)
	ReactivateDappTx(ctx context.Context, in *MsgReactivateDappTx, opts ...grpc.CallOption) (*MsgReactivateDappTxResponse, error)
	ExecuteDappTx(ctx context.Context, in *MsgExecuteDappTx, opts ...grpc.CallOption) (*MsgExecuteDappTxResponse, error)
	DenounceLeaderTx(ctx context.Context, in *MsgDenounceLeaderTx, opts ...grpc.CallOption) (*MsgDenounceLeaderTxResponse, error)
	TransitionDappTx(ctx context.Context, in *MsgTransitionDappTx, opts ...grpc.CallOption) (*MsgTransitionDappTxResponse, error)
	ApproveDappTransitionTx(ctx context.Context, in *MsgApproveDappTransitionTx, opts ...grpc.CallOption) (*MsgApproveDappTransitionTxResponse, error)
	RejectDappTransitionTx(ctx context.Context, in *MsgRejectDappTransitionTx, opts ...grpc.CallOption) (*MsgRejectDappTransitionTxResponse, error)
	UpsertDappProposalTx(ctx context.Context, in *MsgUpsertDappProposalTx, opts ...grpc.CallOption) (*MsgUpsertDappProposalTxResponse, error)
	VoteUpsertDappProposalTx(ctx context.Context, in *MsgVoteUpsertDappProposalTx, opts ...grpc.CallOption) (*MsgVoteUpsertDappProposalTxResponse, error)
	TransferDappTx(ctx context.Context, in *MsgTransferDappTx, opts ...grpc.CallOption) (*MsgTransferDappTxResponse, error)
	MintCreateFtTx(ctx context.Context, in *MsgMintCreateFtTx, opts ...grpc.CallOption) (*MsgMintCreateFtTxResponse, error)
	MintCreateNftTx(ctx context.Context, in *MsgMintCreateNftTx, opts ...grpc.CallOption) (*MsgMintCreateNftTxResponse, error)
	MintIssueTx(ctx context.Context, in *MsgMintIssueTx, opts ...grpc.CallOption) (*MsgMintIssueTxResponse, error)
	MintBurnTx(ctx context.Context, in *MsgMintBurnTx, opts ...grpc.CallOption) (*MsgMintBurnTxResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateDappProposal(ctx context.Context, in *MsgCreateDappProposal, opts ...grpc.CallOption) (*MsgCreateDappProposalResponse, error) {
	out := new(MsgCreateDappProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/CreateDappProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BondDappProposal(ctx context.Context, in *MsgBondDappProposal, opts ...grpc.CallOption) (*MsgBondDappProposalResponse, error) {
	out := new(MsgBondDappProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/BondDappProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReclaimDappBondProposal(ctx context.Context, in *MsgReclaimDappBondProposal, opts ...grpc.CallOption) (*MsgReclaimDappBondProposalResponse, error) {
	out := new(MsgReclaimDappBondProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ReclaimDappBondProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) JoinDappTx(ctx context.Context, in *MsgJoinDappTx, opts ...grpc.CallOption) (*MsgJoinDappTxResponse, error) {
	out := new(MsgJoinDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/JoinDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExitDapp(ctx context.Context, in *MsgExitDapp, opts ...grpc.CallOption) (*MsgExitDappResponse, error) {
	out := new(MsgExitDappResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ExitDapp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteDappOperatorTx(ctx context.Context, in *MsgVoteDappOperatorTx, opts ...grpc.CallOption) (*MsgVoteDappOperatorTxResponse, error) {
	out := new(MsgVoteDappOperatorTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/VoteDappOperatorTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemDappPoolTx(ctx context.Context, in *MsgRedeemDappPoolTx, opts ...grpc.CallOption) (*MsgRedeemDappPoolTxResponse, error) {
	out := new(MsgRedeemDappPoolTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/RedeemDappPoolTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SwapDappPoolTx(ctx context.Context, in *MsgSwapDappPoolTx, opts ...grpc.CallOption) (*MsgSwapDappPoolTxResponse, error) {
	out := new(MsgSwapDappPoolTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/SwapDappPoolTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ConvertDappPoolTx(ctx context.Context, in *MsgConvertDappPoolTx, opts ...grpc.CallOption) (*MsgConvertDappPoolTxResponse, error) {
	out := new(MsgConvertDappPoolTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ConvertDappPoolTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseDappTx(ctx context.Context, in *MsgPauseDappTx, opts ...grpc.CallOption) (*MsgPauseDappTxResponse, error) {
	out := new(MsgPauseDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/PauseDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnPauseDappTx(ctx context.Context, in *MsgUnPauseDappTx, opts ...grpc.CallOption) (*MsgUnPauseDappTxResponse, error) {
	out := new(MsgUnPauseDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/UnPauseDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReactivateDappTx(ctx context.Context, in *MsgReactivateDappTx, opts ...grpc.CallOption) (*MsgReactivateDappTxResponse, error) {
	out := new(MsgReactivateDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ReactivateDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ExecuteDappTx(ctx context.Context, in *MsgExecuteDappTx, opts ...grpc.CallOption) (*MsgExecuteDappTxResponse, error) {
	out := new(MsgExecuteDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ExecuteDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DenounceLeaderTx(ctx context.Context, in *MsgDenounceLeaderTx, opts ...grpc.CallOption) (*MsgDenounceLeaderTxResponse, error) {
	out := new(MsgDenounceLeaderTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/DenounceLeaderTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransitionDappTx(ctx context.Context, in *MsgTransitionDappTx, opts ...grpc.CallOption) (*MsgTransitionDappTxResponse, error) {
	out := new(MsgTransitionDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/TransitionDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveDappTransitionTx(ctx context.Context, in *MsgApproveDappTransitionTx, opts ...grpc.CallOption) (*MsgApproveDappTransitionTxResponse, error) {
	out := new(MsgApproveDappTransitionTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/ApproveDappTransitionTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RejectDappTransitionTx(ctx context.Context, in *MsgRejectDappTransitionTx, opts ...grpc.CallOption) (*MsgRejectDappTransitionTxResponse, error) {
	out := new(MsgRejectDappTransitionTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/RejectDappTransitionTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpsertDappProposalTx(ctx context.Context, in *MsgUpsertDappProposalTx, opts ...grpc.CallOption) (*MsgUpsertDappProposalTxResponse, error) {
	out := new(MsgUpsertDappProposalTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/UpsertDappProposalTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteUpsertDappProposalTx(ctx context.Context, in *MsgVoteUpsertDappProposalTx, opts ...grpc.CallOption) (*MsgVoteUpsertDappProposalTxResponse, error) {
	out := new(MsgVoteUpsertDappProposalTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/VoteUpsertDappProposalTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferDappTx(ctx context.Context, in *MsgTransferDappTx, opts ...grpc.CallOption) (*MsgTransferDappTxResponse, error) {
	out := new(MsgTransferDappTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/TransferDappTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCreateFtTx(ctx context.Context, in *MsgMintCreateFtTx, opts ...grpc.CallOption) (*MsgMintCreateFtTxResponse, error) {
	out := new(MsgMintCreateFtTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/MintCreateFtTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintCreateNftTx(ctx context.Context, in *MsgMintCreateNftTx, opts ...grpc.CallOption) (*MsgMintCreateNftTxResponse, error) {
	out := new(MsgMintCreateNftTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/MintCreateNftTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintIssueTx(ctx context.Context, in *MsgMintIssueTx, opts ...grpc.CallOption) (*MsgMintIssueTxResponse, error) {
	out := new(MsgMintIssueTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/MintIssueTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintBurnTx(ctx context.Context, in *MsgMintBurnTx, opts ...grpc.CallOption) (*MsgMintBurnTxResponse, error) {
	out := new(MsgMintBurnTxResponse)
	err := c.cc.Invoke(ctx, "/kira.layer2.Msg/MintBurnTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateDappProposal(context.Context, *MsgCreateDappProposal) (*MsgCreateDappProposalResponse, error)
	BondDappProposal(context.Context, *MsgBondDappProposal) (*MsgBondDappProposalResponse, error)
	ReclaimDappBondProposal(context.Context, *MsgReclaimDappBondProposal) (*MsgReclaimDappBondProposalResponse, error)
	JoinDappTx(context.Context, *MsgJoinDappTx) (*MsgJoinDappTxResponse, error)
	ExitDapp(context.Context, *MsgExitDapp) (*MsgExitDappResponse, error)
	VoteDappOperatorTx(context.Context, *MsgVoteDappOperatorTx) (*MsgVoteDappOperatorTxResponse, error)
	RedeemDappPoolTx(context.Context, *MsgRedeemDappPoolTx) (*MsgRedeemDappPoolTxResponse, error)
	SwapDappPoolTx(context.Context, *MsgSwapDappPoolTx) (*MsgSwapDappPoolTxResponse, error)
	ConvertDappPoolTx(context.Context, *MsgConvertDappPoolTx) (*MsgConvertDappPoolTxResponse, error)
	PauseDappTx(context.Context, *MsgPauseDappTx) (*MsgPauseDappTxResponse, error)
	UnPauseDappTx(context.Context, *MsgUnPauseDappTx) (*MsgUnPauseDappTxResponse, error)
	ReactivateDappTx(context.Context, *MsgReactivateDappTx) (*MsgReactivateDappTxResponse, error)
	ExecuteDappTx(context.Context, *MsgExecuteDappTx) (*MsgExecuteDappTxResponse, error)
	DenounceLeaderTx(context.Context, *MsgDenounceLeaderTx) (*MsgDenounceLeaderTxResponse, error)
	TransitionDappTx(context.Context, *MsgTransitionDappTx) (*MsgTransitionDappTxResponse, error)
	ApproveDappTransitionTx(context.Context, *MsgApproveDappTransitionTx) (*MsgApproveDappTransitionTxResponse, error)
	RejectDappTransitionTx(context.Context, *MsgRejectDappTransitionTx) (*MsgRejectDappTransitionTxResponse, error)
	UpsertDappProposalTx(context.Context, *MsgUpsertDappProposalTx) (*MsgUpsertDappProposalTxResponse, error)
	VoteUpsertDappProposalTx(context.Context, *MsgVoteUpsertDappProposalTx) (*MsgVoteUpsertDappProposalTxResponse, error)
	TransferDappTx(context.Context, *MsgTransferDappTx) (*MsgTransferDappTxResponse, error)
	MintCreateFtTx(context.Context, *MsgMintCreateFtTx) (*MsgMintCreateFtTxResponse, error)
	MintCreateNftTx(context.Context, *MsgMintCreateNftTx) (*MsgMintCreateNftTxResponse, error)
	MintIssueTx(context.Context, *MsgMintIssueTx) (*MsgMintIssueTxResponse, error)
	MintBurnTx(context.Context, *MsgMintBurnTx) (*MsgMintBurnTxResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateDappProposal(ctx context.Context, req *MsgCreateDappProposal) (*MsgCreateDappProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDappProposal not implemented")
}
func (*UnimplementedMsgServer) BondDappProposal(ctx context.Context, req *MsgBondDappProposal) (*MsgBondDappProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BondDappProposal not implemented")
}
func (*UnimplementedMsgServer) ReclaimDappBondProposal(ctx context.Context, req *MsgReclaimDappBondProposal) (*MsgReclaimDappBondProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReclaimDappBondProposal not implemented")
}
func (*UnimplementedMsgServer) JoinDappTx(ctx context.Context, req *MsgJoinDappTx) (*MsgJoinDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDappTx not implemented")
}
func (*UnimplementedMsgServer) ExitDapp(ctx context.Context, req *MsgExitDapp) (*MsgExitDappResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitDapp not implemented")
}
func (*UnimplementedMsgServer) VoteDappOperatorTx(ctx context.Context, req *MsgVoteDappOperatorTx) (*MsgVoteDappOperatorTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteDappOperatorTx not implemented")
}
func (*UnimplementedMsgServer) RedeemDappPoolTx(ctx context.Context, req *MsgRedeemDappPoolTx) (*MsgRedeemDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemDappPoolTx not implemented")
}
func (*UnimplementedMsgServer) SwapDappPoolTx(ctx context.Context, req *MsgSwapDappPoolTx) (*MsgSwapDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapDappPoolTx not implemented")
}
func (*UnimplementedMsgServer) ConvertDappPoolTx(ctx context.Context, req *MsgConvertDappPoolTx) (*MsgConvertDappPoolTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertDappPoolTx not implemented")
}
func (*UnimplementedMsgServer) PauseDappTx(ctx context.Context, req *MsgPauseDappTx) (*MsgPauseDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseDappTx not implemented")
}
func (*UnimplementedMsgServer) UnPauseDappTx(ctx context.Context, req *MsgUnPauseDappTx) (*MsgUnPauseDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnPauseDappTx not implemented")
}
func (*UnimplementedMsgServer) ReactivateDappTx(ctx context.Context, req *MsgReactivateDappTx) (*MsgReactivateDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateDappTx not implemented")
}
func (*UnimplementedMsgServer) ExecuteDappTx(ctx context.Context, req *MsgExecuteDappTx) (*MsgExecuteDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteDappTx not implemented")
}
func (*UnimplementedMsgServer) DenounceLeaderTx(ctx context.Context, req *MsgDenounceLeaderTx) (*MsgDenounceLeaderTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenounceLeaderTx not implemented")
}
func (*UnimplementedMsgServer) TransitionDappTx(ctx context.Context, req *MsgTransitionDappTx) (*MsgTransitionDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransitionDappTx not implemented")
}
func (*UnimplementedMsgServer) ApproveDappTransitionTx(ctx context.Context, req *MsgApproveDappTransitionTx) (*MsgApproveDappTransitionTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDappTransitionTx not implemented")
}
func (*UnimplementedMsgServer) RejectDappTransitionTx(ctx context.Context, req *MsgRejectDappTransitionTx) (*MsgRejectDappTransitionTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectDappTransitionTx not implemented")
}
func (*UnimplementedMsgServer) UpsertDappProposalTx(ctx context.Context, req *MsgUpsertDappProposalTx) (*MsgUpsertDappProposalTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertDappProposalTx not implemented")
}
func (*UnimplementedMsgServer) VoteUpsertDappProposalTx(ctx context.Context, req *MsgVoteUpsertDappProposalTx) (*MsgVoteUpsertDappProposalTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteUpsertDappProposalTx not implemented")
}
func (*UnimplementedMsgServer) TransferDappTx(ctx context.Context, req *MsgTransferDappTx) (*MsgTransferDappTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferDappTx not implemented")
}
func (*UnimplementedMsgServer) MintCreateFtTx(ctx context.Context, req *MsgMintCreateFtTx) (*MsgMintCreateFtTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCreateFtTx not implemented")
}
func (*UnimplementedMsgServer) MintCreateNftTx(ctx context.Context, req *MsgMintCreateNftTx) (*MsgMintCreateNftTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintCreateNftTx not implemented")
}
func (*UnimplementedMsgServer) MintIssueTx(ctx context.Context, req *MsgMintIssueTx) (*MsgMintIssueTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintIssueTx not implemented")
}
func (*UnimplementedMsgServer) MintBurnTx(ctx context.Context, req *MsgMintBurnTx) (*MsgMintBurnTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintBurnTx not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateDappProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateDappProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateDappProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/CreateDappProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateDappProposal(ctx, req.(*MsgCreateDappProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BondDappProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBondDappProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BondDappProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/BondDappProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BondDappProposal(ctx, req.(*MsgBondDappProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReclaimDappBondProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReclaimDappBondProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReclaimDappBondProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ReclaimDappBondProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReclaimDappBondProposal(ctx, req.(*MsgReclaimDappBondProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_JoinDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/JoinDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinDappTx(ctx, req.(*MsgJoinDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExitDapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExitDapp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExitDapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ExitDapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExitDapp(ctx, req.(*MsgExitDapp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteDappOperatorTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteDappOperatorTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteDappOperatorTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/VoteDappOperatorTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteDappOperatorTx(ctx, req.(*MsgVoteDappOperatorTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/RedeemDappPoolTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemDappPoolTx(ctx, req.(*MsgRedeemDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SwapDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSwapDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SwapDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/SwapDappPoolTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SwapDappPoolTx(ctx, req.(*MsgSwapDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ConvertDappPoolTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgConvertDappPoolTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ConvertDappPoolTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ConvertDappPoolTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ConvertDappPoolTx(ctx, req.(*MsgConvertDappPoolTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/PauseDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseDappTx(ctx, req.(*MsgPauseDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnPauseDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnPauseDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnPauseDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/UnPauseDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnPauseDappTx(ctx, req.(*MsgUnPauseDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReactivateDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReactivateDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReactivateDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ReactivateDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReactivateDappTx(ctx, req.(*MsgReactivateDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ExecuteDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecuteDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ExecuteDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ExecuteDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ExecuteDappTx(ctx, req.(*MsgExecuteDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DenounceLeaderTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDenounceLeaderTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DenounceLeaderTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/DenounceLeaderTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DenounceLeaderTx(ctx, req.(*MsgDenounceLeaderTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransitionDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransitionDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransitionDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/TransitionDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransitionDappTx(ctx, req.(*MsgTransitionDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveDappTransitionTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveDappTransitionTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveDappTransitionTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/ApproveDappTransitionTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveDappTransitionTx(ctx, req.(*MsgApproveDappTransitionTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RejectDappTransitionTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRejectDappTransitionTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RejectDappTransitionTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/RejectDappTransitionTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RejectDappTransitionTx(ctx, req.(*MsgRejectDappTransitionTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpsertDappProposalTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpsertDappProposalTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpsertDappProposalTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/UpsertDappProposalTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpsertDappProposalTx(ctx, req.(*MsgUpsertDappProposalTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteUpsertDappProposalTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteUpsertDappProposalTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteUpsertDappProposalTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/VoteUpsertDappProposalTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteUpsertDappProposalTx(ctx, req.(*MsgVoteUpsertDappProposalTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferDappTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferDappTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferDappTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/TransferDappTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferDappTx(ctx, req.(*MsgTransferDappTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCreateFtTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCreateFtTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCreateFtTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/MintCreateFtTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCreateFtTx(ctx, req.(*MsgMintCreateFtTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintCreateNftTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintCreateNftTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintCreateNftTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/MintCreateNftTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintCreateNftTx(ctx, req.(*MsgMintCreateNftTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintIssueTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintIssueTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintIssueTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/MintIssueTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintIssueTx(ctx, req.(*MsgMintIssueTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintBurnTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintBurnTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintBurnTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.layer2.Msg/MintBurnTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintBurnTx(ctx, req.(*MsgMintBurnTx))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.layer2.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDappProposal",
			Handler:    _Msg_CreateDappProposal_Handler,
		},
		{
			MethodName: "BondDappProposal",
			Handler:    _Msg_BondDappProposal_Handler,
		},
		{
			MethodName: "ReclaimDappBondProposal",
			Handler:    _Msg_ReclaimDappBondProposal_Handler,
		},
		{
			MethodName: "JoinDappTx",
			Handler:    _Msg_JoinDappTx_Handler,
		},
		{
			MethodName: "ExitDapp",
			Handler:    _Msg_ExitDapp_Handler,
		},
		{
			MethodName: "VoteDappOperatorTx",
			Handler:    _Msg_VoteDappOperatorTx_Handler,
		},
		{
			MethodName: "RedeemDappPoolTx",
			Handler:    _Msg_RedeemDappPoolTx_Handler,
		},
		{
			MethodName: "SwapDappPoolTx",
			Handler:    _Msg_SwapDappPoolTx_Handler,
		},
		{
			MethodName: "ConvertDappPoolTx",
			Handler:    _Msg_ConvertDappPoolTx_Handler,
		},
		{
			MethodName: "PauseDappTx",
			Handler:    _Msg_PauseDappTx_Handler,
		},
		{
			MethodName: "UnPauseDappTx",
			Handler:    _Msg_UnPauseDappTx_Handler,
		},
		{
			MethodName: "ReactivateDappTx",
			Handler:    _Msg_ReactivateDappTx_Handler,
		},
		{
			MethodName: "ExecuteDappTx",
			Handler:    _Msg_ExecuteDappTx_Handler,
		},
		{
			MethodName: "DenounceLeaderTx",
			Handler:    _Msg_DenounceLeaderTx_Handler,
		},
		{
			MethodName: "TransitionDappTx",
			Handler:    _Msg_TransitionDappTx_Handler,
		},
		{
			MethodName: "ApproveDappTransitionTx",
			Handler:    _Msg_ApproveDappTransitionTx_Handler,
		},
		{
			MethodName: "RejectDappTransitionTx",
			Handler:    _Msg_RejectDappTransitionTx_Handler,
		},
		{
			MethodName: "UpsertDappProposalTx",
			Handler:    _Msg_UpsertDappProposalTx_Handler,
		},
		{
			MethodName: "VoteUpsertDappProposalTx",
			Handler:    _Msg_VoteUpsertDappProposalTx_Handler,
		},
		{
			MethodName: "TransferDappTx",
			Handler:    _Msg_TransferDappTx_Handler,
		},
		{
			MethodName: "MintCreateFtTx",
			Handler:    _Msg_MintCreateFtTx_Handler,
		},
		{
			MethodName: "MintCreateNftTx",
			Handler:    _Msg_MintCreateNftTx_Handler,
		},
		{
			MethodName: "MintIssueTx",
			Handler:    _Msg_MintIssueTx_Handler,
		},
		{
			MethodName: "MintBurnTx",
			Handler:    _Msg_MintBurnTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/layer2/tx.proto",
}

func (m *MsgCreateDappProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDappProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDappProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Dapp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateDappProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateDappProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateDappProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBondDappProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondDappProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondDappProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBondDappProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondDappProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondDappProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReclaimDappBondProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReclaimDappBondProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReclaimDappBondProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReclaimDappBondProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReclaimDappBondProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReclaimDappBondProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgJoinDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Interx) > 0 {
		i -= len(m.Interx)
		copy(dAtA[i:], m.Interx)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Interx)))
		i--
		dAtA[i] = 0x22
	}
	if m.Verifier {
		i--
		if m.Verifier {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Executor {
		i--
		if m.Executor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExitDapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitDapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitDapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExitDappResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExitDappResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExitDappResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteDappOperatorTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDappOperatorTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDappOperatorTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteDappOperatorTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteDappOperatorTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteDappOperatorTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedeemDappPoolTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemDappPoolTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemDappPoolTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemDappPoolTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemDappPoolTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemDappPoolTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSwapDappPoolTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapDappPoolTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapDappPoolTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSwapDappPoolTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSwapDappPoolTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSwapDappPoolTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgConvertDappPoolTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertDappPoolTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertDappPoolTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgConvertDappPoolTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgConvertDappPoolTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgConvertDappPoolTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnPauseDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnPauseDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnPauseDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnPauseDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnPauseDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnPauseDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReactivateDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReactivateDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReactivateDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReactivateDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReactivateDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReactivateDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecuteDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecuteDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecuteDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecuteDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDenounceLeaderTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDenounceLeaderTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDenounceLeaderTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDenounceLeaderTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDenounceLeaderTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDenounceLeaderTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransitionDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransitionDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransitionDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransitionDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransitionDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransitionDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApproveDappTransitionTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveDappTransitionTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveDappTransitionTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveDappTransitionTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveDappTransitionTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveDappTransitionTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRejectDappTransitionTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectDappTransitionTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectDappTransitionTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRejectDappTransitionTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRejectDappTransitionTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRejectDappTransitionTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpsertDappProposalTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertDappProposalTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertDappProposalTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertDappProposalTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertDappProposalTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertDappProposalTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteUpsertDappProposalTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteUpsertDappProposalTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteUpsertDappProposalTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteUpsertDappProposalTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteUpsertDappProposalTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteUpsertDappProposalTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferDappTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferDappTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferDappTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferDappTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferDappTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferDappTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintCreateFtTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCreateFtTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCreateFtTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintCreateFtTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCreateFtTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCreateFtTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintCreateNftTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCreateNftTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCreateNftTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintCreateNftTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintCreateNftTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintCreateNftTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintIssueTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintIssueTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintIssueTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintIssueTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintIssueTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintIssueTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintBurnTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintBurnTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintBurnTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintBurnTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintBurnTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintBurnTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateDappProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Dapp.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Bond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateDappProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBondDappProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBondDappProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReclaimDappBondProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgReclaimDappBondProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgJoinDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Executor {
		n += 2
	}
	if m.Verifier {
		n += 2
	}
	l = len(m.Interx)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgJoinDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExitDapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExitDappResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteDappOperatorTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteDappOperatorTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedeemDappPoolTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRedeemDappPoolTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSwapDappPoolTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSwapDappPoolTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgConvertDappPoolTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgConvertDappPoolTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPauseDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnPauseDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnPauseDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReactivateDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReactivateDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecuteDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgExecuteDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDenounceLeaderTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDenounceLeaderTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransitionDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransitionDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApproveDappTransitionTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveDappTransitionTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRejectDappTransitionTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRejectDappTransitionTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpsertDappProposalTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpsertDappProposalTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteUpsertDappProposalTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgVoteUpsertDappProposalTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferDappTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferDappTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintCreateFtTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintCreateFtTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintCreateNftTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintCreateNftTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintIssueTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintIssueTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintBurnTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgMintBurnTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateDappProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDappProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDappProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dapp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Dapp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateDappProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateDappProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateDappProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondDappProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondDappProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondDappProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondDappProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondDappProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondDappProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReclaimDappBondProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReclaimDappBondProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReclaimDappBondProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReclaimDappBondProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReclaimDappBondProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReclaimDappBondProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executor = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verifier = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitDapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitDapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitDapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExitDappResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExitDappResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExitDappResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDappOperatorTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDappOperatorTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDappOperatorTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteDappOperatorTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteDappOperatorTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteDappOperatorTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemDappPoolTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemDappPoolTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemDappPoolTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemDappPoolTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemDappPoolTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemDappPoolTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapDappPoolTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapDappPoolTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapDappPoolTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSwapDappPoolTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSwapDappPoolTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSwapDappPoolTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertDappPoolTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertDappPoolTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertDappPoolTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgConvertDappPoolTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgConvertDappPoolTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgConvertDappPoolTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnPauseDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnPauseDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnPauseDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnPauseDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnPauseDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnPauseDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReactivateDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReactivateDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReactivateDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReactivateDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReactivateDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReactivateDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecuteDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecuteDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecuteDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDenounceLeaderTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDenounceLeaderTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDenounceLeaderTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDenounceLeaderTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDenounceLeaderTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDenounceLeaderTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransitionDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransitionDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransitionDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransitionDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransitionDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransitionDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveDappTransitionTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveDappTransitionTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveDappTransitionTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveDappTransitionTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveDappTransitionTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveDappTransitionTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectDappTransitionTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectDappTransitionTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectDappTransitionTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRejectDappTransitionTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRejectDappTransitionTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRejectDappTransitionTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertDappProposalTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertDappProposalTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertDappProposalTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertDappProposalTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertDappProposalTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertDappProposalTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteUpsertDappProposalTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteUpsertDappProposalTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteUpsertDappProposalTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteUpsertDappProposalTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteUpsertDappProposalTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteUpsertDappProposalTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferDappTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferDappTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferDappTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferDappTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferDappTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferDappTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCreateFtTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCreateFtTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCreateFtTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCreateFtTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCreateFtTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCreateFtTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCreateNftTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCreateNftTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCreateNftTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintCreateNftTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintCreateNftTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintCreateNftTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintIssueTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintIssueTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintIssueTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintIssueTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintIssueTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintIssueTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintBurnTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintBurnTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintBurnTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintBurnTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintBurnTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintBurnTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
