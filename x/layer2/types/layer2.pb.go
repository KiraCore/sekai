// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/layer2/layer2.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DappStatus int32

const (
	Bootstrap DappStatus = 0
	Active    DappStatus = 1
	Paused    DappStatus = 2
	Halted    DappStatus = 3
)

var DappStatus_name = map[int32]string{
	0: "BOOTSTRAP",
	1: "ACTIVE",
	2: "PAUSED",
	3: "HALTED",
}

var DappStatus_value = map[string]int32{
	"BOOTSTRAP": 0,
	"ACTIVE":    1,
	"PAUSED":    2,
	"HALTED":    3,
}

func (x DappStatus) String() string {
	return proto.EnumName(DappStatus_name, int32(x))
}

func (DappStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{0}
}

type OperatorStatus int32

const (
	OperatorActive   OperatorStatus = 0
	OperatorPaused   OperatorStatus = 1
	OperatorInactive OperatorStatus = 2
	OperatorExiting  OperatorStatus = 3
	OperatorJailed   OperatorStatus = 4
)

var OperatorStatus_name = map[int32]string{
	0: "OPERATOR_ACTIVE",
	1: "OPERATOR_PAUSED",
	2: "OPERATOR_INACTIVE",
	3: "OPERATOR_EXITING",
	4: "OPERATOR_JAILED",
}

var OperatorStatus_value = map[string]int32{
	"OPERATOR_ACTIVE":   0,
	"OPERATOR_PAUSED":   1,
	"OPERATOR_INACTIVE": 2,
	"OPERATOR_EXITING":  3,
	"OPERATOR_JAILED":   4,
}

func (x OperatorStatus) String() string {
	return proto.EnumName(OperatorStatus_name, int32(x))
}

func (OperatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{1}
}

type SessionStatus int32

const (
	SessionUnscheduled SessionStatus = 0
	SessionScheduled   SessionStatus = 1
	SessionOngoing     SessionStatus = 2
	SessionAccepted    SessionStatus = 3
	SessionDenounced   SessionStatus = 4
	SessionHalted      SessionStatus = 5
	SessionFailed      SessionStatus = 6
)

var SessionStatus_name = map[int32]string{
	0: "SESSION_UNSCHEDULED",
	1: "SESSION_SCHEDULED",
	2: "SESSION_ONGOING",
	3: "SESSION_ACCEPTED",
	4: "SESSION_DENOUNCED",
	5: "SESSION_HALTED",
	6: "SESSION_FAILED",
}

var SessionStatus_value = map[string]int32{
	"SESSION_UNSCHEDULED": 0,
	"SESSION_SCHEDULED":   1,
	"SESSION_ONGOING":     2,
	"SESSION_ACCEPTED":    3,
	"SESSION_DENOUNCED":   4,
	"SESSION_HALTED":      5,
	"SESSION_FAILED":      6,
}

func (x SessionStatus) String() string {
	return proto.EnumName(SessionStatus_name, int32(x))
}

func (SessionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{2}
}

type AccountRange struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Roles     []uint64 `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
}

func (m *AccountRange) Reset()         { *m = AccountRange{} }
func (m *AccountRange) String() string { return proto.CompactTextString(m) }
func (*AccountRange) ProtoMessage()    {}
func (*AccountRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{0}
}
func (m *AccountRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRange.Merge(m, src)
}
func (m *AccountRange) XXX_Size() int {
	return m.Size()
}
func (m *AccountRange) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRange.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRange proto.InternalMessageInfo

func (m *AccountRange) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AccountRange) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Controllers struct {
	Whitelist AccountRange `protobuf:"bytes,1,opt,name=whitelist,proto3" json:"whitelist"`
	Blacklist AccountRange `protobuf:"bytes,2,opt,name=blacklist,proto3" json:"blacklist"`
}

func (m *Controllers) Reset()         { *m = Controllers{} }
func (m *Controllers) String() string { return proto.CompactTextString(m) }
func (*Controllers) ProtoMessage()    {}
func (*Controllers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{1}
}
func (m *Controllers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Controllers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Controllers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Controllers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Controllers.Merge(m, src)
}
func (m *Controllers) XXX_Size() int {
	return m.Size()
}
func (m *Controllers) XXX_DiscardUnknown() {
	xxx_messageInfo_Controllers.DiscardUnknown(m)
}

var xxx_messageInfo_Controllers proto.InternalMessageInfo

func (m *Controllers) GetWhitelist() AccountRange {
	if m != nil {
		return m.Whitelist
	}
	return AccountRange{}
}

func (m *Controllers) GetBlacklist() AccountRange {
	if m != nil {
		return m.Blacklist
	}
	return AccountRange{}
}

type BinaryInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash      string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Source    string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BinaryInfo) Reset()         { *m = BinaryInfo{} }
func (m *BinaryInfo) String() string { return proto.CompactTextString(m) }
func (*BinaryInfo) ProtoMessage()    {}
func (*BinaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{2}
}
func (m *BinaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryInfo.Merge(m, src)
}
func (m *BinaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *BinaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryInfo proto.InternalMessageInfo

func (m *BinaryInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BinaryInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BinaryInfo) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *BinaryInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type LpPoolConfig struct {
	Ratio   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	Deposit string                                 `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Drip    uint64                                 `protobuf:"varint,3,opt,name=drip,proto3" json:"drip,omitempty"`
}

func (m *LpPoolConfig) Reset()         { *m = LpPoolConfig{} }
func (m *LpPoolConfig) String() string { return proto.CompactTextString(m) }
func (*LpPoolConfig) ProtoMessage()    {}
func (*LpPoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{3}
}
func (m *LpPoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LpPoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LpPoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LpPoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LpPoolConfig.Merge(m, src)
}
func (m *LpPoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *LpPoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LpPoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LpPoolConfig proto.InternalMessageInfo

func (m *LpPoolConfig) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *LpPoolConfig) GetDrip() uint64 {
	if m != nil {
		return m.Drip
	}
	return 0
}

type IssuanceConfig struct {
	Deposit  string                                 `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Premint  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=premint,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"premint"`
	Postmint github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=postmint,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"postmint"`
	Time     uint64                                 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *IssuanceConfig) Reset()         { *m = IssuanceConfig{} }
func (m *IssuanceConfig) String() string { return proto.CompactTextString(m) }
func (*IssuanceConfig) ProtoMessage()    {}
func (*IssuanceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{4}
}
func (m *IssuanceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuanceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuanceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuanceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuanceConfig.Merge(m, src)
}
func (m *IssuanceConfig) XXX_Size() int {
	return m.Size()
}
func (m *IssuanceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuanceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IssuanceConfig proto.InternalMessageInfo

func (m *IssuanceConfig) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *IssuanceConfig) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Dapp struct {
	Name                string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Denom               string                                  `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Description         string                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Website             string                                  `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	Logo                string                                  `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Social              string                                  `protobuf:"bytes,6,opt,name=social,proto3" json:"social,omitempty"`
	Docs                string                                  `protobuf:"bytes,7,opt,name=docs,proto3" json:"docs,omitempty"`
	Controllers         Controllers                             `protobuf:"bytes,8,opt,name=controllers,proto3" json:"controllers"`
	Bin                 []BinaryInfo                            `protobuf:"bytes,9,rep,name=bin,proto3" json:"bin"`
	Pool                LpPoolConfig                            `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool"`
	Issuance            IssuanceConfig                          `protobuf:"bytes,11,opt,name=issuance,proto3" json:"issuance"`
	UpdateTimeMax       uint64                                  `protobuf:"varint,12,opt,name=update_time_max,json=updateTimeMax,proto3" json:"update_time_max,omitempty"`
	ExecutorsMin        uint64                                  `protobuf:"varint,13,opt,name=executors_min,json=executorsMin,proto3" json:"executors_min,omitempty"`
	ExecutorsMax        uint64                                  `protobuf:"varint,14,opt,name=executors_max,json=executorsMax,proto3" json:"executors_max,omitempty"`
	VerifiersMin        uint64                                  `protobuf:"varint,15,opt,name=verifiers_min,json=verifiersMin,proto3" json:"verifiers_min,omitempty"`
	TotalBond           github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,16,opt,name=total_bond,json=totalBond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_bond"`
	CreationTime        uint64                                  `protobuf:"varint,17,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	Status              DappStatus                              `protobuf:"varint,18,opt,name=status,proto3,enum=kira.layer2.DappStatus" json:"status,omitempty"`
	VoteQuorum          github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,19,opt,name=vote_quorum,json=voteQuorum,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"vote_quorum"`
	VotePeriod          uint64                                  `protobuf:"varint,20,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	VoteEnactment       uint64                                  `protobuf:"varint,21,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`
	LiquidationStart    uint64                                  `protobuf:"varint,22,opt,name=liquidation_start,json=liquidationStart,proto3" json:"liquidation_start,omitempty"`
	PoolFee             github_com_cosmos_cosmos_sdk_types.Dec  `protobuf:"bytes,23,opt,name=pool_fee,json=poolFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pool_fee"`
	TeamReserve         string                                  `protobuf:"bytes,24,opt,name=team_reserve,json=teamReserve,proto3" json:"team_reserve,omitempty"`
	PremintTime         uint64                                  `protobuf:"varint,25,opt,name=premint_time,json=premintTime,proto3" json:"premint_time,omitempty"`
	PostMintPaid        bool                                    `protobuf:"varint,26,opt,name=post_mint_paid,json=postMintPaid,proto3" json:"post_mint_paid,omitempty"`
	EnableBondVerifiers bool                                    `protobuf:"varint,27,opt,name=enable_bond_verifiers,json=enableBondVerifiers,proto3" json:"enable_bond_verifiers,omitempty"`
}

func (m *Dapp) Reset()         { *m = Dapp{} }
func (m *Dapp) String() string { return proto.CompactTextString(m) }
func (*Dapp) ProtoMessage()    {}
func (*Dapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{5}
}
func (m *Dapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dapp.Merge(m, src)
}
func (m *Dapp) XXX_Size() int {
	return m.Size()
}
func (m *Dapp) XXX_DiscardUnknown() {
	xxx_messageInfo_Dapp.DiscardUnknown(m)
}

var xxx_messageInfo_Dapp proto.InternalMessageInfo

func (m *Dapp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dapp) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Dapp) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dapp) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Dapp) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Dapp) GetSocial() string {
	if m != nil {
		return m.Social
	}
	return ""
}

func (m *Dapp) GetDocs() string {
	if m != nil {
		return m.Docs
	}
	return ""
}

func (m *Dapp) GetControllers() Controllers {
	if m != nil {
		return m.Controllers
	}
	return Controllers{}
}

func (m *Dapp) GetBin() []BinaryInfo {
	if m != nil {
		return m.Bin
	}
	return nil
}

func (m *Dapp) GetPool() LpPoolConfig {
	if m != nil {
		return m.Pool
	}
	return LpPoolConfig{}
}

func (m *Dapp) GetIssuance() IssuanceConfig {
	if m != nil {
		return m.Issuance
	}
	return IssuanceConfig{}
}

func (m *Dapp) GetUpdateTimeMax() uint64 {
	if m != nil {
		return m.UpdateTimeMax
	}
	return 0
}

func (m *Dapp) GetExecutorsMin() uint64 {
	if m != nil {
		return m.ExecutorsMin
	}
	return 0
}

func (m *Dapp) GetExecutorsMax() uint64 {
	if m != nil {
		return m.ExecutorsMax
	}
	return 0
}

func (m *Dapp) GetVerifiersMin() uint64 {
	if m != nil {
		return m.VerifiersMin
	}
	return 0
}

func (m *Dapp) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

func (m *Dapp) GetStatus() DappStatus {
	if m != nil {
		return m.Status
	}
	return Bootstrap
}

func (m *Dapp) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *Dapp) GetVoteEnactment() uint64 {
	if m != nil {
		return m.VoteEnactment
	}
	return 0
}

func (m *Dapp) GetLiquidationStart() uint64 {
	if m != nil {
		return m.LiquidationStart
	}
	return 0
}

func (m *Dapp) GetTeamReserve() string {
	if m != nil {
		return m.TeamReserve
	}
	return ""
}

func (m *Dapp) GetPremintTime() uint64 {
	if m != nil {
		return m.PremintTime
	}
	return 0
}

func (m *Dapp) GetPostMintPaid() bool {
	if m != nil {
		return m.PostMintPaid
	}
	return false
}

func (m *Dapp) GetEnableBondVerifiers() bool {
	if m != nil {
		return m.EnableBondVerifiers
	}
	return false
}

type UserDappBond struct {
	User     string                                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	DappName string                                  `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Bond     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bond"`
}

func (m *UserDappBond) Reset()         { *m = UserDappBond{} }
func (m *UserDappBond) String() string { return proto.CompactTextString(m) }
func (*UserDappBond) ProtoMessage()    {}
func (*UserDappBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{6}
}
func (m *UserDappBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDappBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDappBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDappBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDappBond.Merge(m, src)
}
func (m *UserDappBond) XXX_Size() int {
	return m.Size()
}
func (m *UserDappBond) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDappBond.DiscardUnknown(m)
}

var xxx_messageInfo_UserDappBond proto.InternalMessageInfo

func (m *UserDappBond) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserDappBond) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

type DappOperator struct {
	DappName         string                                 `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Operator         string                                 `protobuf:"bytes,2,opt,name=operator,proto3" json:"operator,omitempty"`
	Executor         bool                                   `protobuf:"varint,3,opt,name=executor,proto3" json:"executor,omitempty"`
	Verifier         bool                                   `protobuf:"varint,4,opt,name=verifier,proto3" json:"verifier,omitempty"`
	Interx           string                                 `protobuf:"bytes,5,opt,name=interx,proto3" json:"interx,omitempty"`
	Status           OperatorStatus                         `protobuf:"varint,6,opt,name=status,proto3,enum=kira.layer2.OperatorStatus" json:"status,omitempty"`
	Rank             int64                                  `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	Streak           int64                                  `protobuf:"varint,8,opt,name=streak,proto3" json:"streak,omitempty"`
	Mischance        int64                                  `protobuf:"varint,9,opt,name=mischance,proto3" json:"mischance,omitempty"`
	VerifiedSessions int64                                  `protobuf:"varint,10,opt,name=verified_sessions,json=verifiedSessions,proto3" json:"verified_sessions,omitempty"`
	MissedSessions   int64                                  `protobuf:"varint,11,opt,name=missed_sessions,json=missedSessions,proto3" json:"missed_sessions,omitempty"`
	BondedLpAmount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=bonded_lp_amount,json=bondedLpAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"bonded_lp_amount"`
}

func (m *DappOperator) Reset()         { *m = DappOperator{} }
func (m *DappOperator) String() string { return proto.CompactTextString(m) }
func (*DappOperator) ProtoMessage()    {}
func (*DappOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{7}
}
func (m *DappOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DappOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DappOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DappOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DappOperator.Merge(m, src)
}
func (m *DappOperator) XXX_Size() int {
	return m.Size()
}
func (m *DappOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_DappOperator.DiscardUnknown(m)
}

var xxx_messageInfo_DappOperator proto.InternalMessageInfo

func (m *DappOperator) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *DappOperator) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *DappOperator) GetExecutor() bool {
	if m != nil {
		return m.Executor
	}
	return false
}

func (m *DappOperator) GetVerifier() bool {
	if m != nil {
		return m.Verifier
	}
	return false
}

func (m *DappOperator) GetInterx() string {
	if m != nil {
		return m.Interx
	}
	return ""
}

func (m *DappOperator) GetStatus() OperatorStatus {
	if m != nil {
		return m.Status
	}
	return OperatorActive
}

func (m *DappOperator) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *DappOperator) GetStreak() int64 {
	if m != nil {
		return m.Streak
	}
	return 0
}

func (m *DappOperator) GetMischance() int64 {
	if m != nil {
		return m.Mischance
	}
	return 0
}

func (m *DappOperator) GetVerifiedSessions() int64 {
	if m != nil {
		return m.VerifiedSessions
	}
	return 0
}

func (m *DappOperator) GetMissedSessions() int64 {
	if m != nil {
		return m.MissedSessions
	}
	return 0
}

type DappLeaderDenouncement struct {
	DappName     string `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Leader       string `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"`
	Sender       string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	Denouncement string `protobuf:"bytes,4,opt,name=denouncement,proto3" json:"denouncement,omitempty"`
}

func (m *DappLeaderDenouncement) Reset()         { *m = DappLeaderDenouncement{} }
func (m *DappLeaderDenouncement) String() string { return proto.CompactTextString(m) }
func (*DappLeaderDenouncement) ProtoMessage()    {}
func (*DappLeaderDenouncement) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{8}
}
func (m *DappLeaderDenouncement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DappLeaderDenouncement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DappLeaderDenouncement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DappLeaderDenouncement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DappLeaderDenouncement.Merge(m, src)
}
func (m *DappLeaderDenouncement) XXX_Size() int {
	return m.Size()
}
func (m *DappLeaderDenouncement) XXX_DiscardUnknown() {
	xxx_messageInfo_DappLeaderDenouncement.DiscardUnknown(m)
}

var xxx_messageInfo_DappLeaderDenouncement proto.InternalMessageInfo

func (m *DappLeaderDenouncement) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *DappLeaderDenouncement) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *DappLeaderDenouncement) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *DappLeaderDenouncement) GetDenouncement() string {
	if m != nil {
		return m.Denouncement
	}
	return ""
}

type DappSession struct {
	Leader          string        `protobuf:"bytes,1,opt,name=leader,proto3" json:"leader,omitempty"`
	Start           uint64        `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	StatusHash      string        `protobuf:"bytes,3,opt,name=status_hash,json=statusHash,proto3" json:"status_hash,omitempty"`
	Status          SessionStatus `protobuf:"varint,4,opt,name=status,proto3,enum=kira.layer2.SessionStatus" json:"status,omitempty"`
	Gateway         string        `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	OnchainMessages []*types.Any  `protobuf:"bytes,6,rep,name=onchain_messages,json=onchainMessages,proto3" json:"onchain_messages,omitempty"`
}

func (m *DappSession) Reset()         { *m = DappSession{} }
func (m *DappSession) String() string { return proto.CompactTextString(m) }
func (*DappSession) ProtoMessage()    {}
func (*DappSession) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{9}
}
func (m *DappSession) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DappSession) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DappSession.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DappSession) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DappSession.Merge(m, src)
}
func (m *DappSession) XXX_Size() int {
	return m.Size()
}
func (m *DappSession) XXX_DiscardUnknown() {
	xxx_messageInfo_DappSession.DiscardUnknown(m)
}

var xxx_messageInfo_DappSession proto.InternalMessageInfo

func (m *DappSession) GetLeader() string {
	if m != nil {
		return m.Leader
	}
	return ""
}

func (m *DappSession) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *DappSession) GetStatusHash() string {
	if m != nil {
		return m.StatusHash
	}
	return ""
}

func (m *DappSession) GetStatus() SessionStatus {
	if m != nil {
		return m.Status
	}
	return SessionUnscheduled
}

func (m *DappSession) GetGateway() string {
	if m != nil {
		return m.Gateway
	}
	return ""
}

func (m *DappSession) GetOnchainMessages() []*types.Any {
	if m != nil {
		return m.OnchainMessages
	}
	return nil
}

type DappSessionApproval struct {
	DappName   string `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Approver   string `protobuf:"bytes,2,opt,name=approver,proto3" json:"approver,omitempty"`
	IsApproved bool   `protobuf:"varint,3,opt,name=is_approved,json=isApproved,proto3" json:"is_approved,omitempty"`
}

func (m *DappSessionApproval) Reset()         { *m = DappSessionApproval{} }
func (m *DappSessionApproval) String() string { return proto.CompactTextString(m) }
func (*DappSessionApproval) ProtoMessage()    {}
func (*DappSessionApproval) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{10}
}
func (m *DappSessionApproval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DappSessionApproval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DappSessionApproval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DappSessionApproval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DappSessionApproval.Merge(m, src)
}
func (m *DappSessionApproval) XXX_Size() int {
	return m.Size()
}
func (m *DappSessionApproval) XXX_DiscardUnknown() {
	xxx_messageInfo_DappSessionApproval.DiscardUnknown(m)
}

var xxx_messageInfo_DappSessionApproval proto.InternalMessageInfo

func (m *DappSessionApproval) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *DappSessionApproval) GetApprover() string {
	if m != nil {
		return m.Approver
	}
	return ""
}

func (m *DappSessionApproval) GetIsApproved() bool {
	if m != nil {
		return m.IsApproved
	}
	return false
}

type ExecutionRegistrar struct {
	DappName    string       `protobuf:"bytes,1,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	PrevSession *DappSession `protobuf:"bytes,2,opt,name=prev_session,json=prevSession,proto3" json:"prev_session,omitempty"`
	CurrSession *DappSession `protobuf:"bytes,3,opt,name=curr_session,json=currSession,proto3" json:"curr_session,omitempty"`
	NextSession *DappSession `protobuf:"bytes,4,opt,name=next_session,json=nextSession,proto3" json:"next_session,omitempty"`
}

func (m *ExecutionRegistrar) Reset()         { *m = ExecutionRegistrar{} }
func (m *ExecutionRegistrar) String() string { return proto.CompactTextString(m) }
func (*ExecutionRegistrar) ProtoMessage()    {}
func (*ExecutionRegistrar) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{11}
}
func (m *ExecutionRegistrar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionRegistrar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionRegistrar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionRegistrar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionRegistrar.Merge(m, src)
}
func (m *ExecutionRegistrar) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionRegistrar) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionRegistrar.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionRegistrar proto.InternalMessageInfo

func (m *ExecutionRegistrar) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *ExecutionRegistrar) GetPrevSession() *DappSession {
	if m != nil {
		return m.PrevSession
	}
	return nil
}

func (m *ExecutionRegistrar) GetCurrSession() *DappSession {
	if m != nil {
		return m.CurrSession
	}
	return nil
}

func (m *ExecutionRegistrar) GetNextSession() *DappSession {
	if m != nil {
		return m.NextSession
	}
	return nil
}

type BridgeRegistrarHelper struct {
	NextUser  uint64 `protobuf:"varint,1,opt,name=next_user,json=nextUser,proto3" json:"next_user,omitempty"`
	NextXam   uint64 `protobuf:"varint,2,opt,name=next_xam,json=nextXam,proto3" json:"next_xam,omitempty"`
	NextToken uint64 `protobuf:"varint,3,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
}

func (m *BridgeRegistrarHelper) Reset()         { *m = BridgeRegistrarHelper{} }
func (m *BridgeRegistrarHelper) String() string { return proto.CompactTextString(m) }
func (*BridgeRegistrarHelper) ProtoMessage()    {}
func (*BridgeRegistrarHelper) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{12}
}
func (m *BridgeRegistrarHelper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeRegistrarHelper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeRegistrarHelper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeRegistrarHelper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeRegistrarHelper.Merge(m, src)
}
func (m *BridgeRegistrarHelper) XXX_Size() int {
	return m.Size()
}
func (m *BridgeRegistrarHelper) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeRegistrarHelper.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeRegistrarHelper proto.InternalMessageInfo

func (m *BridgeRegistrarHelper) GetNextUser() uint64 {
	if m != nil {
		return m.NextUser
	}
	return 0
}

func (m *BridgeRegistrarHelper) GetNextXam() uint64 {
	if m != nil {
		return m.NextXam
	}
	return 0
}

func (m *BridgeRegistrarHelper) GetNextToken() uint64 {
	if m != nil {
		return m.NextToken
	}
	return 0
}

type BridgeRegistrar struct {
	Helper   *BridgeRegistrarHelper `protobuf:"bytes,1,opt,name=helper,proto3" json:"helper,omitempty"`
	Accounts []BridgeAccount        `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts"`
	Tokens   []BridgeToken          `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens"`
	Xams     []XAM                  `protobuf:"bytes,4,rep,name=xams,proto3" json:"xams"`
}

func (m *BridgeRegistrar) Reset()         { *m = BridgeRegistrar{} }
func (m *BridgeRegistrar) String() string { return proto.CompactTextString(m) }
func (*BridgeRegistrar) ProtoMessage()    {}
func (*BridgeRegistrar) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{13}
}
func (m *BridgeRegistrar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeRegistrar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeRegistrar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeRegistrar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeRegistrar.Merge(m, src)
}
func (m *BridgeRegistrar) XXX_Size() int {
	return m.Size()
}
func (m *BridgeRegistrar) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeRegistrar.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeRegistrar proto.InternalMessageInfo

func (m *BridgeRegistrar) GetHelper() *BridgeRegistrarHelper {
	if m != nil {
		return m.Helper
	}
	return nil
}

func (m *BridgeRegistrar) GetAccounts() []BridgeAccount {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *BridgeRegistrar) GetTokens() []BridgeToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *BridgeRegistrar) GetXams() []XAM {
	if m != nil {
		return m.Xams
	}
	return nil
}

type BridgeBalance struct {
	BridgeTokenIndex uint64                                 `protobuf:"varint,1,opt,name=bridge_token_index,json=bridgeTokenIndex,proto3" json:"bridge_token_index,omitempty"`
	Amount           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *BridgeBalance) Reset()         { *m = BridgeBalance{} }
func (m *BridgeBalance) String() string { return proto.CompactTextString(m) }
func (*BridgeBalance) ProtoMessage()    {}
func (*BridgeBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{14}
}
func (m *BridgeBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeBalance.Merge(m, src)
}
func (m *BridgeBalance) XXX_Size() int {
	return m.Size()
}
func (m *BridgeBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeBalance.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeBalance proto.InternalMessageInfo

func (m *BridgeBalance) GetBridgeTokenIndex() uint64 {
	if m != nil {
		return m.BridgeTokenIndex
	}
	return 0
}

type BridgeAccount struct {
	Index    uint64          `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Address  string          `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	DappName string          `protobuf:"bytes,3,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Balances []BridgeBalance `protobuf:"bytes,4,rep,name=balances,proto3" json:"balances"`
}

func (m *BridgeAccount) Reset()         { *m = BridgeAccount{} }
func (m *BridgeAccount) String() string { return proto.CompactTextString(m) }
func (*BridgeAccount) ProtoMessage()    {}
func (*BridgeAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{15}
}
func (m *BridgeAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeAccount.Merge(m, src)
}
func (m *BridgeAccount) XXX_Size() int {
	return m.Size()
}
func (m *BridgeAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeAccount.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeAccount proto.InternalMessageInfo

func (m *BridgeAccount) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BridgeAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BridgeAccount) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func (m *BridgeAccount) GetBalances() []BridgeBalance {
	if m != nil {
		return m.Balances
	}
	return nil
}

type BridgeToken struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *BridgeToken) Reset()         { *m = BridgeToken{} }
func (m *BridgeToken) String() string { return proto.CompactTextString(m) }
func (*BridgeToken) ProtoMessage()    {}
func (*BridgeToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{16}
}
func (m *BridgeToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeToken.Merge(m, src)
}
func (m *BridgeToken) XXX_Size() int {
	return m.Size()
}
func (m *BridgeToken) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeToken.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeToken proto.InternalMessageInfo

func (m *BridgeToken) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *BridgeToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type XAMRequest struct {
	Amounts         []BridgeBalance `protobuf:"bytes,1,rep,name=amounts,proto3" json:"amounts"`
	SourceDapp      uint64          `protobuf:"varint,2,opt,name=source_dapp,json=sourceDapp,proto3" json:"source_dapp,omitempty"`
	SourceAccount   uint64          `protobuf:"varint,3,opt,name=source_account,json=sourceAccount,proto3" json:"source_account,omitempty"`
	DestDapp        uint64          `protobuf:"varint,4,opt,name=dest_dapp,json=destDapp,proto3" json:"dest_dapp,omitempty"`
	DestBeneficiary uint64          `protobuf:"varint,5,opt,name=dest_beneficiary,json=destBeneficiary,proto3" json:"dest_beneficiary,omitempty"`
	Xam             string          `protobuf:"bytes,6,opt,name=xam,proto3" json:"xam,omitempty"`
}

func (m *XAMRequest) Reset()         { *m = XAMRequest{} }
func (m *XAMRequest) String() string { return proto.CompactTextString(m) }
func (*XAMRequest) ProtoMessage()    {}
func (*XAMRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{17}
}
func (m *XAMRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XAMRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XAMRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XAMRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAMRequest.Merge(m, src)
}
func (m *XAMRequest) XXX_Size() int {
	return m.Size()
}
func (m *XAMRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XAMRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XAMRequest proto.InternalMessageInfo

func (m *XAMRequest) GetAmounts() []BridgeBalance {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *XAMRequest) GetSourceDapp() uint64 {
	if m != nil {
		return m.SourceDapp
	}
	return 0
}

func (m *XAMRequest) GetSourceAccount() uint64 {
	if m != nil {
		return m.SourceAccount
	}
	return 0
}

func (m *XAMRequest) GetDestDapp() uint64 {
	if m != nil {
		return m.DestDapp
	}
	return 0
}

func (m *XAMRequest) GetDestBeneficiary() uint64 {
	if m != nil {
		return m.DestBeneficiary
	}
	return 0
}

func (m *XAMRequest) GetXam() string {
	if m != nil {
		return m.Xam
	}
	return ""
}

type XAMResponse struct {
	Xid uint64 `protobuf:"varint,1,opt,name=xid,proto3" json:"xid,omitempty"`
	Irc uint64 `protobuf:"varint,2,opt,name=irc,proto3" json:"irc,omitempty"`
	Src uint64 `protobuf:"varint,3,opt,name=src,proto3" json:"src,omitempty"`
	Drc uint64 `protobuf:"varint,4,opt,name=drc,proto3" json:"drc,omitempty"`
	Irm uint64 `protobuf:"varint,5,opt,name=irm,proto3" json:"irm,omitempty"`
	Srm uint64 `protobuf:"varint,6,opt,name=srm,proto3" json:"srm,omitempty"`
	Drm uint64 `protobuf:"varint,7,opt,name=drm,proto3" json:"drm,omitempty"`
}

func (m *XAMResponse) Reset()         { *m = XAMResponse{} }
func (m *XAMResponse) String() string { return proto.CompactTextString(m) }
func (*XAMResponse) ProtoMessage()    {}
func (*XAMResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{18}
}
func (m *XAMResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XAMResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XAMResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XAMResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAMResponse.Merge(m, src)
}
func (m *XAMResponse) XXX_Size() int {
	return m.Size()
}
func (m *XAMResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XAMResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XAMResponse proto.InternalMessageInfo

func (m *XAMResponse) GetXid() uint64 {
	if m != nil {
		return m.Xid
	}
	return 0
}

func (m *XAMResponse) GetIrc() uint64 {
	if m != nil {
		return m.Irc
	}
	return 0
}

func (m *XAMResponse) GetSrc() uint64 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *XAMResponse) GetDrc() uint64 {
	if m != nil {
		return m.Drc
	}
	return 0
}

func (m *XAMResponse) GetIrm() uint64 {
	if m != nil {
		return m.Irm
	}
	return 0
}

func (m *XAMResponse) GetSrm() uint64 {
	if m != nil {
		return m.Srm
	}
	return 0
}

func (m *XAMResponse) GetDrm() uint64 {
	if m != nil {
		return m.Drm
	}
	return 0
}

type XAM struct {
	ReqTime uint64      `protobuf:"varint,1,opt,name=req_time,json=reqTime,proto3" json:"req_time,omitempty"`
	Req     XAMRequest  `protobuf:"bytes,2,opt,name=req,proto3" json:"req"`
	Res     XAMResponse `protobuf:"bytes,3,opt,name=res,proto3" json:"res"`
}

func (m *XAM) Reset()         { *m = XAM{} }
func (m *XAM) String() string { return proto.CompactTextString(m) }
func (*XAM) ProtoMessage()    {}
func (*XAM) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{19}
}
func (m *XAM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *XAM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_XAM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *XAM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XAM.Merge(m, src)
}
func (m *XAM) XXX_Size() int {
	return m.Size()
}
func (m *XAM) XXX_DiscardUnknown() {
	xxx_messageInfo_XAM.DiscardUnknown(m)
}

var xxx_messageInfo_XAM proto.InternalMessageInfo

func (m *XAM) GetReqTime() uint64 {
	if m != nil {
		return m.ReqTime
	}
	return 0
}

func (m *XAM) GetReq() XAMRequest {
	if m != nil {
		return m.Req
	}
	return XAMRequest{}
}

func (m *XAM) GetRes() XAMResponse {
	if m != nil {
		return m.Res
	}
	return XAMResponse{}
}

func init() {
	proto.RegisterEnum("kira.layer2.DappStatus", DappStatus_name, DappStatus_value)
	proto.RegisterEnum("kira.layer2.OperatorStatus", OperatorStatus_name, OperatorStatus_value)
	proto.RegisterEnum("kira.layer2.SessionStatus", SessionStatus_name, SessionStatus_value)
	proto.RegisterType((*AccountRange)(nil), "kira.layer2.AccountRange")
	proto.RegisterType((*Controllers)(nil), "kira.layer2.Controllers")
	proto.RegisterType((*BinaryInfo)(nil), "kira.layer2.BinaryInfo")
	proto.RegisterType((*LpPoolConfig)(nil), "kira.layer2.LpPoolConfig")
	proto.RegisterType((*IssuanceConfig)(nil), "kira.layer2.IssuanceConfig")
	proto.RegisterType((*Dapp)(nil), "kira.layer2.Dapp")
	proto.RegisterType((*UserDappBond)(nil), "kira.layer2.UserDappBond")
	proto.RegisterType((*DappOperator)(nil), "kira.layer2.DappOperator")
	proto.RegisterType((*DappLeaderDenouncement)(nil), "kira.layer2.DappLeaderDenouncement")
	proto.RegisterType((*DappSession)(nil), "kira.layer2.DappSession")
	proto.RegisterType((*DappSessionApproval)(nil), "kira.layer2.DappSessionApproval")
	proto.RegisterType((*ExecutionRegistrar)(nil), "kira.layer2.ExecutionRegistrar")
	proto.RegisterType((*BridgeRegistrarHelper)(nil), "kira.layer2.BridgeRegistrarHelper")
	proto.RegisterType((*BridgeRegistrar)(nil), "kira.layer2.BridgeRegistrar")
	proto.RegisterType((*BridgeBalance)(nil), "kira.layer2.BridgeBalance")
	proto.RegisterType((*BridgeAccount)(nil), "kira.layer2.BridgeAccount")
	proto.RegisterType((*BridgeToken)(nil), "kira.layer2.BridgeToken")
	proto.RegisterType((*XAMRequest)(nil), "kira.layer2.XAMRequest")
	proto.RegisterType((*XAMResponse)(nil), "kira.layer2.XAMResponse")
	proto.RegisterType((*XAM)(nil), "kira.layer2.XAM")
}

func init() { proto.RegisterFile("kira/layer2/layer2.proto", fileDescriptor_4070283bbe72a11a) }

var fileDescriptor_4070283bbe72a11a = []byte{
	// 2204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcb, 0x6f, 0x1b, 0xbb,
	0xf5, 0xf6, 0x58, 0xb2, 0x2d, 0x53, 0x7e, 0x28, 0x8c, 0x6f, 0xee, 0x44, 0xf9, 0xfd, 0x1c, 0x55,
	0xed, 0xbd, 0x71, 0x72, 0x5b, 0xab, 0x48, 0x80, 0x02, 0xbd, 0x0f, 0xb4, 0xb2, 0xad, 0x5c, 0x2b,
	0x8d, 0x1f, 0x1d, 0xdb, 0x17, 0x46, 0x37, 0x02, 0x35, 0x43, 0xcb, 0x84, 0x67, 0x86, 0x63, 0x72,
	0xe4, 0xc8, 0x9b, 0x02, 0x7d, 0x01, 0xad, 0xbb, 0xe9, 0xba, 0x80, 0x57, 0xdd, 0xf4, 0xef, 0xe8,
	0xa2, 0xb8, 0xcb, 0xbb, 0xe8, 0xa2, 0xe8, 0xe2, 0xa2, 0x48, 0x36, 0x7d, 0x2c, 0xfa, 0x2f, 0x14,
	0xe7, 0x90, 0x33, 0x7a, 0xd4, 0x6d, 0x72, 0xb3, 0x12, 0xf9, 0xf1, 0xfb, 0x0e, 0x0f, 0x79, 0x0e,
	0xcf, 0x90, 0x22, 0xee, 0x99, 0x50, 0xac, 0x11, 0xb2, 0x4b, 0xae, 0x1e, 0xdb, 0x9f, 0xf5, 0x44,
	0xc9, 0x54, 0xd2, 0x32, 0x8c, 0xac, 0x1b, 0xa8, 0x7a, 0xb7, 0x27, 0x65, 0x2f, 0xe4, 0x0d, 0x1c,
	0xea, 0xf6, 0x4f, 0x1a, 0x2c, 0xbe, 0x34, 0xbc, 0xea, 0x4a, 0x4f, 0xf6, 0x24, 0x36, 0x1b, 0xd0,
	0xb2, 0xe8, 0xfd, 0x49, 0x41, 0x2a, 0x22, 0xae, 0x53, 0x16, 0x25, 0x86, 0x50, 0xdf, 0x20, 0x0b,
	0x4d, 0xdf, 0x97, 0xfd, 0x38, 0xf5, 0x58, 0xdc, 0xe3, 0xf4, 0xff, 0xc8, 0x3c, 0x0b, 0x02, 0xc5,
	0xb5, 0xe6, 0xda, 0x75, 0x6a, 0x85, 0xb5, 0x79, 0x6f, 0x08, 0xd0, 0x15, 0x32, 0xa3, 0x64, 0xc8,
	0xb5, 0x3b, 0x5d, 0x2b, 0xac, 0x15, 0x3d, 0xd3, 0xa9, 0xff, 0xda, 0x21, 0xe5, 0x4d, 0x19, 0xa7,
	0x4a, 0x86, 0x21, 0x57, 0x9a, 0x7e, 0x42, 0xe6, 0x5f, 0x9c, 0x8a, 0x94, 0x87, 0x42, 0xa7, 0xae,
	0x53, 0x73, 0xd6, 0xca, 0x8f, 0xef, 0xae, 0x8f, 0x2c, 0x63, 0x7d, 0x74, 0xc6, 0x8d, 0xe2, 0xe7,
	0x5f, 0xde, 0x9f, 0xf2, 0x86, 0x0a, 0x90, 0x77, 0x43, 0xe6, 0x9f, 0xa1, 0x7c, 0xfa, 0x0d, 0xe5,
	0xb9, 0xa2, 0xfe, 0x63, 0x42, 0x36, 0x44, 0xcc, 0xd4, 0x65, 0x3b, 0x3e, 0x91, 0x94, 0x92, 0x62,
	0xcc, 0x22, 0x8e, 0x6e, 0xcc, 0x7b, 0xd8, 0x06, 0xec, 0x94, 0xe9, 0x53, 0xb4, 0x3d, 0xef, 0x61,
	0x9b, 0xde, 0x21, 0xb3, 0x5a, 0xf6, 0x95, 0xcf, 0xdd, 0x02, 0xa2, 0xb6, 0x07, 0xfb, 0xa1, 0xf8,
	0x09, 0x57, 0x3c, 0xf6, 0xb9, 0x5b, 0xc4, 0xa1, 0x21, 0x00, 0x96, 0xd2, 0xcb, 0x84, 0xbb, 0x33,
	0xc6, 0x12, 0xb4, 0xeb, 0x3f, 0x75, 0xc8, 0xc2, 0xf3, 0x64, 0x5f, 0xca, 0x70, 0x53, 0xc6, 0x27,
	0xa2, 0x47, 0xb7, 0xc8, 0x8c, 0x62, 0xa9, 0x90, 0xc6, 0x87, 0x8d, 0x75, 0x70, 0xf8, 0x2f, 0x5f,
	0xde, 0x7f, 0xbf, 0x27, 0xd2, 0xd3, 0x7e, 0x77, 0xdd, 0x97, 0x51, 0xc3, 0x97, 0x3a, 0x92, 0xda,
	0xfe, 0x7c, 0x4b, 0x07, 0x67, 0x0d, 0x30, 0xa5, 0xd7, 0xb7, 0xb8, 0xef, 0x19, 0x31, 0x75, 0xc9,
	0x5c, 0xc0, 0x13, 0xa9, 0x45, 0x6a, 0xfd, 0xce, 0xba, 0xe0, 0x44, 0xa0, 0x44, 0x82, 0x8e, 0x17,
	0x3d, 0x6c, 0xd7, 0xff, 0xe4, 0x90, 0xa5, 0xb6, 0xd6, 0x7d, 0x16, 0xfb, 0xdc, 0xba, 0x31, 0x62,
	0xc0, 0x19, 0x37, 0xb0, 0x4d, 0xe6, 0x12, 0xc5, 0x23, 0x11, 0x5b, 0xd3, 0x5f, 0xc9, 0xc5, 0x76,
	0x9c, 0x7a, 0x99, 0x9c, 0x3e, 0x23, 0xa5, 0x44, 0xea, 0x14, 0x4d, 0x15, 0xde, 0xca, 0x54, 0xae,
	0xc7, 0xbd, 0x15, 0x91, 0xd9, 0xf4, 0xa2, 0x87, 0xed, 0xfa, 0x4f, 0xe6, 0x49, 0x71, 0x8b, 0x25,
	0xc9, 0x8d, 0x61, 0x5d, 0x21, 0x33, 0x01, 0x8f, 0x65, 0x64, 0xf7, 0xc7, 0x74, 0x68, 0x8d, 0x94,
	0x03, 0xae, 0x7d, 0x25, 0x92, 0x54, 0xc8, 0xd8, 0x46, 0x77, 0x14, 0x82, 0x8d, 0x79, 0xc1, 0xbb,
	0x5a, 0xa4, 0x59, 0x80, 0xb3, 0x2e, 0xcc, 0x12, 0xca, 0x9e, 0xcc, 0xc2, 0x0b, 0x6d, 0x93, 0x28,
	0xbe, 0x60, 0xa1, 0x3b, 0x9b, 0x25, 0x0a, 0xf4, 0x30, 0x0a, 0xd2, 0xd7, 0xee, 0x9c, 0xe1, 0x42,
	0x9b, 0x7e, 0x9f, 0x94, 0xfd, 0xe1, 0xb9, 0x70, 0x4b, 0x98, 0xcb, 0xee, 0x58, 0x2e, 0x8f, 0x9c,
	0x1b, 0x9b, 0xca, 0xa3, 0x12, 0xda, 0x20, 0x85, 0xae, 0x88, 0xdd, 0xf9, 0x5a, 0x61, 0xad, 0xfc,
	0xf8, 0xdd, 0x31, 0xe5, 0x30, 0xc9, 0xad, 0x10, 0x98, 0xf4, 0x09, 0x29, 0x26, 0x52, 0x86, 0x2e,
	0xb9, 0xe1, 0xdc, 0x8c, 0x66, 0xa5, 0xd5, 0x20, 0x99, 0x7e, 0x42, 0x4a, 0xc2, 0x26, 0x8b, 0x5b,
	0x46, 0xe1, 0xbd, 0x31, 0xe1, 0x78, 0x26, 0x59, 0x69, 0x2e, 0xa1, 0xef, 0x93, 0xe5, 0x7e, 0x12,
	0xb0, 0x94, 0x77, 0x20, 0x48, 0x9d, 0x88, 0x0d, 0xdc, 0x05, 0x0c, 0xda, 0xa2, 0x81, 0x0f, 0x45,
	0xc4, 0x77, 0xd8, 0x80, 0x7e, 0x9d, 0x2c, 0xf2, 0x01, 0xf7, 0xfb, 0xa9, 0x54, 0xba, 0x13, 0x89,
	0xd8, 0x5d, 0x44, 0xd6, 0x42, 0x0e, 0xee, 0x88, 0x78, 0x82, 0xc4, 0x06, 0xee, 0xd2, 0x24, 0xc9,
	0x58, 0xba, 0xe0, 0x4a, 0x9c, 0x08, 0x6e, 0x2d, 0x2d, 0x1b, 0x52, 0x0e, 0x82, 0xa5, 0x5d, 0x42,
	0x52, 0x99, 0xb2, 0xb0, 0xd3, 0x95, 0x71, 0xe0, 0x56, 0x30, 0x1d, 0x1b, 0x36, 0x1d, 0x1f, 0xbc,
	0x41, 0x3a, 0x6e, 0x4a, 0x11, 0x7b, 0xf3, 0x68, 0x62, 0x43, 0xc6, 0x01, 0x4c, 0xea, 0x2b, 0x0e,
	0x87, 0x31, 0xc6, 0x85, 0xba, 0xb7, 0xcc, 0xa4, 0x19, 0x08, 0xcb, 0xa4, 0x0d, 0x32, 0xab, 0x53,
	0x96, 0xf6, 0xb5, 0x4b, 0x6b, 0xce, 0xda, 0xd2, 0x44, 0xcc, 0x20, 0x77, 0x0f, 0x70, 0xd8, 0xb3,
	0x34, 0xba, 0x47, 0xca, 0x17, 0x32, 0xe5, 0x9d, 0xf3, 0xbe, 0x54, 0xfd, 0xc8, 0xbd, 0xfd, 0x56,
	0x35, 0x82, 0x80, 0x89, 0x1f, 0xa2, 0x05, 0x7a, 0xdf, 0x1a, 0x4c, 0xb8, 0x12, 0x32, 0x70, 0x57,
	0xd0, 0x49, 0x24, 0xec, 0x23, 0x42, 0xdf, 0x23, 0x4b, 0x48, 0xe0, 0x31, 0xf3, 0xd3, 0x88, 0xc7,
	0xa9, 0xfb, 0x8e, 0x89, 0x16, 0xa0, 0xad, 0x0c, 0xa4, 0x1f, 0x90, 0x5b, 0xa1, 0x38, 0xef, 0x8b,
	0xc0, 0xac, 0x58, 0xa7, 0x4c, 0xa5, 0xee, 0x1d, 0x64, 0x56, 0x46, 0x06, 0x0e, 0x00, 0xa7, 0x6d,
	0x38, 0xf8, 0x32, 0xec, 0x9c, 0x70, 0xee, 0xbe, 0xfb, 0x56, 0x4b, 0x98, 0x03, 0xfd, 0x53, 0xce,
	0xe9, 0xd7, 0xc8, 0x42, 0xca, 0x59, 0xd4, 0x51, 0x5c, 0x73, 0x75, 0xc1, 0x5d, 0xd7, 0x9c, 0x58,
	0xc0, 0x3c, 0x03, 0x01, 0xc5, 0x56, 0x1c, 0x13, 0x88, 0xbb, 0xe8, 0x55, 0xd9, 0x62, 0x18, 0x87,
	0x6f, 0x90, 0x25, 0xa8, 0x24, 0x1d, 0x24, 0x25, 0x4c, 0x04, 0x6e, 0xb5, 0xe6, 0xac, 0x95, 0xbc,
	0x05, 0x40, 0x77, 0x44, 0x9c, 0xee, 0x33, 0x11, 0xd0, 0xc7, 0xe4, 0x1d, 0x1e, 0xb3, 0x6e, 0xc8,
	0x31, 0x47, 0x3a, 0x79, 0xfa, 0xb8, 0xf7, 0x90, 0x7c, 0xdb, 0x0c, 0x42, 0xf4, 0x3f, 0xcb, 0x86,
	0xea, 0x3f, 0x77, 0xc8, 0xc2, 0x91, 0xe6, 0x0a, 0x62, 0x89, 0x79, 0x41, 0x49, 0xb1, 0xaf, 0xb9,
	0xca, 0x6a, 0x11, 0xb4, 0xe9, 0x3d, 0x32, 0x1f, 0xb0, 0x24, 0xe9, 0x60, 0x91, 0x32, 0xf5, 0xa8,
	0x04, 0xc0, 0x2e, 0x14, 0xaa, 0x4d, 0x52, 0xc4, 0x94, 0x2c, 0xbc, 0x5d, 0x4a, 0xa2, 0xb8, 0xfe,
	0xc7, 0x02, 0x59, 0x00, 0x17, 0xf6, 0x12, 0xae, 0x58, 0x2a, 0x27, 0xa6, 0x74, 0x26, 0xa6, 0xac,
	0x92, 0x92, 0xb4, 0xc4, 0xcc, 0x9d, 0xac, 0x0f, 0x63, 0xd9, 0xe1, 0x42, 0x97, 0x4a, 0x5e, 0xde,
	0x87, 0xb1, 0x6c, 0x53, 0xb0, 0x38, 0x96, 0xbc, 0xbc, 0x0f, 0x95, 0x50, 0xc4, 0x29, 0x57, 0x03,
	0x5b, 0x1f, 0x6d, 0x8f, 0x3e, 0xc9, 0x8f, 0xc0, 0x2c, 0x1e, 0x81, 0xf1, 0x5a, 0x92, 0xf9, 0x3b,
	0x71, 0x0c, 0x28, 0x29, 0x2a, 0x16, 0x9f, 0x61, 0xf9, 0x2c, 0x78, 0xd8, 0xc6, 0x52, 0x9b, 0x2a,
	0xce, 0xce, 0xb0, 0x72, 0x16, 0x3c, 0xdb, 0x83, 0x6f, 0x72, 0x24, 0xb4, 0x7f, 0x8a, 0xf5, 0x6a,
	0x1e, 0x87, 0x86, 0x00, 0xe4, 0xad, 0x75, 0x31, 0xe8, 0x68, 0xae, 0xb5, 0x90, 0xb1, 0xc6, 0x72,
	0x58, 0xf0, 0x2a, 0xd9, 0xc0, 0x81, 0xc5, 0xe9, 0x03, 0xb2, 0x1c, 0x09, 0xad, 0x47, 0xa9, 0x65,
	0xa4, 0x2e, 0x19, 0x38, 0x27, 0x1e, 0x93, 0x0a, 0x6c, 0x3b, 0x0f, 0x3a, 0x61, 0xd2, 0x61, 0x11,
	0xdc, 0x3f, 0xb0, 0xc8, 0x7d, 0xf5, 0x2f, 0xdc, 0x92, 0xb1, 0xf3, 0x3c, 0x69, 0xa2, 0x95, 0xfa,
	0xaf, 0x1c, 0x72, 0x07, 0x02, 0xf9, 0x9c, 0xb3, 0x80, 0xab, 0x2d, 0x1e, 0xcb, 0x7e, 0xec, 0x73,
	0x3c, 0x82, 0xff, 0x33, 0xa4, 0x77, 0xc8, 0x6c, 0x88, 0x12, 0x1b, 0x50, 0xdb, 0xc3, 0x5d, 0xe3,
	0x31, 0xe0, 0xd9, 0x4d, 0x06, 0x7b, 0xb4, 0x4e, 0x16, 0x82, 0x11, 0xe3, 0xf6, 0x5b, 0x37, 0x86,
	0xd5, 0xff, 0xe9, 0x90, 0x32, 0xd6, 0x28, 0xb3, 0xec, 0x91, 0x39, 0x9c, 0xb1, 0x39, 0x56, 0xc8,
	0x8c, 0xa9, 0x07, 0xd3, 0x78, 0xf2, 0x4c, 0x07, 0x2a, 0x8f, 0x89, 0x66, 0x07, 0xaf, 0x57, 0x66,
	0x7a, 0x62, 0xa0, 0x6d, 0xb8, 0x64, 0x3d, 0xce, 0x33, 0xa3, 0x88, 0x99, 0x51, 0x1d, 0xcb, 0x0c,
	0x3b, 0xe9, 0x44, 0x62, 0xb8, 0x64, 0xae, 0xc7, 0x52, 0xfe, 0x82, 0x5d, 0xda, 0x34, 0xcb, 0xba,
	0xf4, 0x7b, 0xa4, 0x22, 0x63, 0xff, 0x94, 0x89, 0xb8, 0x13, 0x71, 0xad, 0x59, 0x8f, 0x43, 0xc6,
	0xc1, 0x87, 0x72, 0x65, 0xdd, 0x5c, 0x7b, 0xd7, 0xb3, 0x6b, 0xef, 0x7a, 0x33, 0xbe, 0xf4, 0x96,
	0x2d, 0x7b, 0xc7, 0x92, 0xeb, 0x92, 0xdc, 0x1e, 0x59, 0x6c, 0x33, 0x49, 0x94, 0xbc, 0x60, 0xe1,
	0x6b, 0x0f, 0x12, 0x43, 0x62, 0xbe, 0xef, 0x79, 0x1f, 0xd6, 0x2f, 0x74, 0xc7, 0x76, 0x03, 0x7b,
	0x96, 0x88, 0xd0, 0x4d, 0x8b, 0xd4, 0xff, 0xe6, 0x10, 0xda, 0xc2, 0xa3, 0x25, 0x64, 0xec, 0xf1,
	0x9e, 0xd0, 0xa9, 0x62, 0xaf, 0x39, 0xb9, 0x1f, 0x61, 0xad, 0xbb, 0xc8, 0xf2, 0xd3, 0x5e, 0x88,
	0xdd, 0xff, 0xfc, 0xac, 0x98, 0x71, 0xac, 0x82, 0x17, 0x59, 0xfc, 0x3e, 0x22, 0x0b, 0x7e, 0x5f,
	0xa9, 0x5c, 0x5c, 0x78, 0x9d, 0x18, 0xd8, 0x23, 0xe2, 0x98, 0x0f, 0xd2, 0x5c, 0x5c, 0x7c, 0x9d,
	0x18, 0xd8, 0xb6, 0x53, 0x8f, 0xc9, 0x3b, 0x1b, 0x4a, 0x04, 0x3d, 0x9e, 0x2f, 0x73, 0x9b, 0x87,
	0x89, 0xa9, 0x8c, 0x68, 0x35, 0x2f, 0x99, 0x45, 0xaf, 0x04, 0x00, 0x94, 0x54, 0x7a, 0x97, 0x60,
	0xbb, 0x33, 0x60, 0x91, 0x4d, 0xad, 0x39, 0xe8, 0x1f, 0xb3, 0x88, 0xfe, 0x3f, 0x21, 0x38, 0x94,
	0xca, 0x33, 0x1e, 0xdb, 0xbb, 0x2e, 0x5a, 0x3a, 0x04, 0xa0, 0xfe, 0x2f, 0x87, 0x2c, 0x4f, 0x4c,
	0x48, 0x3f, 0x24, 0xb3, 0xa7, 0x38, 0xa9, 0x7d, 0x84, 0xd4, 0xc7, 0xef, 0x4f, 0x37, 0xb9, 0xe7,
	0x59, 0x05, 0xfd, 0x98, 0x94, 0x98, 0x79, 0x66, 0x98, 0xc7, 0x4e, 0x79, 0x22, 0x59, 0x8d, 0xda,
	0xbe, 0x44, 0xb2, 0x1b, 0x51, 0xa6, 0xa0, 0xdf, 0x21, 0xb3, 0xe8, 0xa7, 0x76, 0x0b, 0xa8, 0x75,
	0x6f, 0xd0, 0xa2, 0xdf, 0x56, 0x69, 0xd9, 0xf4, 0x11, 0x29, 0x0e, 0x58, 0x04, 0xc7, 0x03, 0x54,
	0x95, 0x31, 0xd5, 0x71, 0x73, 0x27, 0xbb, 0xb4, 0x01, 0xa7, 0xfe, 0x0b, 0x87, 0x2c, 0x1a, 0x4b,
	0x1b, 0x2c, 0xc4, 0xca, 0xf7, 0x4d, 0x42, 0xbb, 0x08, 0x98, 0x4d, 0xea, 0x88, 0x38, 0xe0, 0x03,
	0xbb, 0xc7, 0x95, 0xee, 0x70, 0xd2, 0x36, 0xe0, 0xf4, 0x29, 0x99, 0xb5, 0x75, 0xec, 0xed, 0x2e,
	0xfd, 0x56, 0x5d, 0xff, 0x6d, 0xee, 0x87, 0xdd, 0x0d, 0xa8, 0x0e, 0xa3, 0x53, 0x9b, 0x0e, 0x1c,
	0x64, 0xfb, 0x90, 0xcc, 0x1e, 0x30, 0xb6, 0x3b, 0x9e, 0xff, 0x85, 0x89, 0xfc, 0xff, 0x98, 0x94,
	0xba, 0x66, 0x7d, 0xd9, 0xb6, 0xdc, 0x14, 0x08, 0xbb, 0x05, 0x59, 0x20, 0x32, 0x45, 0xfd, 0xbb,
	0xa4, 0x3c, 0xb2, 0xdb, 0xff, 0xc5, 0xb3, 0x1b, 0x1f, 0x0e, 0xf5, 0x7f, 0x38, 0x84, 0x1c, 0x37,
	0x77, 0x3c, 0x7e, 0xde, 0xe7, 0x3a, 0xa5, 0x1f, 0x92, 0x39, 0xb3, 0x60, 0xf3, 0x2c, 0x7e, 0x13,
	0x37, 0x32, 0x01, 0x16, 0x46, 0x7c, 0x4e, 0x76, 0x60, 0x59, 0x36, 0xb3, 0x89, 0x81, 0xf0, 0x39,
	0xf3, 0x1e, 0x59, 0xb2, 0x04, 0x9b, 0x42, 0x36, 0xc1, 0x17, 0x0d, 0x9a, 0x6d, 0x2c, 0x6c, 0x14,
	0xd7, 0xa9, 0xb1, 0x62, 0xde, 0x45, 0x25, 0x00, 0xd0, 0xc6, 0x43, 0x52, 0xc1, 0xc1, 0x2e, 0x8f,
	0xf9, 0x89, 0xf0, 0x05, 0x53, 0xa6, 0x62, 0x16, 0xbd, 0x65, 0xc0, 0x37, 0x86, 0x30, 0xad, 0x90,
	0x02, 0x9c, 0x30, 0xf3, 0x80, 0x81, 0x26, 0x3e, 0xe1, 0x71, 0xb1, 0x3a, 0x91, 0xb1, 0xe6, 0xc8,
	0x10, 0x81, 0xdd, 0x26, 0x68, 0x02, 0x22, 0x94, 0x6f, 0x7d, 0x87, 0x26, 0x20, 0x5a, 0xf9, 0xd6,
	0x53, 0x68, 0x02, 0x12, 0x28, 0xdf, 0x7a, 0x06, 0x4d, 0xa3, 0x8a, 0xac, 0x1f, 0xd0, 0x34, 0x2a,
	0x33, 0x37, 0xaa, 0x22, 0xa3, 0x8a, 0xf0, 0xcb, 0x8f, 0xaa, 0xa8, 0xfe, 0x33, 0x87, 0x14, 0x8e,
	0x9b, 0x3b, 0x50, 0x0e, 0x14, 0x3f, 0x37, 0x77, 0x3c, 0xe3, 0xca, 0x9c, 0xe2, 0xe7, 0xf6, 0x9e,
	0x5d, 0x50, 0xfc, 0xdc, 0x56, 0xc3, 0x77, 0x27, 0x0f, 0x8a, 0x0d, 0x5a, 0xf6, 0x30, 0x52, 0xfc,
	0x9c, 0x7e, 0x1b, 0x04, 0xfa, 0xc6, 0x0a, 0x38, 0xb2, 0xf0, 0xa1, 0x42, 0x3f, 0x1a, 0x10, 0x32,
	0xbc, 0xaf, 0xc3, 0xa5, 0x63, 0x63, 0x6f, 0xef, 0xf0, 0xe0, 0xd0, 0x6b, 0xee, 0x57, 0xa6, 0xaa,
	0x8b, 0x57, 0xd7, 0xb5, 0xf9, 0x0d, 0x29, 0x53, 0x28, 0x1e, 0x09, 0x7c, 0x28, 0x9b, 0x9b, 0x87,
	0xed, 0xcf, 0x5a, 0x15, 0xa7, 0x4a, 0xae, 0xae, 0x6b, 0xb3, 0x4d, 0x3f, 0x15, 0x17, 0xf8, 0x91,
	0xde, 0x6f, 0x1e, 0x1d, 0xb4, 0xb6, 0x2a, 0xd3, 0x06, 0xdf, 0x67, 0x7d, 0xcd, 0x03, 0xc0, 0xb7,
	0x9b, 0xcf, 0x0f, 0x5b, 0x5b, 0x95, 0x82, 0xc1, 0xb7, 0x59, 0x98, 0xf2, 0xa0, 0x5a, 0xfc, 0xe5,
	0xef, 0x56, 0xa7, 0x1e, 0xfd, 0xdd, 0x21, 0x4b, 0xe3, 0xf7, 0x24, 0xb8, 0xa8, 0xec, 0xed, 0xb7,
	0xbc, 0xe6, 0xe1, 0x9e, 0xd7, 0xb1, 0x33, 0x4d, 0x55, 0xe9, 0xd5, 0x75, 0x2d, 0x27, 0xda, 0x19,
	0x47, 0x89, 0x76, 0x6a, 0x67, 0x9c, 0x68, 0x5d, 0xf8, 0x80, 0xdc, 0xca, 0x89, 0xed, 0x5d, 0x6b,
	0x73, 0xba, 0xba, 0x72, 0x75, 0x5d, 0xab, 0x64, 0xd4, 0x36, 0xbc, 0x06, 0xc0, 0xea, 0x43, 0x52,
	0xc9, 0xc9, 0xad, 0xe3, 0xf6, 0x61, 0x7b, 0xf7, 0xd3, 0x4a, 0xa1, 0x7a, 0xfb, 0xea, 0xba, 0xb6,
	0x9c, 0x71, 0x5b, 0x03, 0x91, 0x8a, 0xb8, 0x37, 0xe6, 0xc0, 0xb3, 0x66, 0xfb, 0x79, 0x6b, 0xab,
	0x52, 0x1c, 0x77, 0xe0, 0x19, 0x13, 0x61, 0xbe, 0xd6, 0x3f, 0x4c, 0x93, 0xc5, 0xb1, 0x2f, 0x3f,
	0x6d, 0x90, 0xdb, 0x07, 0xad, 0x83, 0x83, 0xf6, 0xde, 0x6e, 0xe7, 0x68, 0xf7, 0x60, 0x73, 0xbb,
	0xb5, 0x75, 0x04, 0x46, 0xa6, 0xaa, 0x77, 0xae, 0xae, 0x6b, 0xd4, 0x72, 0x8f, 0x62, 0xed, 0x9f,
	0xf2, 0xa0, 0x1f, 0x9a, 0x95, 0x64, 0x82, 0x21, 0xdd, 0x31, 0x2b, 0xc9, 0x4c, 0xe7, 0xe4, 0x07,
	0x64, 0x39, 0x23, 0xef, 0xed, 0x7e, 0xba, 0x07, 0x0b, 0x99, 0x36, 0xee, 0x59, 0xea, 0x5e, 0xdc,
	0x93, 0xb0, 0x8e, 0x87, 0xa4, 0x92, 0x11, 0x9b, 0x9b, 0x9b, 0xad, 0x7d, 0x13, 0x2c, 0x5c, 0x72,
	0x76, 0x63, 0xf0, 0x7d, 0x9e, 0xa4, 0xe3, 0x0e, 0x6c, 0xb5, 0x76, 0xf7, 0x8e, 0x76, 0x37, 0x71,
	0xd1, 0xa3, 0x0e, 0x64, 0xf7, 0x3a, 0x7c, 0x7e, 0x65, 0x64, 0x9b, 0x02, 0x33, 0xd5, 0x5b, 0x57,
	0xd7, 0xb5, 0x6c, 0x17, 0x4c, 0x26, 0x8c, 0xd2, 0x9e, 0x9a, 0x5d, 0x9c, 0x1d, 0xa3, 0x3d, 0x1d,
	0xd9, 0xc4, 0x8d, 0xa7, 0xbf, 0x7f, 0xb9, 0xea, 0x7c, 0xfe, 0x72, 0xd5, 0xf9, 0xe2, 0xe5, 0xaa,
	0xf3, 0xd7, 0x97, 0xab, 0xce, 0x6f, 0x5e, 0xad, 0x4e, 0x7d, 0xf1, 0x6a, 0x75, 0xea, 0xcf, 0xaf,
	0x56, 0xa7, 0x7e, 0xb4, 0x36, 0x52, 0xd1, 0x7f, 0x20, 0x14, 0xdb, 0x94, 0x8a, 0x37, 0x34, 0x3f,
	0x63, 0xa2, 0x31, 0xc8, 0xfe, 0x73, 0xc4, 0xba, 0xde, 0x9d, 0xc5, 0x0b, 0xd3, 0x93, 0x7f, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x6c, 0x92, 0x52, 0xfa, 0x8f, 0x14, 0x00, 0x00,
}

func (this *AccountRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountRange)
	if !ok {
		that2, ok := that.(AccountRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	return true
}
func (this *Controllers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Controllers)
	if !ok {
		that2, ok := that.(Controllers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Whitelist.Equal(&that1.Whitelist) {
		return false
	}
	if !this.Blacklist.Equal(&that1.Blacklist) {
		return false
	}
	return true
}
func (this *BinaryInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BinaryInfo)
	if !ok {
		that2, ok := that.(BinaryInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Reference != that1.Reference {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *LpPoolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LpPoolConfig)
	if !ok {
		that2, ok := that.(LpPoolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ratio.Equal(that1.Ratio) {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	if this.Drip != that1.Drip {
		return false
	}
	return true
}
func (this *IssuanceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssuanceConfig)
	if !ok {
		that2, ok := that.(IssuanceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	if !this.Premint.Equal(that1.Premint) {
		return false
	}
	if !this.Postmint.Equal(that1.Postmint) {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Dapp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dapp)
	if !ok {
		that2, ok := that.(Dapp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.Logo != that1.Logo {
		return false
	}
	if this.Social != that1.Social {
		return false
	}
	if this.Docs != that1.Docs {
		return false
	}
	if !this.Controllers.Equal(&that1.Controllers) {
		return false
	}
	if len(this.Bin) != len(that1.Bin) {
		return false
	}
	for i := range this.Bin {
		if !this.Bin[i].Equal(&that1.Bin[i]) {
			return false
		}
	}
	if !this.Pool.Equal(&that1.Pool) {
		return false
	}
	if !this.Issuance.Equal(&that1.Issuance) {
		return false
	}
	if this.UpdateTimeMax != that1.UpdateTimeMax {
		return false
	}
	if this.ExecutorsMin != that1.ExecutorsMin {
		return false
	}
	if this.ExecutorsMax != that1.ExecutorsMax {
		return false
	}
	if this.VerifiersMin != that1.VerifiersMin {
		return false
	}
	if !this.TotalBond.Equal(that1.TotalBond) {
		return false
	}
	if this.CreationTime != that1.CreationTime {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.VoteQuorum.Equal(that1.VoteQuorum) {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if this.VoteEnactment != that1.VoteEnactment {
		return false
	}
	if this.LiquidationStart != that1.LiquidationStart {
		return false
	}
	if !this.PoolFee.Equal(that1.PoolFee) {
		return false
	}
	if this.TeamReserve != that1.TeamReserve {
		return false
	}
	if this.PremintTime != that1.PremintTime {
		return false
	}
	if this.PostMintPaid != that1.PostMintPaid {
		return false
	}
	if this.EnableBondVerifiers != that1.EnableBondVerifiers {
		return false
	}
	return true
}
func (this *UserDappBond) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserDappBond)
	if !ok {
		that2, ok := that.(UserDappBond)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if !this.Bond.Equal(that1.Bond) {
		return false
	}
	return true
}
func (this *DappOperator) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DappOperator)
	if !ok {
		that2, ok := that.(DappOperator)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Executor != that1.Executor {
		return false
	}
	if this.Verifier != that1.Verifier {
		return false
	}
	if this.Interx != that1.Interx {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Rank != that1.Rank {
		return false
	}
	if this.Streak != that1.Streak {
		return false
	}
	if this.Mischance != that1.Mischance {
		return false
	}
	if this.VerifiedSessions != that1.VerifiedSessions {
		return false
	}
	if this.MissedSessions != that1.MissedSessions {
		return false
	}
	if !this.BondedLpAmount.Equal(that1.BondedLpAmount) {
		return false
	}
	return true
}
func (this *DappLeaderDenouncement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DappLeaderDenouncement)
	if !ok {
		that2, ok := that.(DappLeaderDenouncement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if this.Leader != that1.Leader {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Denouncement != that1.Denouncement {
		return false
	}
	return true
}
func (this *DappSession) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DappSession)
	if !ok {
		that2, ok := that.(DappSession)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Leader != that1.Leader {
		return false
	}
	if this.Start != that1.Start {
		return false
	}
	if this.StatusHash != that1.StatusHash {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Gateway != that1.Gateway {
		return false
	}
	if len(this.OnchainMessages) != len(that1.OnchainMessages) {
		return false
	}
	for i := range this.OnchainMessages {
		if !this.OnchainMessages[i].Equal(that1.OnchainMessages[i]) {
			return false
		}
	}
	return true
}
func (this *DappSessionApproval) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DappSessionApproval)
	if !ok {
		that2, ok := that.(DappSessionApproval)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if this.Approver != that1.Approver {
		return false
	}
	if this.IsApproved != that1.IsApproved {
		return false
	}
	return true
}
func (this *ExecutionRegistrar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecutionRegistrar)
	if !ok {
		that2, ok := that.(ExecutionRegistrar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if !this.PrevSession.Equal(that1.PrevSession) {
		return false
	}
	if !this.CurrSession.Equal(that1.CurrSession) {
		return false
	}
	if !this.NextSession.Equal(that1.NextSession) {
		return false
	}
	return true
}
func (this *BridgeRegistrarHelper) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeRegistrarHelper)
	if !ok {
		that2, ok := that.(BridgeRegistrarHelper)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NextUser != that1.NextUser {
		return false
	}
	if this.NextXam != that1.NextXam {
		return false
	}
	if this.NextToken != that1.NextToken {
		return false
	}
	return true
}
func (this *BridgeRegistrar) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeRegistrar)
	if !ok {
		that2, ok := that.(BridgeRegistrar)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Helper.Equal(that1.Helper) {
		return false
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if !this.Accounts[i].Equal(&that1.Accounts[i]) {
			return false
		}
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(&that1.Tokens[i]) {
			return false
		}
	}
	if len(this.Xams) != len(that1.Xams) {
		return false
	}
	for i := range this.Xams {
		if !this.Xams[i].Equal(&that1.Xams[i]) {
			return false
		}
	}
	return true
}
func (this *BridgeBalance) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeBalance)
	if !ok {
		that2, ok := that.(BridgeBalance)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BridgeTokenIndex != that1.BridgeTokenIndex {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *BridgeAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeAccount)
	if !ok {
		that2, ok := that.(BridgeAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if len(this.Balances) != len(that1.Balances) {
		return false
	}
	for i := range this.Balances {
		if !this.Balances[i].Equal(&that1.Balances[i]) {
			return false
		}
	}
	return true
}
func (this *BridgeToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BridgeToken)
	if !ok {
		that2, ok := that.(BridgeToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	return true
}
func (this *XAMRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XAMRequest)
	if !ok {
		that2, ok := that.(XAMRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Amounts) != len(that1.Amounts) {
		return false
	}
	for i := range this.Amounts {
		if !this.Amounts[i].Equal(&that1.Amounts[i]) {
			return false
		}
	}
	if this.SourceDapp != that1.SourceDapp {
		return false
	}
	if this.SourceAccount != that1.SourceAccount {
		return false
	}
	if this.DestDapp != that1.DestDapp {
		return false
	}
	if this.DestBeneficiary != that1.DestBeneficiary {
		return false
	}
	if this.Xam != that1.Xam {
		return false
	}
	return true
}
func (this *XAMResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XAMResponse)
	if !ok {
		that2, ok := that.(XAMResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Xid != that1.Xid {
		return false
	}
	if this.Irc != that1.Irc {
		return false
	}
	if this.Src != that1.Src {
		return false
	}
	if this.Drc != that1.Drc {
		return false
	}
	if this.Irm != that1.Irm {
		return false
	}
	if this.Srm != that1.Srm {
		return false
	}
	if this.Drm != that1.Drm {
		return false
	}
	return true
}
func (this *XAM) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*XAM)
	if !ok {
		that2, ok := that.(XAM)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReqTime != that1.ReqTime {
		return false
	}
	if !this.Req.Equal(&that1.Req) {
		return false
	}
	if !this.Res.Equal(&that1.Res) {
		return false
	}
	return true
}
func (m *AccountRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLayer2(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintLayer2(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Controllers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Controllers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Controllers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Blacklist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Whitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BinaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LpPoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LpPoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LpPoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Drip != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Drip))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IssuanceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuanceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuanceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Postmint.Size()
		i -= size
		if _, err := m.Postmint.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Premint.Size()
		i -= size
		if _, err := m.Premint.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnableBondVerifiers {
		i--
		if m.EnableBondVerifiers {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.PostMintPaid {
		i--
		if m.PostMintPaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PremintTime != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.PremintTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.TeamReserve) > 0 {
		i -= len(m.TeamReserve)
		copy(dAtA[i:], m.TeamReserve)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.TeamReserve)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	{
		size := m.PoolFee.Size()
		i -= size
		if _, err := m.PoolFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xba
	if m.LiquidationStart != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.LiquidationStart))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.VoteEnactment != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.VoteEnactment))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.VotePeriod != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	{
		size := m.VoteQuorum.Size()
		i -= size
		if _, err := m.VoteQuorum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	if m.Status != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.CreationTime != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size := m.TotalBond.Size()
		i -= size
		if _, err := m.TotalBond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.VerifiersMin != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.VerifiersMin))
		i--
		dAtA[i] = 0x78
	}
	if m.ExecutorsMax != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.ExecutorsMax))
		i--
		dAtA[i] = 0x70
	}
	if m.ExecutorsMin != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.ExecutorsMin))
		i--
		dAtA[i] = 0x68
	}
	if m.UpdateTimeMax != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.UpdateTimeMax))
		i--
		dAtA[i] = 0x60
	}
	{
		size, err := m.Issuance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Bin) > 0 {
		for iNdEx := len(m.Bin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.Controllers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Docs) > 0 {
		i -= len(m.Docs)
		copy(dAtA[i:], m.Docs)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Docs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Social) > 0 {
		i -= len(m.Social)
		copy(dAtA[i:], m.Social)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Social)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDappBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDappBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDappBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DappOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DappOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DappOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BondedLpAmount.Size()
		i -= size
		if _, err := m.BondedLpAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.MissedSessions != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.MissedSessions))
		i--
		dAtA[i] = 0x58
	}
	if m.VerifiedSessions != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.VerifiedSessions))
		i--
		dAtA[i] = 0x50
	}
	if m.Mischance != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Mischance))
		i--
		dAtA[i] = 0x48
	}
	if m.Streak != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Streak))
		i--
		dAtA[i] = 0x40
	}
	if m.Rank != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Rank))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Interx) > 0 {
		i -= len(m.Interx)
		copy(dAtA[i:], m.Interx)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Interx)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Verifier {
		i--
		if m.Verifier {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Executor {
		i--
		if m.Executor {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DappLeaderDenouncement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DappLeaderDenouncement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DappLeaderDenouncement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denouncement) > 0 {
		i -= len(m.Denouncement)
		copy(dAtA[i:], m.Denouncement)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Denouncement)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DappSession) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DappSession) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DappSession) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OnchainMessages) > 0 {
		for iNdEx := len(m.OnchainMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OnchainMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Gateway) > 0 {
		i -= len(m.Gateway)
		copy(dAtA[i:], m.Gateway)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Gateway)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StatusHash) > 0 {
		i -= len(m.StatusHash)
		copy(dAtA[i:], m.StatusHash)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.StatusHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Start != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Leader) > 0 {
		i -= len(m.Leader)
		copy(dAtA[i:], m.Leader)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Leader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DappSessionApproval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DappSessionApproval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DappSessionApproval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsApproved {
		i--
		if m.IsApproved {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Approver) > 0 {
		i -= len(m.Approver)
		copy(dAtA[i:], m.Approver)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Approver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionRegistrar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionRegistrar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionRegistrar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextSession != nil {
		{
			size, err := m.NextSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.CurrSession != nil {
		{
			size, err := m.CurrSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PrevSession != nil {
		{
			size, err := m.PrevSession.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeRegistrarHelper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeRegistrarHelper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeRegistrarHelper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextToken != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.NextToken))
		i--
		dAtA[i] = 0x18
	}
	if m.NextXam != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.NextXam))
		i--
		dAtA[i] = 0x10
	}
	if m.NextUser != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.NextUser))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeRegistrar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeRegistrar) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeRegistrar) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Xams) > 0 {
		for iNdEx := len(m.Xams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Xams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Helper != nil {
		{
			size, err := m.Helper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLayer2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.BridgeTokenIndex != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.BridgeTokenIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balances[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XAMRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAMRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XAMRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Xam) > 0 {
		i -= len(m.Xam)
		copy(dAtA[i:], m.Xam)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Xam)))
		i--
		dAtA[i] = 0x32
	}
	if m.DestBeneficiary != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.DestBeneficiary))
		i--
		dAtA[i] = 0x28
	}
	if m.DestDapp != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.DestDapp))
		i--
		dAtA[i] = 0x20
	}
	if m.SourceAccount != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.SourceAccount))
		i--
		dAtA[i] = 0x18
	}
	if m.SourceDapp != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.SourceDapp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Amounts) > 0 {
		for iNdEx := len(m.Amounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *XAMResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAMResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XAMResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Drm != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Drm))
		i--
		dAtA[i] = 0x38
	}
	if m.Srm != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Srm))
		i--
		dAtA[i] = 0x30
	}
	if m.Irm != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Irm))
		i--
		dAtA[i] = 0x28
	}
	if m.Drc != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Drc))
		i--
		dAtA[i] = 0x20
	}
	if m.Src != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Src))
		i--
		dAtA[i] = 0x18
	}
	if m.Irc != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Irc))
		i--
		dAtA[i] = 0x10
	}
	if m.Xid != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Xid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *XAM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *XAM) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *XAM) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Res.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Req.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ReqTime != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.ReqTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLayer2(dAtA []byte, offset int, v uint64) int {
	offset -= sovLayer2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovLayer2(uint64(e))
		}
		n += 1 + sovLayer2(uint64(l)) + l
	}
	return n
}

func (m *Controllers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Whitelist.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Blacklist.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func (m *BinaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *LpPoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ratio.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Drip != 0 {
		n += 1 + sovLayer2(uint64(m.Drip))
	}
	return n
}

func (m *IssuanceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = m.Premint.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Postmint.Size()
	n += 1 + l + sovLayer2(uint64(l))
	if m.Time != 0 {
		n += 1 + sovLayer2(uint64(m.Time))
	}
	return n
}

func (m *Dapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Social)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Docs)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = m.Controllers.Size()
	n += 1 + l + sovLayer2(uint64(l))
	if len(m.Bin) > 0 {
		for _, e := range m.Bin {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	l = m.Pool.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Issuance.Size()
	n += 1 + l + sovLayer2(uint64(l))
	if m.UpdateTimeMax != 0 {
		n += 1 + sovLayer2(uint64(m.UpdateTimeMax))
	}
	if m.ExecutorsMin != 0 {
		n += 1 + sovLayer2(uint64(m.ExecutorsMin))
	}
	if m.ExecutorsMax != 0 {
		n += 1 + sovLayer2(uint64(m.ExecutorsMax))
	}
	if m.VerifiersMin != 0 {
		n += 1 + sovLayer2(uint64(m.VerifiersMin))
	}
	l = m.TotalBond.Size()
	n += 2 + l + sovLayer2(uint64(l))
	if m.CreationTime != 0 {
		n += 2 + sovLayer2(uint64(m.CreationTime))
	}
	if m.Status != 0 {
		n += 2 + sovLayer2(uint64(m.Status))
	}
	l = m.VoteQuorum.Size()
	n += 2 + l + sovLayer2(uint64(l))
	if m.VotePeriod != 0 {
		n += 2 + sovLayer2(uint64(m.VotePeriod))
	}
	if m.VoteEnactment != 0 {
		n += 2 + sovLayer2(uint64(m.VoteEnactment))
	}
	if m.LiquidationStart != 0 {
		n += 2 + sovLayer2(uint64(m.LiquidationStart))
	}
	l = m.PoolFee.Size()
	n += 2 + l + sovLayer2(uint64(l))
	l = len(m.TeamReserve)
	if l > 0 {
		n += 2 + l + sovLayer2(uint64(l))
	}
	if m.PremintTime != 0 {
		n += 2 + sovLayer2(uint64(m.PremintTime))
	}
	if m.PostMintPaid {
		n += 3
	}
	if m.EnableBondVerifiers {
		n += 3
	}
	return n
}

func (m *UserDappBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func (m *DappOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Executor {
		n += 2
	}
	if m.Verifier {
		n += 2
	}
	l = len(m.Interx)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovLayer2(uint64(m.Status))
	}
	if m.Rank != 0 {
		n += 1 + sovLayer2(uint64(m.Rank))
	}
	if m.Streak != 0 {
		n += 1 + sovLayer2(uint64(m.Streak))
	}
	if m.Mischance != 0 {
		n += 1 + sovLayer2(uint64(m.Mischance))
	}
	if m.VerifiedSessions != 0 {
		n += 1 + sovLayer2(uint64(m.VerifiedSessions))
	}
	if m.MissedSessions != 0 {
		n += 1 + sovLayer2(uint64(m.MissedSessions))
	}
	l = m.BondedLpAmount.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func (m *DappLeaderDenouncement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Denouncement)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *DappSession) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Leader)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Start != 0 {
		n += 1 + sovLayer2(uint64(m.Start))
	}
	l = len(m.StatusHash)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovLayer2(uint64(m.Status))
	}
	l = len(m.Gateway)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if len(m.OnchainMessages) > 0 {
		for _, e := range m.OnchainMessages {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	return n
}

func (m *DappSessionApproval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Approver)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.IsApproved {
		n += 2
	}
	return n
}

func (m *ExecutionRegistrar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.PrevSession != nil {
		l = m.PrevSession.Size()
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.CurrSession != nil {
		l = m.CurrSession.Size()
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.NextSession != nil {
		l = m.NextSession.Size()
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *BridgeRegistrarHelper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextUser != 0 {
		n += 1 + sovLayer2(uint64(m.NextUser))
	}
	if m.NextXam != 0 {
		n += 1 + sovLayer2(uint64(m.NextXam))
	}
	if m.NextToken != 0 {
		n += 1 + sovLayer2(uint64(m.NextToken))
	}
	return n
}

func (m *BridgeRegistrar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Helper != nil {
		l = m.Helper.Size()
		n += 1 + l + sovLayer2(uint64(l))
	}
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	if len(m.Xams) > 0 {
		for _, e := range m.Xams {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	return n
}

func (m *BridgeBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeTokenIndex != 0 {
		n += 1 + sovLayer2(uint64(m.BridgeTokenIndex))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func (m *BridgeAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLayer2(uint64(m.Index))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	return n
}

func (m *BridgeToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovLayer2(uint64(m.Index))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *XAMRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amounts) > 0 {
		for _, e := range m.Amounts {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	if m.SourceDapp != 0 {
		n += 1 + sovLayer2(uint64(m.SourceDapp))
	}
	if m.SourceAccount != 0 {
		n += 1 + sovLayer2(uint64(m.SourceAccount))
	}
	if m.DestDapp != 0 {
		n += 1 + sovLayer2(uint64(m.DestDapp))
	}
	if m.DestBeneficiary != 0 {
		n += 1 + sovLayer2(uint64(m.DestBeneficiary))
	}
	l = len(m.Xam)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *XAMResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Xid != 0 {
		n += 1 + sovLayer2(uint64(m.Xid))
	}
	if m.Irc != 0 {
		n += 1 + sovLayer2(uint64(m.Irc))
	}
	if m.Src != 0 {
		n += 1 + sovLayer2(uint64(m.Src))
	}
	if m.Drc != 0 {
		n += 1 + sovLayer2(uint64(m.Drc))
	}
	if m.Irm != 0 {
		n += 1 + sovLayer2(uint64(m.Irm))
	}
	if m.Srm != 0 {
		n += 1 + sovLayer2(uint64(m.Srm))
	}
	if m.Drm != 0 {
		n += 1 + sovLayer2(uint64(m.Drm))
	}
	return n
}

func (m *XAM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReqTime != 0 {
		n += 1 + sovLayer2(uint64(m.ReqTime))
	}
	l = m.Req.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Res.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func sovLayer2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLayer2(x uint64) (n int) {
	return sovLayer2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLayer2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLayer2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLayer2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Controllers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Controllers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Controllers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Whitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blacklist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LpPoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LpPoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LpPoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drip", wireType)
			}
			m.Drip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Drip |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuanceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuanceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuanceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Premint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postmint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Postmint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Social", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Social = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Controllers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bin = append(m.Bin, BinaryInfo{})
			if err := m.Bin[len(m.Bin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimeMax", wireType)
			}
			m.UpdateTimeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTimeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorsMin", wireType)
			}
			m.ExecutorsMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorsMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorsMax", wireType)
			}
			m.ExecutorsMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorsMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiersMin", wireType)
			}
			m.VerifiersMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifiersMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= DappStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VoteQuorum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteEnactment", wireType)
			}
			m.VoteEnactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteEnactment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationStart", wireType)
			}
			m.LiquidationStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamReserve = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PremintTime", wireType)
			}
			m.PremintTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PremintTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostMintPaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PostMintPaid = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableBondVerifiers", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableBondVerifiers = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDappBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDappBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDappBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DappOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DappOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DappOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executor = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verifier = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Interx", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Interx = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OperatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rank", wireType)
			}
			m.Rank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rank |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Streak", wireType)
			}
			m.Streak = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Streak |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mischance", wireType)
			}
			m.Mischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mischance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedSessions", wireType)
			}
			m.VerifiedSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifiedSessions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedSessions", wireType)
			}
			m.MissedSessions = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedSessions |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedLpAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondedLpAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DappLeaderDenouncement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DappLeaderDenouncement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DappLeaderDenouncement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denouncement", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denouncement = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DappSession) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DappSession: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DappSession: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SessionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateway", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gateway = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnchainMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OnchainMessages = append(m.OnchainMessages, &types.Any{})
			if err := m.OnchainMessages[len(m.OnchainMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DappSessionApproval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DappSessionApproval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DappSessionApproval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsApproved", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsApproved = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionRegistrar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionRegistrar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionRegistrar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrevSession == nil {
				m.PrevSession = &DappSession{}
			}
			if err := m.PrevSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CurrSession == nil {
				m.CurrSession = &DappSession{}
			}
			if err := m.CurrSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSession", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextSession == nil {
				m.NextSession = &DappSession{}
			}
			if err := m.NextSession.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeRegistrarHelper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeRegistrarHelper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeRegistrarHelper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextUser", wireType)
			}
			m.NextUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextXam", wireType)
			}
			m.NextXam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextXam |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextToken", wireType)
			}
			m.NextToken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextToken |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeRegistrar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeRegistrar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeRegistrar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Helper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Helper == nil {
				m.Helper = &BridgeRegistrarHelper{}
			}
			if err := m.Helper.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, BridgeAccount{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, BridgeToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xams = append(m.Xams, XAM{})
			if err := m.Xams[len(m.Xams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTokenIndex", wireType)
			}
			m.BridgeTokenIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BridgeTokenIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, BridgeBalance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XAMRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAMRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAMRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amounts = append(m.Amounts, BridgeBalance{})
			if err := m.Amounts[len(m.Amounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDapp", wireType)
			}
			m.SourceDapp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceDapp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAccount", wireType)
			}
			m.SourceAccount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceAccount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestDapp", wireType)
			}
			m.DestDapp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestDapp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestBeneficiary", wireType)
			}
			m.DestBeneficiary = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestBeneficiary |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xam", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Xam = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XAMResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAMResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAMResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Xid", wireType)
			}
			m.Xid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Xid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Irc", wireType)
			}
			m.Irc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Irc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Src", wireType)
			}
			m.Src = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Src |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drc", wireType)
			}
			m.Drc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Drc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Irm", wireType)
			}
			m.Irm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Irm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Srm", wireType)
			}
			m.Srm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Srm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drm", wireType)
			}
			m.Drm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Drm |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *XAM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: XAM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: XAM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqTime", wireType)
			}
			m.ReqTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Req", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Req.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Res.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLayer2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLayer2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLayer2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLayer2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLayer2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLayer2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLayer2 = fmt.Errorf("proto: unexpected end of group")
)
