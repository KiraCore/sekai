// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/layer2/layer2.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AccountRange struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Roles     []uint64 `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
}

func (m *AccountRange) Reset()         { *m = AccountRange{} }
func (m *AccountRange) String() string { return proto.CompactTextString(m) }
func (*AccountRange) ProtoMessage()    {}
func (*AccountRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{0}
}
func (m *AccountRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountRange.Merge(m, src)
}
func (m *AccountRange) XXX_Size() int {
	return m.Size()
}
func (m *AccountRange) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountRange.DiscardUnknown(m)
}

var xxx_messageInfo_AccountRange proto.InternalMessageInfo

func (m *AccountRange) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *AccountRange) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

type Controllers struct {
	Whitelist AccountRange `protobuf:"bytes,1,opt,name=whitelist,proto3" json:"whitelist"`
	Blacklist AccountRange `protobuf:"bytes,2,opt,name=blacklist,proto3" json:"blacklist"`
}

func (m *Controllers) Reset()         { *m = Controllers{} }
func (m *Controllers) String() string { return proto.CompactTextString(m) }
func (*Controllers) ProtoMessage()    {}
func (*Controllers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{1}
}
func (m *Controllers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Controllers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Controllers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Controllers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Controllers.Merge(m, src)
}
func (m *Controllers) XXX_Size() int {
	return m.Size()
}
func (m *Controllers) XXX_DiscardUnknown() {
	xxx_messageInfo_Controllers.DiscardUnknown(m)
}

var xxx_messageInfo_Controllers proto.InternalMessageInfo

func (m *Controllers) GetWhitelist() AccountRange {
	if m != nil {
		return m.Whitelist
	}
	return AccountRange{}
}

func (m *Controllers) GetBlacklist() AccountRange {
	if m != nil {
		return m.Blacklist
	}
	return AccountRange{}
}

type BinaryInfo struct {
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hash      string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Source    string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	Reference string `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Type      string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *BinaryInfo) Reset()         { *m = BinaryInfo{} }
func (m *BinaryInfo) String() string { return proto.CompactTextString(m) }
func (*BinaryInfo) ProtoMessage()    {}
func (*BinaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{2}
}
func (m *BinaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BinaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryInfo.Merge(m, src)
}
func (m *BinaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *BinaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryInfo proto.InternalMessageInfo

func (m *BinaryInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BinaryInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BinaryInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *BinaryInfo) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *BinaryInfo) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type LpPoolConfig struct {
	Ratio   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	Deposit string                                 `protobuf:"bytes,2,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Drip    uint64                                 `protobuf:"varint,3,opt,name=drip,proto3" json:"drip,omitempty"`
}

func (m *LpPoolConfig) Reset()         { *m = LpPoolConfig{} }
func (m *LpPoolConfig) String() string { return proto.CompactTextString(m) }
func (*LpPoolConfig) ProtoMessage()    {}
func (*LpPoolConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{3}
}
func (m *LpPoolConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LpPoolConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LpPoolConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LpPoolConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LpPoolConfig.Merge(m, src)
}
func (m *LpPoolConfig) XXX_Size() int {
	return m.Size()
}
func (m *LpPoolConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_LpPoolConfig.DiscardUnknown(m)
}

var xxx_messageInfo_LpPoolConfig proto.InternalMessageInfo

func (m *LpPoolConfig) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *LpPoolConfig) GetDrip() uint64 {
	if m != nil {
		return m.Drip
	}
	return 0
}

type IssuranceConfig struct {
	Deposit  string `protobuf:"bytes,1,opt,name=deposit,proto3" json:"deposit,omitempty"`
	Premint  uint64 `protobuf:"varint,2,opt,name=premint,proto3" json:"premint,omitempty"`
	Postmint uint64 `protobuf:"varint,3,opt,name=postmint,proto3" json:"postmint,omitempty"`
	Time     uint64 `protobuf:"varint,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *IssuranceConfig) Reset()         { *m = IssuranceConfig{} }
func (m *IssuranceConfig) String() string { return proto.CompactTextString(m) }
func (*IssuranceConfig) ProtoMessage()    {}
func (*IssuranceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{4}
}
func (m *IssuranceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IssuranceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IssuranceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IssuranceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IssuranceConfig.Merge(m, src)
}
func (m *IssuranceConfig) XXX_Size() int {
	return m.Size()
}
func (m *IssuranceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_IssuranceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_IssuranceConfig proto.InternalMessageInfo

func (m *IssuranceConfig) GetDeposit() string {
	if m != nil {
		return m.Deposit
	}
	return ""
}

func (m *IssuranceConfig) GetPremint() uint64 {
	if m != nil {
		return m.Premint
	}
	return 0
}

func (m *IssuranceConfig) GetPostmint() uint64 {
	if m != nil {
		return m.Postmint
	}
	return 0
}

func (m *IssuranceConfig) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Dapp struct {
	Name          string                                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Denom         string                                  `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Description   string                                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Website       string                                  `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty"`
	Logo          string                                  `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Social        string                                  `protobuf:"bytes,6,opt,name=social,proto3" json:"social,omitempty"`
	Docs          string                                  `protobuf:"bytes,7,opt,name=docs,proto3" json:"docs,omitempty"`
	Controllers   Controllers                             `protobuf:"bytes,8,opt,name=controllers,proto3" json:"controllers"`
	Bin           []BinaryInfo                            `protobuf:"bytes,9,rep,name=bin,proto3" json:"bin"`
	Pool          LpPoolConfig                            `protobuf:"bytes,10,opt,name=pool,proto3" json:"pool"`
	Issurance     IssuranceConfig                         `protobuf:"bytes,11,opt,name=issurance,proto3" json:"issurance"`
	UpdateTimeMax uint64                                  `protobuf:"varint,12,opt,name=update_time_max,json=updateTimeMax,proto3" json:"update_time_max,omitempty"`
	ExecutorsMin  uint64                                  `protobuf:"varint,13,opt,name=executors_min,json=executorsMin,proto3" json:"executors_min,omitempty"`
	ExecutorsMax  uint64                                  `protobuf:"varint,14,opt,name=executors_max,json=executorsMax,proto3" json:"executors_max,omitempty"`
	VerifiersMin  uint64                                  `protobuf:"varint,15,opt,name=verifiers_min,json=verifiersMin,proto3" json:"verifiers_min,omitempty"`
	TotalBond     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,16,opt,name=total_bond,json=totalBond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_bond"`
	CreationTime  uint64                                  `protobuf:"varint,17,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (m *Dapp) Reset()         { *m = Dapp{} }
func (m *Dapp) String() string { return proto.CompactTextString(m) }
func (*Dapp) ProtoMessage()    {}
func (*Dapp) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{5}
}
func (m *Dapp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dapp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dapp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dapp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dapp.Merge(m, src)
}
func (m *Dapp) XXX_Size() int {
	return m.Size()
}
func (m *Dapp) XXX_DiscardUnknown() {
	xxx_messageInfo_Dapp.DiscardUnknown(m)
}

var xxx_messageInfo_Dapp proto.InternalMessageInfo

func (m *Dapp) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Dapp) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Dapp) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Dapp) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *Dapp) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Dapp) GetSocial() string {
	if m != nil {
		return m.Social
	}
	return ""
}

func (m *Dapp) GetDocs() string {
	if m != nil {
		return m.Docs
	}
	return ""
}

func (m *Dapp) GetControllers() Controllers {
	if m != nil {
		return m.Controllers
	}
	return Controllers{}
}

func (m *Dapp) GetBin() []BinaryInfo {
	if m != nil {
		return m.Bin
	}
	return nil
}

func (m *Dapp) GetPool() LpPoolConfig {
	if m != nil {
		return m.Pool
	}
	return LpPoolConfig{}
}

func (m *Dapp) GetIssurance() IssuranceConfig {
	if m != nil {
		return m.Issurance
	}
	return IssuranceConfig{}
}

func (m *Dapp) GetUpdateTimeMax() uint64 {
	if m != nil {
		return m.UpdateTimeMax
	}
	return 0
}

func (m *Dapp) GetExecutorsMin() uint64 {
	if m != nil {
		return m.ExecutorsMin
	}
	return 0
}

func (m *Dapp) GetExecutorsMax() uint64 {
	if m != nil {
		return m.ExecutorsMax
	}
	return 0
}

func (m *Dapp) GetVerifiersMin() uint64 {
	if m != nil {
		return m.VerifiersMin
	}
	return 0
}

func (m *Dapp) GetCreationTime() uint64 {
	if m != nil {
		return m.CreationTime
	}
	return 0
}

type UserDappBond struct {
	User     string                                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	DappName string                                  `protobuf:"bytes,2,opt,name=dapp_name,json=dappName,proto3" json:"dapp_name,omitempty"`
	Bond     github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,opt,name=bond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bond"`
}

func (m *UserDappBond) Reset()         { *m = UserDappBond{} }
func (m *UserDappBond) String() string { return proto.CompactTextString(m) }
func (*UserDappBond) ProtoMessage()    {}
func (*UserDappBond) Descriptor() ([]byte, []int) {
	return fileDescriptor_4070283bbe72a11a, []int{6}
}
func (m *UserDappBond) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserDappBond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserDappBond.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserDappBond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDappBond.Merge(m, src)
}
func (m *UserDappBond) XXX_Size() int {
	return m.Size()
}
func (m *UserDappBond) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDappBond.DiscardUnknown(m)
}

var xxx_messageInfo_UserDappBond proto.InternalMessageInfo

func (m *UserDappBond) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *UserDappBond) GetDappName() string {
	if m != nil {
		return m.DappName
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountRange)(nil), "kira.layer2.AccountRange")
	proto.RegisterType((*Controllers)(nil), "kira.layer2.Controllers")
	proto.RegisterType((*BinaryInfo)(nil), "kira.layer2.BinaryInfo")
	proto.RegisterType((*LpPoolConfig)(nil), "kira.layer2.LpPoolConfig")
	proto.RegisterType((*IssuranceConfig)(nil), "kira.layer2.IssuranceConfig")
	proto.RegisterType((*Dapp)(nil), "kira.layer2.Dapp")
	proto.RegisterType((*UserDappBond)(nil), "kira.layer2.UserDappBond")
}

func init() { proto.RegisterFile("kira/layer2/layer2.proto", fileDescriptor_4070283bbe72a11a) }

var fileDescriptor_4070283bbe72a11a = []byte{
	// 791 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xae, 0x37, 0x4e, 0x5b, 0x4f, 0x52, 0x0a, 0xa3, 0x0a, 0x86, 0xb2, 0x4a, 0xa3, 0x20, 0x2d,
	0xb9, 0x10, 0x4b, 0xdd, 0x33, 0xd2, 0x92, 0x54, 0x48, 0x2b, 0xd8, 0x15, 0xb2, 0xe0, 0xc2, 0x25,
	0x9a, 0xd8, 0x2f, 0xee, 0xa8, 0xf6, 0x3c, 0x6b, 0x66, 0xcc, 0xa6, 0x17, 0x0e, 0x88, 0x1b, 0x17,
	0x7e, 0x03, 0x27, 0x7e, 0xca, 0x1e, 0xf7, 0x88, 0x38, 0xac, 0x50, 0xfb, 0x47, 0xd0, 0xcc, 0xd8,
	0x89, 0x53, 0xed, 0x61, 0xc5, 0xc9, 0xef, 0x3d, 0xbf, 0xef, 0x9b, 0xcf, 0xef, 0x7d, 0x93, 0x10,
	0x76, 0x23, 0x14, 0x8f, 0x0b, 0x7e, 0x0b, 0xea, 0xb2, 0x79, 0xcc, 0x2a, 0x85, 0x06, 0xe9, 0xc0,
	0xbe, 0x99, 0xf9, 0xd2, 0xf9, 0x59, 0x8e, 0x39, 0xba, 0x7a, 0x6c, 0x23, 0xdf, 0x72, 0x7e, 0x91,
	0x23, 0xe6, 0x05, 0xc4, 0x2e, 0x5b, 0xd5, 0xeb, 0xd8, 0x88, 0x12, 0xb4, 0xe1, 0x65, 0xe5, 0x1b,
	0x26, 0x73, 0x32, 0xfc, 0x3a, 0x4d, 0xb1, 0x96, 0x26, 0xe1, 0x32, 0x07, 0xfa, 0x98, 0x44, 0x3c,
	0xcb, 0x14, 0x68, 0x0d, 0x9a, 0x05, 0xe3, 0xde, 0x34, 0x4a, 0x76, 0x05, 0x7a, 0x46, 0xfa, 0x0a,
	0x0b, 0xd0, 0xec, 0xd1, 0xb8, 0x37, 0x0d, 0x13, 0x9f, 0x4c, 0x7e, 0x0f, 0xc8, 0x60, 0x81, 0xd2,
	0x28, 0x2c, 0x0a, 0x50, 0x9a, 0x7e, 0x45, 0xa2, 0x57, 0xd7, 0xc2, 0x40, 0x21, 0xb4, 0x61, 0xc1,
	0x38, 0x98, 0x0e, 0x2e, 0x3f, 0x9d, 0x75, 0xb4, 0xce, 0xba, 0x27, 0xce, 0xc3, 0xd7, 0x6f, 0x2f,
	0x0e, 0x92, 0x1d, 0xc2, 0xc2, 0x57, 0x05, 0x4f, 0x6f, 0x1c, 0xfc, 0xd1, 0x7b, 0xc2, 0xb7, 0x88,
	0xc9, 0x2f, 0x84, 0xcc, 0x85, 0xe4, 0xea, 0xf6, 0xb9, 0x5c, 0x23, 0xa5, 0x24, 0x94, 0xbc, 0x04,
	0x27, 0x23, 0x4a, 0x5c, 0x6c, 0x6b, 0xd7, 0x5c, 0x5f, 0x3b, 0xee, 0x28, 0x71, 0x31, 0xfd, 0x98,
	0x1c, 0x6a, 0xac, 0x55, 0x0a, 0xac, 0xe7, 0xaa, 0x4d, 0x66, 0xe7, 0xa1, 0x60, 0x0d, 0x0a, 0x64,
	0x0a, 0x2c, 0x74, 0xaf, 0x76, 0x05, 0xcb, 0x64, 0x6e, 0x2b, 0x60, 0x7d, 0xcf, 0x64, 0xe3, 0xc9,
	0xaf, 0x01, 0x19, 0x7e, 0x57, 0x7d, 0x8f, 0x58, 0x2c, 0x50, 0xae, 0x45, 0x4e, 0xaf, 0x48, 0x5f,
	0x71, 0x23, 0xd0, 0x6b, 0x98, 0xcf, 0xac, 0xe0, 0x7f, 0xde, 0x5e, 0x3c, 0xc9, 0x85, 0xb9, 0xae,
	0x57, 0xb3, 0x14, 0xcb, 0x38, 0x45, 0x5d, 0xa2, 0x6e, 0x1e, 0x5f, 0xea, 0xec, 0x26, 0xb6, 0x54,
	0x7a, 0x76, 0x05, 0x69, 0xe2, 0xc1, 0x94, 0x91, 0xa3, 0x0c, 0x2a, 0xd4, 0xc2, 0x34, 0xba, 0xdb,
	0xd4, 0x8a, 0xc8, 0x94, 0xa8, 0x9c, 0xf0, 0x30, 0x71, 0xf1, 0xa4, 0x26, 0xa7, 0xcf, 0xb5, 0xae,
	0x15, 0x97, 0x29, 0x34, 0x32, 0x3a, 0x04, 0xc1, 0x3e, 0x01, 0x23, 0x47, 0x95, 0x82, 0x52, 0x48,
	0x4f, 0x1d, 0x26, 0x6d, 0x4a, 0xcf, 0xc9, 0x71, 0x85, 0xda, 0xb8, 0x57, 0x9e, 0x7e, 0x9b, 0xbb,
	0x6f, 0x17, 0xa5, 0x1f, 0x4a, 0x98, 0xb8, 0x78, 0xf2, 0x67, 0x9f, 0x84, 0x57, 0xbc, 0xaa, 0xde,
	0x39, 0xf6, 0x33, 0xd2, 0xcf, 0x40, 0x62, 0xd9, 0xe8, 0xf7, 0x09, 0x1d, 0x93, 0x41, 0x06, 0x3a,
	0x55, 0xa2, 0x32, 0x02, 0x65, 0x33, 0xfd, 0x6e, 0xc9, 0xca, 0x7b, 0x05, 0x2b, 0x2d, 0x4c, 0xbb,
	0x80, 0x36, 0xb5, 0xa7, 0x14, 0x98, 0x63, 0x3b, 0x7e, 0x1b, 0xfb, 0x45, 0xa6, 0x82, 0x17, 0xec,
	0xb0, 0x5d, 0xa4, 0xcd, 0xdc, 0x94, 0x30, 0xd5, 0xec, 0xc8, 0xf7, 0xda, 0x98, 0x3e, 0x23, 0x83,
	0x74, 0xe7, 0x5b, 0x76, 0xec, 0xbc, 0xc6, 0xf6, 0xbc, 0xd6, 0xf1, 0x75, 0x63, 0xb5, 0x2e, 0x84,
	0xc6, 0xa4, 0xb7, 0x12, 0x92, 0x45, 0xe3, 0xde, 0x74, 0x70, 0xf9, 0xc9, 0x1e, 0x72, 0x67, 0xc2,
	0x06, 0x68, 0x3b, 0xe9, 0x53, 0x12, 0x56, 0x88, 0x05, 0x23, 0xef, 0xf0, 0x75, 0xd7, 0x35, 0x0d,
	0xc6, 0x35, 0xd3, 0x67, 0x24, 0x12, 0xed, 0x36, 0xd9, 0xc0, 0x21, 0x1f, 0xef, 0x21, 0x1f, 0xec,
	0xba, 0xbd, 0x14, 0x5b, 0x10, 0x7d, 0x42, 0x4e, 0xeb, 0x2a, 0xe3, 0x06, 0x96, 0x76, 0x4f, 0xcb,
	0x92, 0x6f, 0xd8, 0xd0, 0xed, 0xed, 0xc4, 0x97, 0x7f, 0x10, 0x25, 0xbc, 0xe0, 0x1b, 0xfa, 0x39,
	0x39, 0x81, 0x0d, 0xa4, 0xb5, 0x41, 0xa5, 0x97, 0xa5, 0x90, 0xec, 0xc4, 0x75, 0x0d, 0xb7, 0xc5,
	0x17, 0x42, 0x3e, 0x68, 0xe2, 0x1b, 0xf6, 0xc1, 0xc3, 0x26, 0xcf, 0xf4, 0x33, 0x28, 0xb1, 0x16,
	0xd0, 0x30, 0x9d, 0xfa, 0xa6, 0x6d, 0xd1, 0x32, 0xbd, 0x24, 0xc4, 0xa0, 0xe1, 0xc5, 0x72, 0x85,
	0x32, 0x63, 0x1f, 0xba, 0xfb, 0x11, 0x37, 0xf7, 0xe3, 0x8b, 0xf7, 0xb8, 0x1f, 0x0b, 0x14, 0x32,
	0x89, 0x1c, 0xc5, 0x1c, 0x65, 0x66, 0x0f, 0x4d, 0x15, 0xd8, 0xfb, 0x22, 0xdd, 0x87, 0xb2, 0x8f,
	0xfc, 0xa1, 0x6d, 0xd1, 0x7e, 0xe6, 0xe4, 0xb7, 0x80, 0x0c, 0x7f, 0xd4, 0xa0, 0xac, 0x51, 0x1d,
	0x8a, 0x92, 0xb0, 0xd6, 0xa0, 0x5a, 0xb3, 0xda, 0x98, 0x7e, 0x46, 0xa2, 0x8c, 0x57, 0xd5, 0xd2,
	0xb9, 0xd8, 0x1b, 0xf6, 0xd8, 0x16, 0x5e, 0x5a, 0x27, 0x2f, 0x48, 0xe8, 0x04, 0xf7, 0xfe, 0x9f,
	0x60, 0x07, 0x9e, 0x7f, 0xf3, 0xd7, 0xdd, 0x28, 0x78, 0x7d, 0x37, 0x0a, 0xde, 0xdc, 0x8d, 0x82,
	0x7f, 0xef, 0x46, 0xc1, 0x1f, 0xf7, 0xa3, 0x83, 0x37, 0xf7, 0xa3, 0x83, 0xbf, 0xef, 0x47, 0x07,
	0x3f, 0x4d, 0x3b, 0x64, 0xdf, 0x0a, 0xc5, 0x17, 0xa8, 0x20, 0xd6, 0x70, 0xc3, 0x45, 0xbc, 0x69,
	0xff, 0x0c, 0x1c, 0xe5, 0xea, 0xd0, 0xfd, 0x90, 0x3f, 0xfd, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xda,
	0xb4, 0xdb, 0x8b, 0x28, 0x06, 0x00, 0x00,
}

func (this *AccountRange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountRange)
	if !ok {
		that2, ok := that.(AccountRange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	return true
}
func (this *Controllers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Controllers)
	if !ok {
		that2, ok := that.(Controllers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Whitelist.Equal(&that1.Whitelist) {
		return false
	}
	if !this.Blacklist.Equal(&that1.Blacklist) {
		return false
	}
	return true
}
func (this *BinaryInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BinaryInfo)
	if !ok {
		that2, ok := that.(BinaryInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Source != that1.Source {
		return false
	}
	if this.Reference != that1.Reference {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *LpPoolConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LpPoolConfig)
	if !ok {
		that2, ok := that.(LpPoolConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Ratio.Equal(that1.Ratio) {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	if this.Drip != that1.Drip {
		return false
	}
	return true
}
func (this *IssuranceConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*IssuranceConfig)
	if !ok {
		that2, ok := that.(IssuranceConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	if this.Premint != that1.Premint {
		return false
	}
	if this.Postmint != that1.Postmint {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	return true
}
func (this *Dapp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Dapp)
	if !ok {
		that2, ok := that.(Dapp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Website != that1.Website {
		return false
	}
	if this.Logo != that1.Logo {
		return false
	}
	if this.Social != that1.Social {
		return false
	}
	if this.Docs != that1.Docs {
		return false
	}
	if !this.Controllers.Equal(&that1.Controllers) {
		return false
	}
	if len(this.Bin) != len(that1.Bin) {
		return false
	}
	for i := range this.Bin {
		if !this.Bin[i].Equal(&that1.Bin[i]) {
			return false
		}
	}
	if !this.Pool.Equal(&that1.Pool) {
		return false
	}
	if !this.Issurance.Equal(&that1.Issurance) {
		return false
	}
	if this.UpdateTimeMax != that1.UpdateTimeMax {
		return false
	}
	if this.ExecutorsMin != that1.ExecutorsMin {
		return false
	}
	if this.ExecutorsMax != that1.ExecutorsMax {
		return false
	}
	if this.VerifiersMin != that1.VerifiersMin {
		return false
	}
	if !this.TotalBond.Equal(that1.TotalBond) {
		return false
	}
	if this.CreationTime != that1.CreationTime {
		return false
	}
	return true
}
func (this *UserDappBond) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UserDappBond)
	if !ok {
		that2, ok := that.(UserDappBond)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.DappName != that1.DappName {
		return false
	}
	if !this.Bond.Equal(that1.Bond) {
		return false
	}
	return true
}
func (m *AccountRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintLayer2(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintLayer2(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Controllers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Controllers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Controllers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Blacklist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Whitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BinaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BinaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LpPoolConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LpPoolConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LpPoolConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Drip != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Drip))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IssuranceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IssuranceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IssuranceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x20
	}
	if m.Postmint != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Postmint))
		i--
		dAtA[i] = 0x18
	}
	if m.Premint != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.Premint))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Dapp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dapp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dapp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreationTime != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.CreationTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size := m.TotalBond.Size()
		i -= size
		if _, err := m.TotalBond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.VerifiersMin != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.VerifiersMin))
		i--
		dAtA[i] = 0x78
	}
	if m.ExecutorsMax != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.ExecutorsMax))
		i--
		dAtA[i] = 0x70
	}
	if m.ExecutorsMin != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.ExecutorsMin))
		i--
		dAtA[i] = 0x68
	}
	if m.UpdateTimeMax != 0 {
		i = encodeVarintLayer2(dAtA, i, uint64(m.UpdateTimeMax))
		i--
		dAtA[i] = 0x60
	}
	{
		size, err := m.Issurance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Bin) > 0 {
		for iNdEx := len(m.Bin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLayer2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.Controllers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Docs) > 0 {
		i -= len(m.Docs)
		copy(dAtA[i:], m.Docs)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Docs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Social) > 0 {
		i -= len(m.Social)
		copy(dAtA[i:], m.Social)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Social)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Logo) > 0 {
		i -= len(m.Logo)
		copy(dAtA[i:], m.Logo)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Logo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserDappBond) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserDappBond) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserDappBond) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Bond.Size()
		i -= size
		if _, err := m.Bond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLayer2(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DappName) > 0 {
		i -= len(m.DappName)
		copy(dAtA[i:], m.DappName)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.DappName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintLayer2(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLayer2(dAtA []byte, offset int, v uint64) int {
	offset -= sovLayer2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccountRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovLayer2(uint64(e))
		}
		n += 1 + sovLayer2(uint64(l)) + l
	}
	return n
}

func (m *Controllers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Whitelist.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Blacklist.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func (m *BinaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	return n
}

func (m *LpPoolConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Ratio.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Drip != 0 {
		n += 1 + sovLayer2(uint64(m.Drip))
	}
	return n
}

func (m *IssuranceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	if m.Premint != 0 {
		n += 1 + sovLayer2(uint64(m.Premint))
	}
	if m.Postmint != 0 {
		n += 1 + sovLayer2(uint64(m.Postmint))
	}
	if m.Time != 0 {
		n += 1 + sovLayer2(uint64(m.Time))
	}
	return n
}

func (m *Dapp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Social)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.Docs)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = m.Controllers.Size()
	n += 1 + l + sovLayer2(uint64(l))
	if len(m.Bin) > 0 {
		for _, e := range m.Bin {
			l = e.Size()
			n += 1 + l + sovLayer2(uint64(l))
		}
	}
	l = m.Pool.Size()
	n += 1 + l + sovLayer2(uint64(l))
	l = m.Issurance.Size()
	n += 1 + l + sovLayer2(uint64(l))
	if m.UpdateTimeMax != 0 {
		n += 1 + sovLayer2(uint64(m.UpdateTimeMax))
	}
	if m.ExecutorsMin != 0 {
		n += 1 + sovLayer2(uint64(m.ExecutorsMin))
	}
	if m.ExecutorsMax != 0 {
		n += 1 + sovLayer2(uint64(m.ExecutorsMax))
	}
	if m.VerifiersMin != 0 {
		n += 1 + sovLayer2(uint64(m.VerifiersMin))
	}
	l = m.TotalBond.Size()
	n += 2 + l + sovLayer2(uint64(l))
	if m.CreationTime != 0 {
		n += 2 + sovLayer2(uint64(m.CreationTime))
	}
	return n
}

func (m *UserDappBond) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = len(m.DappName)
	if l > 0 {
		n += 1 + l + sovLayer2(uint64(l))
	}
	l = m.Bond.Size()
	n += 1 + l + sovLayer2(uint64(l))
	return n
}

func sovLayer2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLayer2(x uint64) (n int) {
	return sovLayer2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowLayer2
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthLayer2
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthLayer2
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowLayer2
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Controllers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Controllers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Controllers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Whitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Blacklist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LpPoolConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LpPoolConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LpPoolConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Drip", wireType)
			}
			m.Drip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Drip |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IssuranceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IssuranceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IssuranceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Premint", wireType)
			}
			m.Premint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Premint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Postmint", wireType)
			}
			m.Postmint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Postmint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dapp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dapp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dapp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Social", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Social = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Docs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Docs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Controllers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Controllers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bin = append(m.Bin, BinaryInfo{})
			if err := m.Bin[len(m.Bin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issurance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issurance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateTimeMax", wireType)
			}
			m.UpdateTimeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateTimeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorsMin", wireType)
			}
			m.ExecutorsMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorsMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutorsMax", wireType)
			}
			m.ExecutorsMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutorsMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiersMin", wireType)
			}
			m.VerifiersMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifiersMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalBond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationTime", wireType)
			}
			m.CreationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserDappBond) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserDappBond: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserDappBond: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DappName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLayer2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLayer2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLayer2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLayer2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLayer2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLayer2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLayer2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLayer2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLayer2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLayer2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLayer2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLayer2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLayer2 = fmt.Errorf("proto: unexpected end of group")
)
