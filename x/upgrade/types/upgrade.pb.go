// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: upgrade.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProposalSoftwareUpgrade struct {
	Resources            *Resource `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	MinHaltTime          int64     `protobuf:"varint,2,opt,name=min_halt_time,json=minHaltTime,proto3" json:"min_halt_time,omitempty"`
	OldChainId           string    `protobuf:"bytes,3,opt,name=old_chain_id,json=oldChainId,proto3" json:"old_chain_id,omitempty"`
	NewChainId           string    `protobuf:"bytes,4,opt,name=new_chain_id,json=newChainId,proto3" json:"new_chain_id,omitempty"`
	RollbackChecksum     string    `protobuf:"bytes,5,opt,name=rollback_checksum,json=rollbackChecksum,proto3" json:"rollback_checksum,omitempty"`
	MaxEnrolmentDuration int64     `protobuf:"varint,6,opt,name=max_enrolment_duration,json=maxEnrolmentDuration,proto3" json:"max_enrolment_duration,omitempty"`
	Memo                 string    `protobuf:"bytes,7,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (m *ProposalSoftwareUpgrade) Reset()         { *m = ProposalSoftwareUpgrade{} }
func (m *ProposalSoftwareUpgrade) String() string { return proto.CompactTextString(m) }
func (*ProposalSoftwareUpgrade) ProtoMessage()    {}
func (*ProposalSoftwareUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6adee5b6c4cf09e, []int{0}
}
func (m *ProposalSoftwareUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalSoftwareUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalSoftwareUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalSoftwareUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalSoftwareUpgrade.Merge(m, src)
}
func (m *ProposalSoftwareUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *ProposalSoftwareUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalSoftwareUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalSoftwareUpgrade proto.InternalMessageInfo

type Resource struct {
	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Git      string `protobuf:"bytes,2,opt,name=git,proto3" json:"git,omitempty"`
	Checkout string `protobuf:"bytes,3,opt,name=checkout,proto3" json:"checkout,omitempty"`
	Checksum string `protobuf:"bytes,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_b6adee5b6c4cf09e, []int{1}
}
func (m *Resource) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return m.Size()
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProposalSoftwareUpgrade)(nil), "kira.upgrade.ProposalSoftwareUpgrade")
	proto.RegisterType((*Resource)(nil), "kira.upgrade.resource")
}

func init() { proto.RegisterFile("upgrade.proto", fileDescriptor_b6adee5b6c4cf09e) }

var fileDescriptor_b6adee5b6c4cf09e = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xb6, 0x8c, 0xd5, 0xdb, 0xd0, 0xb0, 0xa6, 0x11, 0x7a, 0x08, 0x55, 0x4f, 0x45,
	0x48, 0x89, 0x04, 0x3b, 0x71, 0xa4, 0x20, 0x40, 0x5c, 0x50, 0x80, 0x0b, 0x97, 0xc8, 0x8d, 0xdf,
	0xa5, 0xa6, 0xb6, 0xdf, 0xc8, 0xb1, 0xd5, 0xee, 0x5b, 0xf0, 0x11, 0xf8, 0x10, 0x7c, 0x88, 0x1d,
	0x77, 0xe4, 0x08, 0xed, 0x85, 0x8f, 0x31, 0xc5, 0x49, 0xb6, 0xde, 0x1e, 0x3f, 0xcf, 0x4f, 0xef,
	0x1f, 0xbf, 0xe4, 0xc4, 0x95, 0x85, 0x61, 0x1c, 0xe2, 0xd2, 0xa0, 0x45, 0x7a, 0xbc, 0x12, 0x86,
	0xc5, 0xad, 0x37, 0x7e, 0x5a, 0x20, 0x16, 0x12, 0x12, 0x9f, 0x2d, 0xdc, 0x65, 0xc2, 0xf4, 0x55,
	0x03, 0x8e, 0xcf, 0x0a, 0x2c, 0xd0, 0xcb, 0xa4, 0x56, 0x8d, 0x3b, 0xfd, 0xdd, 0x27, 0x4f, 0x3e,
	0x1b, 0x2c, 0xb1, 0x62, 0xf2, 0x0b, 0x5e, 0xda, 0x35, 0x33, 0xf0, 0xad, 0x29, 0x46, 0x2f, 0xc8,
	0xc8, 0x40, 0x85, 0xce, 0xe4, 0x50, 0x85, 0xc1, 0x24, 0x98, 0x1d, 0xbd, 0x3c, 0x8f, 0xf7, 0xdb,
	0xc5, 0x5d, 0x9c, 0xde, 0x83, 0x74, 0x4a, 0x4e, 0x94, 0xd0, 0xd9, 0x92, 0x49, 0x9b, 0x59, 0xa1,
	0x20, 0xec, 0x4f, 0x82, 0xd9, 0x20, 0x3d, 0x52, 0x42, 0x7f, 0x60, 0xd2, 0x7e, 0x15, 0x0a, 0xe8,
	0x84, 0x1c, 0xa3, 0xe4, 0x59, 0xbe, 0x64, 0x42, 0x67, 0x82, 0x87, 0x83, 0x49, 0x30, 0x1b, 0xa5,
	0x04, 0x25, 0x9f, 0xd7, 0xd6, 0x47, 0x5e, 0x13, 0x1a, 0xd6, 0xf7, 0xc4, 0xb0, 0x21, 0x34, 0xac,
	0x3b, 0xe2, 0x05, 0x79, 0x6c, 0x50, 0xca, 0x05, 0xcb, 0x57, 0x59, 0xbe, 0x84, 0x7c, 0x55, 0x39,
	0x15, 0x3e, 0xf0, 0xd8, 0x69, 0x17, 0xcc, 0x5b, 0x9f, 0x5e, 0x90, 0x73, 0xc5, 0x36, 0x19, 0x68,
	0x83, 0x52, 0x81, 0xb6, 0x19, 0x77, 0x86, 0x59, 0x81, 0x3a, 0x3c, 0xf0, 0xd3, 0x9d, 0x29, 0xb6,
	0x79, 0xd7, 0x85, 0x6f, 0xdb, 0x8c, 0x52, 0x32, 0x54, 0xa0, 0x30, 0x7c, 0xe8, 0xab, 0x7a, 0xfd,
	0x7a, 0xf8, 0xff, 0xd7, 0xb3, 0x60, 0xfa, 0x83, 0x1c, 0x76, 0x1b, 0xd3, 0x47, 0xa4, 0x2f, 0xb8,
	0xff, 0x9f, 0x51, 0xda, 0x17, 0x9c, 0x9e, 0x92, 0x41, 0x21, 0xac, 0x5f, 0x7b, 0x94, 0xd6, 0x92,
	0x8e, 0xc9, 0xa1, 0x9f, 0x10, 0x9d, 0x6d, 0x57, 0xbd, 0x7b, 0xdf, 0x65, 0xf5, 0xf4, 0xc3, 0xbd,
	0xac, 0x72, 0xaa, 0xe9, 0xf5, 0xe6, 0xfd, 0xf5, 0xbf, 0xa8, 0x77, 0xbd, 0x8d, 0x82, 0x9b, 0x6d,
	0x14, 0xfc, 0xdd, 0x46, 0xc1, 0xcf, 0x5d, 0xd4, 0xbb, 0xd9, 0x45, 0xbd, 0x3f, 0xbb, 0xa8, 0xf7,
	0xfd, 0x79, 0x21, 0xec, 0xd2, 0x2d, 0xe2, 0x1c, 0x55, 0xf2, 0x49, 0x18, 0x36, 0x47, 0x03, 0x49,
	0x05, 0x2b, 0x26, 0x92, 0x4d, 0xd2, 0xde, 0x29, 0xb1, 0x57, 0x25, 0x54, 0x8b, 0x03, 0x7f, 0xf2,
	0x57, 0xb7, 0x01, 0x00, 0x00, 0xff, 0xff, 0xca, 0x50, 0x8b, 0xea, 0x42, 0x02, 0x00, 0x00,
}

func (this *ProposalSoftwareUpgrade) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ProposalSoftwareUpgrade)
	if !ok {
		that2, ok := that.(ProposalSoftwareUpgrade)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Resources.Equal(that1.Resources) {
		return false
	}
	if this.MinHaltTime != that1.MinHaltTime {
		return false
	}
	if this.OldChainId != that1.OldChainId {
		return false
	}
	if this.NewChainId != that1.NewChainId {
		return false
	}
	if this.RollbackChecksum != that1.RollbackChecksum {
		return false
	}
	if this.MaxEnrolmentDuration != that1.MaxEnrolmentDuration {
		return false
	}
	if this.Memo != that1.Memo {
		return false
	}
	return true
}
func (this *Resource) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Resource)
	if !ok {
		that2, ok := that.(Resource)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Git != that1.Git {
		return false
	}
	if this.Checkout != that1.Checkout {
		return false
	}
	if this.Checksum != that1.Checksum {
		return false
	}
	return true
}
func (m *ProposalSoftwareUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalSoftwareUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalSoftwareUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		i -= len(m.Memo)
		copy(dAtA[i:], m.Memo)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Memo)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MaxEnrolmentDuration != 0 {
		i = encodeVarintUpgrade(dAtA, i, uint64(m.MaxEnrolmentDuration))
		i--
		dAtA[i] = 0x30
	}
	if len(m.RollbackChecksum) > 0 {
		i -= len(m.RollbackChecksum)
		copy(dAtA[i:], m.RollbackChecksum)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.RollbackChecksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewChainId) > 0 {
		i -= len(m.NewChainId)
		copy(dAtA[i:], m.NewChainId)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.NewChainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldChainId) > 0 {
		i -= len(m.OldChainId)
		copy(dAtA[i:], m.OldChainId)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.OldChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MinHaltTime != 0 {
		i = encodeVarintUpgrade(dAtA, i, uint64(m.MinHaltTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Resources != nil {
		{
			size, err := m.Resources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUpgrade(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Resource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Resource) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Resource) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Checkout) > 0 {
		i -= len(m.Checkout)
		copy(dAtA[i:], m.Checkout)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Checkout)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Git) > 0 {
		i -= len(m.Git)
		copy(dAtA[i:], m.Git)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Git)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintUpgrade(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpgrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpgrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalSoftwareUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.MinHaltTime != 0 {
		n += 1 + sovUpgrade(uint64(m.MinHaltTime))
	}
	l = len(m.OldChainId)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.NewChainId)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.RollbackChecksum)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	if m.MaxEnrolmentDuration != 0 {
		n += 1 + sovUpgrade(uint64(m.MaxEnrolmentDuration))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func (m *Resource) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.Git)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.Checkout)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovUpgrade(uint64(l))
	}
	return n
}

func sovUpgrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpgrade(x uint64) (n int) {
	return sovUpgrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalSoftwareUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalSoftwareUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalSoftwareUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &Resource{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinHaltTime", wireType)
			}
			m.MinHaltTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinHaltTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollbackChecksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollbackChecksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEnrolmentDuration", wireType)
			}
			m.MaxEnrolmentDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxEnrolmentDuration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Resource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: resource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: resource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Git", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Git = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpgrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpgrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUpgrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthUpgrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpgrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpgrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpgrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpgrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpgrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpgrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpgrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpgrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpgrade = fmt.Errorf("proto: unexpected end of group")
)
