// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alias.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteType int32

const (
	VoteType_yes     VoteType = 0
	VoteType_no      VoteType = 1
	VoteType_veto    VoteType = 2
	VoteType_abstain VoteType = 3
)

var VoteType_name = map[int32]string{
	0: "yes",
	1: "no",
	2: "veto",
	3: "abstain",
}

var VoteType_value = map[string]int32{
	"yes":     0,
	"no":      1,
	"veto":    2,
	"abstain": 3,
}

func (x VoteType) String() string {
	return proto.EnumName(VoteType_name, int32(x))
}

func (VoteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0327f1f90f50fc0, []int{0}
}

type ProposalStatus int32

const (
	ProposalStatus_undefined ProposalStatus = 0
	ProposalStatus_active    ProposalStatus = 1
	ProposalStatus_rejected  ProposalStatus = 2
	ProposalStatus_passed    ProposalStatus = 3
	ProposalStatus_enacted   ProposalStatus = 4
)

var ProposalStatus_name = map[int32]string{
	0: "undefined",
	1: "active",
	2: "rejected",
	3: "passed",
	4: "enacted",
}

var ProposalStatus_value = map[string]int32{
	"undefined": 0,
	"active":    1,
	"rejected":  2,
	"passed":    3,
	"enacted":   4,
}

func (x ProposalStatus) String() string {
	return proto.EnumName(ProposalStatus_name, int32(x))
}

func (ProposalStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e0327f1f90f50fc0, []int{1}
}

type TokenAlias struct {
	Expiration       uint32         `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Enactment        uint32         `protobuf:"varint,2,opt,name=enactment,proto3" json:"enactment,omitempty"`
	AllowedVoteTypes []VoteType     `protobuf:"varint,3,rep,packed,name=allowed_vote_types,json=allowedVoteTypes,proto3,enum=kira.tokens.VoteType" json:"allowed_vote_types,omitempty"`
	Symbol           string         `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name             string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Icon             string         `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Decimals         uint32         `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Denoms           []string       `protobuf:"bytes,8,rep,name=denoms,proto3" json:"denoms,omitempty"`
	Status           ProposalStatus `protobuf:"varint,9,opt,name=status,proto3,enum=kira.tokens.ProposalStatus" json:"status,omitempty"`
}

func (m *TokenAlias) Reset()         { *m = TokenAlias{} }
func (m *TokenAlias) String() string { return proto.CompactTextString(m) }
func (*TokenAlias) ProtoMessage()    {}
func (*TokenAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0327f1f90f50fc0, []int{0}
}
func (m *TokenAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenAlias.Merge(m, src)
}
func (m *TokenAlias) XXX_Size() int {
	return m.Size()
}
func (m *TokenAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenAlias.DiscardUnknown(m)
}

var xxx_messageInfo_TokenAlias proto.InternalMessageInfo

func (m *TokenAlias) GetExpiration() uint32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *TokenAlias) GetEnactment() uint32 {
	if m != nil {
		return m.Enactment
	}
	return 0
}

func (m *TokenAlias) GetAllowedVoteTypes() []VoteType {
	if m != nil {
		return m.AllowedVoteTypes
	}
	return nil
}

func (m *TokenAlias) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *TokenAlias) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TokenAlias) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *TokenAlias) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *TokenAlias) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *TokenAlias) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_undefined
}

type MsgUpsertTokenAlias struct {
	Expiration       uint32         `protobuf:"varint,1,opt,name=expiration,proto3" json:"expiration,omitempty"`
	Enactment        uint32         `protobuf:"varint,2,opt,name=enactment,proto3" json:"enactment,omitempty"`
	AllowedVoteTypes []VoteType     `protobuf:"varint,3,rep,packed,name=allowed_vote_types,json=allowedVoteTypes,proto3,enum=kira.tokens.VoteType" json:"allowed_vote_types,omitempty"`
	Symbol           string         `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name             string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Icon             string         `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty"`
	Decimals         uint32         `protobuf:"varint,7,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Denoms           []string       `protobuf:"bytes,8,rep,name=denoms,proto3" json:"denoms,omitempty"`
	Status           ProposalStatus `protobuf:"varint,9,opt,name=status,proto3,enum=kira.tokens.ProposalStatus" json:"status,omitempty"`
}

func (m *MsgUpsertTokenAlias) Reset()         { *m = MsgUpsertTokenAlias{} }
func (m *MsgUpsertTokenAlias) String() string { return proto.CompactTextString(m) }
func (*MsgUpsertTokenAlias) ProtoMessage()    {}
func (*MsgUpsertTokenAlias) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0327f1f90f50fc0, []int{1}
}
func (m *MsgUpsertTokenAlias) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpsertTokenAlias) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpsertTokenAlias.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpsertTokenAlias) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpsertTokenAlias.Merge(m, src)
}
func (m *MsgUpsertTokenAlias) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpsertTokenAlias) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpsertTokenAlias.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpsertTokenAlias proto.InternalMessageInfo

func (m *MsgUpsertTokenAlias) GetExpiration() uint32 {
	if m != nil {
		return m.Expiration
	}
	return 0
}

func (m *MsgUpsertTokenAlias) GetEnactment() uint32 {
	if m != nil {
		return m.Enactment
	}
	return 0
}

func (m *MsgUpsertTokenAlias) GetAllowedVoteTypes() []VoteType {
	if m != nil {
		return m.AllowedVoteTypes
	}
	return nil
}

func (m *MsgUpsertTokenAlias) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *MsgUpsertTokenAlias) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpsertTokenAlias) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *MsgUpsertTokenAlias) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *MsgUpsertTokenAlias) GetDenoms() []string {
	if m != nil {
		return m.Denoms
	}
	return nil
}

func (m *MsgUpsertTokenAlias) GetStatus() ProposalStatus {
	if m != nil {
		return m.Status
	}
	return ProposalStatus_undefined
}

func init() {
	proto.RegisterEnum("kira.tokens.VoteType", VoteType_name, VoteType_value)
	proto.RegisterEnum("kira.tokens.ProposalStatus", ProposalStatus_name, ProposalStatus_value)
	proto.RegisterType((*TokenAlias)(nil), "kira.tokens.TokenAlias")
	proto.RegisterType((*MsgUpsertTokenAlias)(nil), "kira.tokens.MsgUpsertTokenAlias")
}

func init() { proto.RegisterFile("alias.proto", fileDescriptor_e0327f1f90f50fc0) }

var fileDescriptor_e0327f1f90f50fc0 = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0x76, 0x70, 0x9c, 0x09, 0x8d, 0x56, 0x8b, 0x40, 0x2b, 0x40, 0x96, 0xd5, 0x93,
	0xd5, 0x83, 0x2d, 0xa5, 0x4f, 0x40, 0x7b, 0x44, 0x48, 0xc8, 0x14, 0x0e, 0x5c, 0xaa, 0x8d, 0x3d,
	0x94, 0x25, 0xf6, 0xae, 0xe5, 0xd9, 0x84, 0xe6, 0x2d, 0x78, 0x1c, 0xae, 0xdc, 0x38, 0xf6, 0xc8,
	0x11, 0x25, 0x2f, 0x82, 0xec, 0xa4, 0xd0, 0x5e, 0x39, 0xf7, 0x36, 0xf3, 0xcd, 0xf8, 0xf7, 0xbf,
	0xff, 0x6a, 0x61, 0xaa, 0x6a, 0xad, 0x28, 0x6b, 0x3b, 0xeb, 0xac, 0x98, 0x2e, 0x75, 0xa7, 0x32,
	0x67, 0x97, 0x68, 0xe8, 0xf8, 0xbb, 0x0f, 0x70, 0xd1, 0x97, 0xaf, 0xfa, 0x0d, 0x11, 0x03, 0xe0,
	0x75, 0xab, 0x3b, 0xe5, 0xb4, 0x35, 0x92, 0x25, 0x2c, 0x3d, 0x2a, 0xee, 0x10, 0xf1, 0x12, 0x26,
	0x68, 0x54, 0xe9, 0x1a, 0x34, 0x4e, 0xfa, 0xc3, 0xf8, 0x1f, 0x10, 0xe7, 0x20, 0x54, 0x5d, 0xdb,
	0xaf, 0x58, 0x5d, 0xae, 0xad, 0xc3, 0x4b, 0xb7, 0x69, 0x91, 0x64, 0x90, 0x04, 0xe9, 0x6c, 0xfe,
	0x34, 0xbb, 0xf3, 0xdb, 0xec, 0x83, 0x75, 0x78, 0xb1, 0x69, 0xb1, 0xe0, 0x87, 0x0f, 0x6e, 0x01,
	0x89, 0x67, 0x10, 0xd2, 0xa6, 0x59, 0xd8, 0x5a, 0x8e, 0x12, 0x96, 0x4e, 0x8a, 0x43, 0x27, 0x04,
	0x8c, 0x8c, 0x6a, 0x50, 0x3e, 0x1a, 0xe8, 0x50, 0xf7, 0x4c, 0x97, 0xd6, 0xc8, 0x70, 0xcf, 0xfa,
	0x5a, 0x3c, 0x87, 0xa8, 0xc2, 0x52, 0x37, 0xaa, 0x26, 0x39, 0x1e, 0x1c, 0xfe, 0xed, 0x7b, 0xed,
	0x0a, 0x8d, 0x6d, 0x48, 0x46, 0x49, 0xd0, 0x6b, 0xef, 0x3b, 0x71, 0x0a, 0x21, 0x39, 0xe5, 0x56,
	0x24, 0x27, 0x09, 0x4b, 0x67, 0xf3, 0x17, 0xf7, 0xcc, 0xbe, 0xed, 0x6c, 0x6b, 0x49, 0xd5, 0xef,
	0x86, 0x95, 0xe2, 0xb0, 0x7a, 0xfc, 0xc3, 0x87, 0x27, 0x6f, 0xe8, 0xea, 0x7d, 0x4b, 0xd8, 0xb9,
	0x87, 0x0c, 0xff, 0x27, 0xc3, 0x93, 0x39, 0x44, 0xb7, 0xae, 0xc5, 0x18, 0x82, 0x0d, 0x12, 0xf7,
	0x44, 0x08, 0xbe, 0xb1, 0x9c, 0x89, 0x08, 0x46, 0x6b, 0x74, 0x96, 0xfb, 0x62, 0x0a, 0x63, 0xb5,
	0x20, 0xa7, 0xb4, 0xe1, 0xc1, 0x49, 0x01, 0xb3, 0xfb, 0x6a, 0xe2, 0x08, 0x26, 0x2b, 0x53, 0xe1,
	0x27, 0x6d, 0xb0, 0xe2, 0x9e, 0x00, 0x08, 0x55, 0xe9, 0xf4, 0x1a, 0x39, 0x13, 0x8f, 0x21, 0xea,
	0xf0, 0x0b, 0x96, 0x0e, 0x2b, 0xee, 0xf7, 0x93, 0x56, 0x11, 0x61, 0xc5, 0x83, 0x5e, 0x73, 0x48,
	0x1d, 0x2b, 0x3e, 0x3a, 0x3b, 0xfb, 0xb9, 0x8d, 0xd9, 0xcd, 0x36, 0x66, 0xbf, 0xb7, 0x31, 0xfb,
	0xb6, 0x8b, 0xbd, 0x9b, 0x5d, 0xec, 0xfd, 0xda, 0xc5, 0xde, 0xc7, 0xf4, 0x4a, 0xbb, 0xcf, 0xab,
	0x45, 0x56, 0xda, 0x26, 0x7f, 0xad, 0x3b, 0x75, 0x6e, 0x3b, 0xcc, 0x09, 0x97, 0x4a, 0xe7, 0xd7,
	0xf9, 0xfe, 0x70, 0xf9, 0x70, 0x47, 0x8b, 0x70, 0x78, 0x5e, 0xa7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x0c, 0x68, 0xf4, 0x93, 0x6d, 0x03, 0x00, 0x00,
}

func (m *TokenAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintAlias(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Decimals != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedVoteTypes) > 0 {
		dAtA2 := make([]byte, len(m.AllowedVoteTypes)*10)
		var j1 int
		for _, num := range m.AllowedVoteTypes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintAlias(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enactment != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Enactment))
		i--
		dAtA[i] = 0x10
	}
	if m.Expiration != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpsertTokenAlias) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpsertTokenAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpsertTokenAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Denoms) > 0 {
		for iNdEx := len(m.Denoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Denoms[iNdEx])
			copy(dAtA[i:], m.Denoms[iNdEx])
			i = encodeVarintAlias(dAtA, i, uint64(len(m.Denoms[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Decimals != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Icon) > 0 {
		i -= len(m.Icon)
		copy(dAtA[i:], m.Icon)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Icon)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintAlias(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedVoteTypes) > 0 {
		dAtA4 := make([]byte, len(m.AllowedVoteTypes)*10)
		var j3 int
		for _, num := range m.AllowedVoteTypes {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintAlias(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if m.Enactment != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Enactment))
		i--
		dAtA[i] = 0x10
	}
	if m.Expiration != 0 {
		i = encodeVarintAlias(dAtA, i, uint64(m.Expiration))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlias(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlias(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokenAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != 0 {
		n += 1 + sovAlias(uint64(m.Expiration))
	}
	if m.Enactment != 0 {
		n += 1 + sovAlias(uint64(m.Enactment))
	}
	if len(m.AllowedVoteTypes) > 0 {
		l = 0
		for _, e := range m.AllowedVoteTypes {
			l += sovAlias(uint64(e))
		}
		n += 1 + sovAlias(uint64(l)) + l
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovAlias(uint64(m.Decimals))
	}
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovAlias(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovAlias(uint64(m.Status))
	}
	return n
}

func (m *MsgUpsertTokenAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Expiration != 0 {
		n += 1 + sovAlias(uint64(m.Expiration))
	}
	if m.Enactment != 0 {
		n += 1 + sovAlias(uint64(m.Enactment))
	}
	if len(m.AllowedVoteTypes) > 0 {
		l = 0
		for _, e := range m.AllowedVoteTypes {
			l += sovAlias(uint64(e))
		}
		n += 1 + sovAlias(uint64(l)) + l
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovAlias(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovAlias(uint64(m.Decimals))
	}
	if len(m.Denoms) > 0 {
		for _, s := range m.Denoms {
			l = len(s)
			n += 1 + l + sovAlias(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovAlias(uint64(m.Status))
	}
	return n
}

func sovAlias(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlias(x uint64) (n int) {
	return sovAlias(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokenAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlias
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enactment", wireType)
			}
			m.Enactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enactment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v VoteType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlias
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VoteType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedVoteTypes = append(m.AllowedVoteTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlias
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlias
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlias
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AllowedVoteTypes) == 0 {
					m.AllowedVoteTypes = make([]VoteType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VoteType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlias
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VoteType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedVoteTypes = append(m.AllowedVoteTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVoteTypes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlias(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlias
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlias
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpsertTokenAlias) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlias
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpsertTokenAlias: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpsertTokenAlias: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			m.Expiration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiration |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enactment", wireType)
			}
			m.Enactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enactment |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v VoteType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlias
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= VoteType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AllowedVoteTypes = append(m.AllowedVoteTypes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlias
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlias
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlias
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.AllowedVoteTypes) == 0 {
					m.AllowedVoteTypes = make([]VoteType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v VoteType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlias
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= VoteType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AllowedVoteTypes = append(m.AllowedVoteTypes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedVoteTypes", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlias
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlias
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denoms = append(m.Denoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ProposalStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlias(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlias
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlias
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlias(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlias
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlias
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlias
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlias
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlias
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlias        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlias          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlias = fmt.Errorf("proto: unexpected end of group")
)
