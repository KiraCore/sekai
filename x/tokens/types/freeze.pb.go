// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/tokens/freeze.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TokensWhiteBlack struct {
	Whitelisted []string `protobuf:"bytes,1,rep,name=whitelisted,proto3" json:"whitelisted,omitempty"`
	Blacklisted []string `protobuf:"bytes,2,rep,name=blacklisted,proto3" json:"blacklisted,omitempty"`
}

func (m *TokensWhiteBlack) Reset()         { *m = TokensWhiteBlack{} }
func (m *TokensWhiteBlack) String() string { return proto.CompactTextString(m) }
func (*TokensWhiteBlack) ProtoMessage()    {}
func (*TokensWhiteBlack) Descriptor() ([]byte, []int) {
	return fileDescriptor_e495d9dec16a732a, []int{0}
}
func (m *TokensWhiteBlack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokensWhiteBlack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokensWhiteBlack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokensWhiteBlack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokensWhiteBlack.Merge(m, src)
}
func (m *TokensWhiteBlack) XXX_Size() int {
	return m.Size()
}
func (m *TokensWhiteBlack) XXX_DiscardUnknown() {
	xxx_messageInfo_TokensWhiteBlack.DiscardUnknown(m)
}

var xxx_messageInfo_TokensWhiteBlack proto.InternalMessageInfo

func (m *TokensWhiteBlack) GetWhitelisted() []string {
	if m != nil {
		return m.Whitelisted
	}
	return nil
}

func (m *TokensWhiteBlack) GetBlacklisted() []string {
	if m != nil {
		return m.Blacklisted
	}
	return nil
}

type ProposalTokensWhiteBlackChange struct {
	IsBlacklist bool     `protobuf:"varint,1,opt,name=is_blacklist,json=isBlacklist,proto3" json:"is_blacklist,omitempty"`
	IsAdd       bool     `protobuf:"varint,2,opt,name=is_add,json=isAdd,proto3" json:"is_add,omitempty"`
	Tokens      []string `protobuf:"bytes,3,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *ProposalTokensWhiteBlackChange) Reset()         { *m = ProposalTokensWhiteBlackChange{} }
func (m *ProposalTokensWhiteBlackChange) String() string { return proto.CompactTextString(m) }
func (*ProposalTokensWhiteBlackChange) ProtoMessage()    {}
func (*ProposalTokensWhiteBlackChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_e495d9dec16a732a, []int{1}
}
func (m *ProposalTokensWhiteBlackChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalTokensWhiteBlackChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalTokensWhiteBlackChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalTokensWhiteBlackChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalTokensWhiteBlackChange.Merge(m, src)
}
func (m *ProposalTokensWhiteBlackChange) XXX_Size() int {
	return m.Size()
}
func (m *ProposalTokensWhiteBlackChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalTokensWhiteBlackChange.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalTokensWhiteBlackChange proto.InternalMessageInfo

func (m *ProposalTokensWhiteBlackChange) GetIsBlacklist() bool {
	if m != nil {
		return m.IsBlacklist
	}
	return false
}

func (m *ProposalTokensWhiteBlackChange) GetIsAdd() bool {
	if m != nil {
		return m.IsAdd
	}
	return false
}

func (m *ProposalTokensWhiteBlackChange) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func init() {
	proto.RegisterType((*TokensWhiteBlack)(nil), "kira.tokens.TokensWhiteBlack")
	proto.RegisterType((*ProposalTokensWhiteBlackChange)(nil), "kira.tokens.ProposalTokensWhiteBlackChange")
}

func init() { proto.RegisterFile("kira/tokens/freeze.proto", fileDescriptor_e495d9dec16a732a) }

var fileDescriptor_e495d9dec16a732a = []byte{
	// 262 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0x2a, 0x22, 0x70, 0x18, 0x50, 0x04, 0x28, 0x62, 0xb0, 0x42, 0xa7, 0x4c, 0xf1,
	0xc0, 0x13, 0x90, 0x8e, 0x2c, 0xa8, 0x42, 0x20, 0xb1, 0x54, 0x4e, 0x73, 0x24, 0xa7, 0x84, 0x3a,
	0xf2, 0x19, 0xf1, 0xe7, 0x29, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x11, 0xe4, 0xa4, 0x45,
	0x55, 0x37, 0xdf, 0xf7, 0xfb, 0xd9, 0x27, 0x7f, 0x3c, 0xaa, 0xd1, 0x28, 0x69, 0x75, 0x0d, 0x2b,
	0x92, 0xcf, 0x06, 0xe0, 0x13, 0xd2, 0xd6, 0x68, 0xab, 0xc3, 0xc0, 0x91, 0x74, 0x24, 0x97, 0x67,
	0xa5, 0x2e, 0xf5, 0x90, 0x4b, 0x77, 0x1a, 0x95, 0xe9, 0x03, 0x3f, 0xbd, 0x1f, 0xf8, 0x63, 0x85,
	0x16, 0xb2, 0x46, 0x2d, 0xeb, 0x30, 0xe6, 0xc1, 0x9b, 0x9b, 0x1a, 0x24, 0x0b, 0x45, 0xc4, 0xe2,
	0x49, 0x72, 0x3c, 0xdf, 0x8d, 0x9c, 0x91, 0x3b, 0x75, 0x63, 0x1c, 0x8c, 0xc6, 0x4e, 0x34, 0x35,
	0x5c, 0xdc, 0x19, 0xdd, 0x6a, 0x52, 0xcd, 0xfe, 0xfb, 0xb3, 0x4a, 0xad, 0x4a, 0x08, 0xaf, 0xf8,
	0x09, 0xd2, 0xe2, 0xff, 0x4e, 0xc4, 0x62, 0x96, 0x1c, 0xcd, 0x03, 0xa4, 0x6c, 0x1b, 0x85, 0xe7,
	0xdc, 0x47, 0x5a, 0xa8, 0xc2, 0x6d, 0x70, 0xf0, 0x10, 0xe9, 0xa6, 0x28, 0xc2, 0x0b, 0xee, 0x8f,
	0x7f, 0x8a, 0x26, 0xc3, 0xe2, 0xcd, 0x94, 0x65, 0xdf, 0x9d, 0x60, 0xeb, 0x4e, 0xb0, 0xdf, 0x4e,
	0xb0, 0xaf, 0x5e, 0x78, 0xeb, 0x5e, 0x78, 0x3f, 0xbd, 0xf0, 0x9e, 0x92, 0x12, 0x6d, 0xf5, 0x9a,
	0xa7, 0x4b, 0xfd, 0x22, 0x6f, 0xd1, 0xa8, 0x99, 0x36, 0x20, 0x09, 0x6a, 0x85, 0xf2, 0x7d, 0xdb,
	0x9c, 0xfd, 0x68, 0x81, 0x72, 0x7f, 0xa8, 0xe5, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xd2,
	0x35, 0x59, 0x55, 0x01, 0x00, 0x00,
}

func (m *TokensWhiteBlack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokensWhiteBlack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokensWhiteBlack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Blacklisted) > 0 {
		for iNdEx := len(m.Blacklisted) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Blacklisted[iNdEx])
			copy(dAtA[i:], m.Blacklisted[iNdEx])
			i = encodeVarintFreeze(dAtA, i, uint64(len(m.Blacklisted[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Whitelisted) > 0 {
		for iNdEx := len(m.Whitelisted) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Whitelisted[iNdEx])
			copy(dAtA[i:], m.Whitelisted[iNdEx])
			i = encodeVarintFreeze(dAtA, i, uint64(len(m.Whitelisted[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposalTokensWhiteBlackChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalTokensWhiteBlackChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalTokensWhiteBlackChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokens[iNdEx])
			copy(dAtA[i:], m.Tokens[iNdEx])
			i = encodeVarintFreeze(dAtA, i, uint64(len(m.Tokens[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.IsAdd {
		i--
		if m.IsAdd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsBlacklist {
		i--
		if m.IsBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFreeze(dAtA []byte, offset int, v uint64) int {
	offset -= sovFreeze(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TokensWhiteBlack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Whitelisted) > 0 {
		for _, s := range m.Whitelisted {
			l = len(s)
			n += 1 + l + sovFreeze(uint64(l))
		}
	}
	if len(m.Blacklisted) > 0 {
		for _, s := range m.Blacklisted {
			l = len(s)
			n += 1 + l + sovFreeze(uint64(l))
		}
	}
	return n
}

func (m *ProposalTokensWhiteBlackChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsBlacklist {
		n += 2
	}
	if m.IsAdd {
		n += 2
	}
	if len(m.Tokens) > 0 {
		for _, s := range m.Tokens {
			l = len(s)
			n += 1 + l + sovFreeze(uint64(l))
		}
	}
	return n
}

func sovFreeze(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFreeze(x uint64) (n int) {
	return sovFreeze(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TokensWhiteBlack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFreeze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokensWhiteBlack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokensWhiteBlack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelisted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFreeze
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFreeze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Whitelisted = append(m.Whitelisted, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklisted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFreeze
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFreeze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blacklisted = append(m.Blacklisted, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFreeze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFreeze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalTokensWhiteBlackChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFreeze
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalTokensWhiteBlackChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalTokensWhiteBlackChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlacklist = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAdd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAdd = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFreeze
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFreeze
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFreeze(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFreeze
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFreeze(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFreeze
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFreeze
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFreeze
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFreeze
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFreeze
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFreeze        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFreeze          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFreeze = fmt.Errorf("proto: unexpected end of group")
)
