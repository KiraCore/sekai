// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/spending/pool.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClaimInfo struct {
	Account   string    `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	PoolName  string    `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	LastClaim time.Time `protobuf:"bytes,3,opt,name=last_claim,json=lastClaim,proto3,stdtime" json:"last_claim"`
}

func (m *ClaimInfo) Reset()         { *m = ClaimInfo{} }
func (m *ClaimInfo) String() string { return proto.CompactTextString(m) }
func (*ClaimInfo) ProtoMessage()    {}
func (*ClaimInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{0}
}
func (m *ClaimInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimInfo.Merge(m, src)
}
func (m *ClaimInfo) XXX_Size() int {
	return m.Size()
}
func (m *ClaimInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimInfo proto.InternalMessageInfo

func (m *ClaimInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *ClaimInfo) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *ClaimInfo) GetLastClaim() time.Time {
	if m != nil {
		return m.LastClaim
	}
	return time.Time{}
}

type PermInfo struct {
	OwnerRoles    []uint64 `protobuf:"varint,1,rep,packed,name=owner_roles,json=ownerRoles,proto3" json:"owner_roles,omitempty"`
	OwnerAccounts []string `protobuf:"bytes,2,rep,name=owner_accounts,json=ownerAccounts,proto3" json:"owner_accounts,omitempty"`
}

func (m *PermInfo) Reset()         { *m = PermInfo{} }
func (m *PermInfo) String() string { return proto.CompactTextString(m) }
func (*PermInfo) ProtoMessage()    {}
func (*PermInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{1}
}
func (m *PermInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermInfo.Merge(m, src)
}
func (m *PermInfo) XXX_Size() int {
	return m.Size()
}
func (m *PermInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PermInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PermInfo proto.InternalMessageInfo

func (m *PermInfo) GetOwnerRoles() []uint64 {
	if m != nil {
		return m.OwnerRoles
	}
	return nil
}

func (m *PermInfo) GetOwnerAccounts() []string {
	if m != nil {
		return m.OwnerAccounts
	}
	return nil
}

type SpendingPool struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// claim-start & claim-end - defines the exact time period (Unix timestamps) between which tokens can be claimed from the pool, allowing for a precise funds distribution.
	ClaimStart uint64 `protobuf:"varint,2,opt,name=claim_start,json=claimStart,proto3" json:"claim_start,omitempty"`
	ClaimEnd   uint64 `protobuf:"varint,3,opt,name=claim_end,json=claimEnd,proto3" json:"claim_end,omitempty"`
	// claim-expire - time period after which ability of beneficiary to claim tokens expires. If the date of the last claim is longer than claim-expire than account is removed from claims list.
	Expire uint64 `protobuf:"varint,4,opt,name=expire,proto3" json:"expire,omitempty"`
	Token  string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// rate of distribution in the smallest token denomination per 1 second (this value can be a float number, smaller than actual denomination)
	Rate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=rate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rate" yaml:"rate"`
	// pool specific % of owner accounts that must vote YES or NO for any of the pool proposals to be valid.
	VoteQuorum uint64 `protobuf:"varint,7,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	// period of time in seconds that any of the pool proposals must last before passing or being rejected
	VotePeriod uint64 `protobuf:"varint,8,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	// period of time that must pass before any of the pool proposal is enacted
	VoteEnactment uint64 `protobuf:"varint,9,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`
	// defines a list of accounts/roles controlling the spending pool via “governance-like” proposals
	Owners *PermInfo `protobuf:"bytes,10,opt,name=owners,proto3" json:"owners,omitempty"`
	// defines set of accounts/roles to which funds can be distributed
	Beneficiaries *PermInfo                              `protobuf:"bytes,11,opt,name=beneficiaries,proto3" json:"beneficiaries,omitempty"`
	Balance       github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,12,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance"`
}

func (m *SpendingPool) Reset()         { *m = SpendingPool{} }
func (m *SpendingPool) String() string { return proto.CompactTextString(m) }
func (*SpendingPool) ProtoMessage()    {}
func (*SpendingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_6027931ab19c9a21, []int{2}
}
func (m *SpendingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpendingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpendingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpendingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpendingPool.Merge(m, src)
}
func (m *SpendingPool) XXX_Size() int {
	return m.Size()
}
func (m *SpendingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_SpendingPool.DiscardUnknown(m)
}

var xxx_messageInfo_SpendingPool proto.InternalMessageInfo

func (m *SpendingPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpendingPool) GetClaimStart() uint64 {
	if m != nil {
		return m.ClaimStart
	}
	return 0
}

func (m *SpendingPool) GetClaimEnd() uint64 {
	if m != nil {
		return m.ClaimEnd
	}
	return 0
}

func (m *SpendingPool) GetExpire() uint64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

func (m *SpendingPool) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *SpendingPool) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *SpendingPool) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *SpendingPool) GetVoteEnactment() uint64 {
	if m != nil {
		return m.VoteEnactment
	}
	return 0
}

func (m *SpendingPool) GetOwners() *PermInfo {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *SpendingPool) GetBeneficiaries() *PermInfo {
	if m != nil {
		return m.Beneficiaries
	}
	return nil
}

func init() {
	proto.RegisterType((*ClaimInfo)(nil), "kira.spending.ClaimInfo")
	proto.RegisterType((*PermInfo)(nil), "kira.spending.PermInfo")
	proto.RegisterType((*SpendingPool)(nil), "kira.spending.SpendingPool")
}

func init() { proto.RegisterFile("kira/spending/pool.proto", fileDescriptor_6027931ab19c9a21) }

var fileDescriptor_6027931ab19c9a21 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xd4, 0x3c,
	0x10, 0xc6, 0x37, 0x6d, 0xba, 0xdd, 0x78, 0xbb, 0xef, 0xc1, 0xaa, 0x5e, 0xac, 0x22, 0x25, 0xab,
	0x95, 0x40, 0x2b, 0x24, 0x12, 0x09, 0x6e, 0x95, 0x7a, 0xa0, 0x7f, 0x24, 0x2a, 0x24, 0xd4, 0xa6,
	0x1c, 0x10, 0x97, 0x95, 0x37, 0x3b, 0x0d, 0xd6, 0x26, 0x76, 0xb0, 0xbd, 0xd0, 0xde, 0x91, 0xb8,
	0xf6, 0x23, 0xf0, 0x71, 0x7a, 0xec, 0x11, 0x71, 0x28, 0xa8, 0x7b, 0xe1, 0xcc, 0x27, 0x40, 0x9e,
	0x24, 0x94, 0x5e, 0x90, 0x38, 0xc5, 0xfe, 0xcd, 0xe3, 0x99, 0x67, 0xc6, 0x0e, 0x61, 0x73, 0xa1,
	0x79, 0x62, 0x2a, 0x90, 0x33, 0x21, 0xf3, 0xa4, 0x52, 0xaa, 0x88, 0x2b, 0xad, 0xac, 0xa2, 0x03,
	0x17, 0x89, 0xdb, 0xc8, 0x56, 0x94, 0x2b, 0x95, 0x17, 0x90, 0x60, 0x70, 0xba, 0x38, 0x4d, 0xac,
	0x28, 0xc1, 0x58, 0x5e, 0x56, 0xb5, 0x7e, 0x6b, 0x33, 0x57, 0xb9, 0xc2, 0x65, 0xe2, 0x56, 0x35,
	0x1d, 0x7d, 0xf2, 0x48, 0xb0, 0x57, 0x70, 0x51, 0x1e, 0xca, 0x53, 0x45, 0x19, 0x59, 0xe7, 0x59,
	0xa6, 0x16, 0xd2, 0x32, 0x6f, 0xe8, 0x8d, 0x83, 0xb4, 0xdd, 0xd2, 0xfb, 0x24, 0x70, 0xb5, 0x27,
	0x92, 0x97, 0xc0, 0x56, 0x30, 0xd6, 0x73, 0xe0, 0x25, 0x2f, 0x81, 0xee, 0x11, 0x52, 0x70, 0x63,
	0x27, 0x99, 0x4b, 0xc4, 0x56, 0x87, 0xde, 0xb8, 0xff, 0x64, 0x2b, 0xae, 0x0d, 0xc5, 0xad, 0xa1,
	0xf8, 0x55, 0x6b, 0x68, 0xb7, 0x77, 0x79, 0x1d, 0x75, 0x2e, 0xbe, 0x45, 0x5e, 0x1a, 0xb8, 0x73,
	0x58, 0x7f, 0xf4, 0x9a, 0xf4, 0x8e, 0x40, 0xd7, 0x3e, 0x22, 0xd2, 0x57, 0x1f, 0x24, 0xe8, 0x89,
	0x56, 0x05, 0x18, 0xe6, 0x0d, 0x57, 0xc7, 0x7e, 0x4a, 0x10, 0xa5, 0x8e, 0xd0, 0x07, 0xe4, 0xbf,
	0x5a, 0xd0, 0xf8, 0x33, 0x6c, 0x65, 0xb8, 0x3a, 0x0e, 0xd2, 0x01, 0xd2, 0x67, 0x0d, 0xdc, 0xf6,
	0x7f, 0x7c, 0x8e, 0xbc, 0xd1, 0x47, 0x9f, 0x6c, 0x9c, 0x34, 0x73, 0x3a, 0x52, 0xaa, 0xa0, 0x94,
	0xf8, 0xd8, 0x47, 0xdd, 0x23, 0xae, 0x5d, 0x49, 0xb4, 0x3f, 0x31, 0x96, 0x6b, 0x8b, 0x2d, 0xfa,
	0x29, 0x41, 0x74, 0xe2, 0x88, 0x9b, 0x40, 0x2d, 0x00, 0x39, 0xc3, 0x1e, 0xfd, 0xb4, 0x87, 0xe0,
	0x40, 0xce, 0xe8, 0xff, 0xa4, 0x0b, 0x67, 0x95, 0xd0, 0xc0, 0x7c, 0x8c, 0x34, 0x3b, 0xba, 0x49,
	0xd6, 0xac, 0x9a, 0x83, 0x64, 0x6b, 0x58, 0xaa, 0xde, 0xd0, 0x63, 0xe2, 0x6b, 0x6e, 0x81, 0x75,
	0x1d, 0xdc, 0xdd, 0x71, 0xd3, 0xf8, 0x7a, 0x1d, 0x3d, 0xcc, 0x85, 0x7d, 0xbb, 0x98, 0xc6, 0x99,
	0x2a, 0x93, 0x4c, 0x99, 0x52, 0x99, 0xe6, 0xf3, 0xd8, 0xcc, 0xe6, 0x89, 0x3d, 0xaf, 0xc0, 0xc4,
	0xfb, 0x90, 0xfd, 0xbc, 0x8e, 0xfa, 0xe7, 0xbc, 0x2c, 0xb6, 0x47, 0x2e, 0xc7, 0x28, 0xc5, 0x54,
	0xce, 0xfe, 0x7b, 0x65, 0x61, 0xf2, 0x6e, 0xa1, 0xf4, 0xa2, 0x64, 0xeb, 0xb5, 0x7d, 0x87, 0x8e,
	0x91, 0xfc, 0x16, 0x54, 0xa0, 0x85, 0x9a, 0xb1, 0xde, 0xad, 0xe0, 0x08, 0x89, 0x1b, 0x29, 0x0a,
	0x40, 0xf2, 0xcc, 0x96, 0x20, 0x2d, 0x0b, 0x50, 0x33, 0x70, 0xf4, 0xa0, 0x85, 0x34, 0x21, 0x5d,
	0x9c, 0xb1, 0x61, 0x04, 0xef, 0xf9, 0x5e, 0x7c, 0xe7, 0x1d, 0xc6, 0xed, 0x1d, 0xa6, 0x8d, 0x8c,
	0xee, 0x90, 0xc1, 0x14, 0x24, 0x9c, 0x8a, 0x4c, 0x70, 0x2d, 0xc0, 0xb0, 0xfe, 0xdf, 0xcf, 0xdd,
	0x55, 0xd3, 0xe7, 0x64, 0x7d, 0xca, 0x0b, 0x2e, 0x33, 0x60, 0x1b, 0x38, 0xae, 0xf8, 0x1f, 0xc6,
	0x75, 0x28, 0x6d, 0xda, 0x1e, 0xdf, 0xdd, 0xbf, 0xbc, 0x09, 0xbd, 0xab, 0x9b, 0xd0, 0xfb, 0x7e,
	0x13, 0x7a, 0x17, 0xcb, 0xb0, 0x73, 0xb5, 0x0c, 0x3b, 0x5f, 0x96, 0x61, 0xe7, 0xcd, 0xa3, 0x3f,
	0x52, 0xbd, 0x10, 0x9a, 0xef, 0x29, 0x0d, 0x89, 0x81, 0x39, 0x17, 0xc9, 0xd9, 0xed, 0xbf, 0x87,
	0x29, 0xa7, 0x5d, 0x7c, 0xcf, 0x4f, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x87, 0xf5, 0xc2,
	0x99, 0x03, 0x00, 0x00,
}

func (this *PermInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PermInfo)
	if !ok {
		that2, ok := that.(PermInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.OwnerRoles) != len(that1.OwnerRoles) {
		return false
	}
	for i := range this.OwnerRoles {
		if this.OwnerRoles[i] != that1.OwnerRoles[i] {
			return false
		}
	}
	if len(this.OwnerAccounts) != len(that1.OwnerAccounts) {
		return false
	}
	for i := range this.OwnerAccounts {
		if this.OwnerAccounts[i] != that1.OwnerAccounts[i] {
			return false
		}
	}
	return true
}
func (m *ClaimInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastClaim, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaim):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPool(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintPool(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAccounts) > 0 {
		for iNdEx := len(m.OwnerAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OwnerAccounts[iNdEx])
			copy(dAtA[i:], m.OwnerAccounts[iNdEx])
			i = encodeVarintPool(dAtA, i, uint64(len(m.OwnerAccounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OwnerRoles) > 0 {
		dAtA3 := make([]byte, len(m.OwnerRoles)*10)
		var j2 int
		for _, num := range m.OwnerRoles {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintPool(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpendingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpendingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpendingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Balance.Size()
		i -= size
		if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.Beneficiaries != nil {
		{
			size, err := m.Beneficiaries.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Owners != nil {
		{
			size, err := m.Owners.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPool(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.VoteEnactment != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.VoteEnactment))
		i--
		dAtA[i] = 0x48
	}
	if m.VotePeriod != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.Rate.Size()
		i -= size
		if _, err := m.Rate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPool(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Expire != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.Expire))
		i--
		dAtA[i] = 0x20
	}
	if m.ClaimEnd != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ClaimEnd))
		i--
		dAtA[i] = 0x18
	}
	if m.ClaimStart != 0 {
		i = encodeVarintPool(dAtA, i, uint64(m.ClaimStart))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintPool(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPool(dAtA []byte, offset int, v uint64) int {
	offset -= sovPool(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClaimInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastClaim)
	n += 1 + l + sovPool(uint64(l))
	return n
}

func (m *PermInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OwnerRoles) > 0 {
		l = 0
		for _, e := range m.OwnerRoles {
			l += sovPool(uint64(e))
		}
		n += 1 + sovPool(uint64(l)) + l
	}
	if len(m.OwnerAccounts) > 0 {
		for _, s := range m.OwnerAccounts {
			l = len(s)
			n += 1 + l + sovPool(uint64(l))
		}
	}
	return n
}

func (m *SpendingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	if m.ClaimStart != 0 {
		n += 1 + sovPool(uint64(m.ClaimStart))
	}
	if m.ClaimEnd != 0 {
		n += 1 + sovPool(uint64(m.ClaimEnd))
	}
	if m.Expire != 0 {
		n += 1 + sovPool(uint64(m.Expire))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Rate.Size()
	n += 1 + l + sovPool(uint64(l))
	if m.VoteQuorum != 0 {
		n += 1 + sovPool(uint64(m.VoteQuorum))
	}
	if m.VotePeriod != 0 {
		n += 1 + sovPool(uint64(m.VotePeriod))
	}
	if m.VoteEnactment != 0 {
		n += 1 + sovPool(uint64(m.VoteEnactment))
	}
	if m.Owners != nil {
		l = m.Owners.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	if m.Beneficiaries != nil {
		l = m.Beneficiaries.Size()
		n += 1 + l + sovPool(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovPool(uint64(l))
	return n
}

func sovPool(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPool(x uint64) (n int) {
	return sovPool(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClaimInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastClaim, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OwnerRoles = append(m.OwnerRoles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPool
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPool
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPool
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OwnerRoles) == 0 {
					m.OwnerRoles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPool
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OwnerRoles = append(m.OwnerRoles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerRoles", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAccounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAccounts = append(m.OwnerAccounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpendingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPool
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpendingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpendingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStart", wireType)
			}
			m.ClaimStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			m.ClaimEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteEnactment", wireType)
			}
			m.VoteEnactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteEnactment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owners == nil {
				m.Owners = &PermInfo{}
			}
			if err := m.Owners.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Beneficiaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Beneficiaries == nil {
				m.Beneficiaries = &PermInfo{}
			}
			if err := m.Beneficiaries.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPool
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPool
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPool
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPool(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPool
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPool(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPool
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPool
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPool
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPool
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPool
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPool        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPool          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPool = fmt.Errorf("proto: unexpected end of group")
)
