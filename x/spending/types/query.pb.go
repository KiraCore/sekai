// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/spending/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/KiraCore/sekai/x/gov/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	github_com_cosmos_cosmos_sdk_types_query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryPoolNamesRequest struct {
}

func (m *QueryPoolNamesRequest) Reset()         { *m = QueryPoolNamesRequest{} }
func (m *QueryPoolNamesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolNamesRequest) ProtoMessage()    {}
func (*QueryPoolNamesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{0}
}
func (m *QueryPoolNamesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolNamesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolNamesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolNamesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolNamesRequest.Merge(m, src)
}
func (m *QueryPoolNamesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolNamesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolNamesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolNamesRequest proto.InternalMessageInfo

type QueryPoolNamesResponse struct {
	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (m *QueryPoolNamesResponse) Reset()         { *m = QueryPoolNamesResponse{} }
func (m *QueryPoolNamesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolNamesResponse) ProtoMessage()    {}
func (*QueryPoolNamesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{1}
}
func (m *QueryPoolNamesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolNamesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolNamesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolNamesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolNamesResponse.Merge(m, src)
}
func (m *QueryPoolNamesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolNamesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolNamesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolNamesResponse proto.InternalMessageInfo

func (m *QueryPoolNamesResponse) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type QueryPoolByNameRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *QueryPoolByNameRequest) Reset()         { *m = QueryPoolByNameRequest{} }
func (m *QueryPoolByNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolByNameRequest) ProtoMessage()    {}
func (*QueryPoolByNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{2}
}
func (m *QueryPoolByNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolByNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolByNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolByNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolByNameRequest.Merge(m, src)
}
func (m *QueryPoolByNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolByNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolByNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolByNameRequest proto.InternalMessageInfo

func (m *QueryPoolByNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QueryPoolByNameResponse struct {
	Pool *SpendingPool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *QueryPoolByNameResponse) Reset()         { *m = QueryPoolByNameResponse{} }
func (m *QueryPoolByNameResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolByNameResponse) ProtoMessage()    {}
func (*QueryPoolByNameResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{3}
}
func (m *QueryPoolByNameResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolByNameResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolByNameResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolByNameResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolByNameResponse.Merge(m, src)
}
func (m *QueryPoolByNameResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolByNameResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolByNameResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolByNameResponse proto.InternalMessageInfo

func (m *QueryPoolByNameResponse) GetPool() *SpendingPool {
	if m != nil {
		return m.Pool
	}
	return nil
}

type QueryPoolProposalsRequest struct {
	PoolName   string                                                `protobuf:"bytes,1,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryPoolProposalsRequest) Reset()         { *m = QueryPoolProposalsRequest{} }
func (m *QueryPoolProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolProposalsRequest) ProtoMessage()    {}
func (*QueryPoolProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{4}
}
func (m *QueryPoolProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolProposalsRequest.Merge(m, src)
}
func (m *QueryPoolProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolProposalsRequest proto.InternalMessageInfo

func (m *QueryPoolProposalsRequest) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *QueryPoolProposalsRequest) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPoolProposalsResponse struct {
	Proposals  []types.Proposal                                       `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryPoolProposalsResponse) Reset()         { *m = QueryPoolProposalsResponse{} }
func (m *QueryPoolProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolProposalsResponse) ProtoMessage()    {}
func (*QueryPoolProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{5}
}
func (m *QueryPoolProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolProposalsResponse.Merge(m, src)
}
func (m *QueryPoolProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolProposalsResponse proto.InternalMessageInfo

func (m *QueryPoolProposalsResponse) GetProposals() []types.Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *QueryPoolProposalsResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryPoolsByAccountRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *QueryPoolsByAccountRequest) Reset()         { *m = QueryPoolsByAccountRequest{} }
func (m *QueryPoolsByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsByAccountRequest) ProtoMessage()    {}
func (*QueryPoolsByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{6}
}
func (m *QueryPoolsByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsByAccountRequest.Merge(m, src)
}
func (m *QueryPoolsByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsByAccountRequest proto.InternalMessageInfo

func (m *QueryPoolsByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type QueryPoolsByAccountResponse struct {
	Pools []SpendingPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
}

func (m *QueryPoolsByAccountResponse) Reset()         { *m = QueryPoolsByAccountResponse{} }
func (m *QueryPoolsByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolsByAccountResponse) ProtoMessage()    {}
func (*QueryPoolsByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a9e7ad8ce361859, []int{7}
}
func (m *QueryPoolsByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolsByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolsByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolsByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolsByAccountResponse.Merge(m, src)
}
func (m *QueryPoolsByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolsByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolsByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolsByAccountResponse proto.InternalMessageInfo

func (m *QueryPoolsByAccountResponse) GetPools() []SpendingPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryPoolNamesRequest)(nil), "kira.spending.QueryPoolNamesRequest")
	proto.RegisterType((*QueryPoolNamesResponse)(nil), "kira.spending.QueryPoolNamesResponse")
	proto.RegisterType((*QueryPoolByNameRequest)(nil), "kira.spending.QueryPoolByNameRequest")
	proto.RegisterType((*QueryPoolByNameResponse)(nil), "kira.spending.QueryPoolByNameResponse")
	proto.RegisterType((*QueryPoolProposalsRequest)(nil), "kira.spending.QueryPoolProposalsRequest")
	proto.RegisterType((*QueryPoolProposalsResponse)(nil), "kira.spending.QueryPoolProposalsResponse")
	proto.RegisterType((*QueryPoolsByAccountRequest)(nil), "kira.spending.QueryPoolsByAccountRequest")
	proto.RegisterType((*QueryPoolsByAccountResponse)(nil), "kira.spending.QueryPoolsByAccountResponse")
}

func init() { proto.RegisterFile("kira/spending/query.proto", fileDescriptor_9a9e7ad8ce361859) }

var fileDescriptor_9a9e7ad8ce361859 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x96, 0x14, 0xc8, 0x56, 0x80, 0xb4, 0x14, 0x9a, 0x3a, 0x95, 0x5b, 0x2c, 0x28, 0x6d,
	0x01, 0xaf, 0x5a, 0xa0, 0xc0, 0x11, 0xc3, 0x09, 0x24, 0x54, 0x8c, 0xc4, 0x81, 0x0b, 0xda, 0xa4,
	0x2b, 0x63, 0x25, 0xf1, 0xba, 0x5e, 0x27, 0x22, 0x8a, 0x22, 0xa1, 0x8a, 0x07, 0x40, 0x82, 0x23,
	0x6f, 0xc2, 0x03, 0xd0, 0x63, 0x25, 0x2e, 0x70, 0x89, 0x50, 0xc2, 0x53, 0xf4, 0x84, 0xf6, 0xc7,
	0x89, 0x93, 0x38, 0xa4, 0x9c, 0xb2, 0xde, 0xf9, 0x66, 0xf6, 0x9b, 0xef, 0x9b, 0x09, 0x5c, 0xae,
	0xfa, 0x11, 0xc1, 0x3c, 0xa4, 0xc1, 0xbe, 0x1f, 0x78, 0xf8, 0xa0, 0x41, 0xa3, 0x96, 0x1d, 0x46,
	0x2c, 0x66, 0xe8, 0x82, 0x08, 0xd9, 0x49, 0xc8, 0xd8, 0xaa, 0x30, 0x5e, 0x67, 0x1c, 0x97, 0x09,
	0xa7, 0x0a, 0x87, 0x9b, 0xdb, 0x65, 0x1a, 0x93, 0x6d, 0x1c, 0x12, 0xcf, 0x0f, 0x48, 0xec, 0xb3,
	0x40, 0xa5, 0x1a, 0x8b, 0x1e, 0xf3, 0x98, 0x3c, 0x62, 0x71, 0xd2, 0xb7, 0x2b, 0x1e, 0x63, 0x5e,
	0x8d, 0x62, 0x12, 0xfa, 0x98, 0x04, 0x01, 0x8b, 0x65, 0x0a, 0xd7, 0xd1, 0xe2, 0x28, 0x93, 0x90,
	0xb1, 0x9a, 0x8e, 0x2c, 0xc9, 0x88, 0xc7, 0x9a, 0x38, 0x8c, 0x58, 0xc8, 0x38, 0xd1, 0x01, 0x6b,
	0x09, 0x5e, 0x79, 0x29, 0x88, 0xec, 0x31, 0x56, 0x7b, 0x41, 0xea, 0x94, 0xbb, 0xf4, 0xa0, 0x41,
	0x79, 0x6c, 0xd9, 0xf0, 0xea, 0x78, 0x80, 0x87, 0x2c, 0xe0, 0x14, 0x2d, 0xc2, 0xf9, 0x40, 0x5c,
	0x14, 0xc1, 0xda, 0x99, 0x8d, 0x82, 0xab, 0x3e, 0xac, 0xdb, 0x29, 0xbc, 0xd3, 0x12, 0x19, 0xba,
	0x12, 0x42, 0x30, 0x2f, 0x20, 0x45, 0xb0, 0x06, 0x36, 0x0a, 0xae, 0x3c, 0x5b, 0xcf, 0xe0, 0xd2,
	0x04, 0x5a, 0x97, 0xc7, 0x30, 0x2f, 0x88, 0x4b, 0xf8, 0xc2, 0x4e, 0xc9, 0x1e, 0x91, 0xd0, 0x7e,
	0xa5, 0x0f, 0x22, 0xd1, 0x95, 0x40, 0xeb, 0x1b, 0x80, 0xcb, 0x83, 0x62, 0x7b, 0xba, 0xbd, 0xa4,
	0x0f, 0x54, 0x82, 0x05, 0x81, 0x7a, 0x9b, 0xa2, 0x70, 0x3e, 0xd4, 0x3d, 0xa1, 0x0f, 0x00, 0xc2,
	0xa1, 0xf2, 0xc5, 0x39, 0xf9, 0xe4, 0xba, 0xad, 0x6c, 0xb2, 0x85, 0x4d, 0xb6, 0xb2, 0x53, 0xdb,
	0x64, 0xef, 0x11, 0x2f, 0xe9, 0xcb, 0x79, 0x78, 0xd2, 0x5d, 0xbd, 0xe7, 0xf9, 0xf1, 0xbb, 0x46,
	0xd9, 0xae, 0xb0, 0x3a, 0xd6, 0xe6, 0xaa, 0x9f, 0x3b, 0x7c, 0xbf, 0x8a, 0xe3, 0x56, 0x48, 0xb9,
	0x1e, 0x88, 0x54, 0xa6, 0x9b, 0x7a, 0xd3, 0xfa, 0x05, 0xa0, 0x91, 0xc5, 0x5e, 0xab, 0xb1, 0x0b,
	0x0b, 0x89, 0x63, 0x4a, 0xf0, 0x85, 0x1d, 0xa4, 0x24, 0xf1, 0x58, 0xd3, 0x4e, 0xf0, 0x4e, 0xfe,
	0xa8, 0xbb, 0x9a, 0x73, 0x87, 0x50, 0x74, 0x98, 0xd5, 0xd9, 0xcd, 0x99, 0x9d, 0xa9, 0x57, 0x9d,
	0x47, 0x27, 0xdd, 0xd5, 0xfb, 0xff, 0xd9, 0x9a, 0x4a, 0x1d, 0xe9, 0x6d, 0x37, 0xd5, 0x1a, 0x77,
	0x5a, 0x8f, 0x2b, 0x15, 0xd6, 0x08, 0xe2, 0xc4, 0x99, 0x22, 0x3c, 0x47, 0xd4, 0x8d, 0xf6, 0x25,
	0xf9, 0xb4, 0x5e, 0xc3, 0x52, 0x66, 0x9e, 0xd6, 0xe4, 0x01, 0x9c, 0x17, 0x0e, 0x26, 0x7a, 0xfc,
	0x6b, 0x44, 0xb4, 0x30, 0x0a, 0xbf, 0xf3, 0x3d, 0x0f, 0xe7, 0x65, 0x61, 0x61, 0xfc, 0xc5, 0xd1,
	0xf1, 0x46, 0xd7, 0xc7, 0xca, 0x64, 0xae, 0x85, 0x71, 0x63, 0x06, 0x4a, 0x51, 0xb4, 0xae, 0x1d,
	0xfe, 0xf8, 0xf3, 0x79, 0xae, 0x84, 0x96, 0xf1, 0xe4, 0x4a, 0xca, 0x51, 0xe4, 0xe8, 0x23, 0x80,
	0x97, 0xc6, 0x76, 0x00, 0x4d, 0xad, 0x3e, 0xb2, 0x51, 0xc6, 0xfa, 0x2c, 0x98, 0x66, 0x61, 0x49,
	0x16, 0x2b, 0xc8, 0xc8, 0x60, 0x81, 0xdb, 0x82, 0x46, 0x07, 0x7d, 0x05, 0x10, 0x4d, 0xce, 0x1f,
	0xda, 0x98, 0xf6, 0xc4, 0xf8, 0x82, 0x19, 0x9b, 0xa7, 0x40, 0x6a, 0x3e, 0xdb, 0x92, 0xcf, 0x2d,
	0xb4, 0x99, 0xa5, 0xca, 0x60, 0x76, 0x71, 0x7b, 0xa0, 0x52, 0x07, 0x7d, 0x01, 0xf0, 0x72, 0xc6,
	0x2c, 0xa0, 0xa9, 0xaf, 0x4e, 0xcc, 0x99, 0xb1, 0x75, 0x1a, 0xa8, 0x66, 0xb8, 0x2e, 0x19, 0xae,
	0x21, 0x33, 0x83, 0x21, 0xc7, 0x6d, 0x3d, 0xa0, 0x1d, 0xe7, 0xe9, 0x51, 0xcf, 0x04, 0xc7, 0x3d,
	0x13, 0xfc, 0xee, 0x99, 0xe0, 0x53, 0xdf, 0xcc, 0x1d, 0xf7, 0xcd, 0xdc, 0xcf, 0xbe, 0x99, 0x7b,
	0xb3, 0x95, 0x5a, 0x9b, 0xe7, 0x7e, 0x44, 0x9e, 0xb0, 0x88, 0x62, 0x4e, 0xab, 0xc4, 0xc7, 0xef,
	0x87, 0xf5, 0xe4, 0xfa, 0x94, 0xcf, 0xca, 0xff, 0xe0, 0xbb, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x01, 0xd2, 0xa7, 0x4b, 0x42, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// query-pools - query list of pool names
	QueryPoolNames(ctx context.Context, in *QueryPoolNamesRequest, opts ...grpc.CallOption) (*QueryPoolNamesResponse, error)
	// query-pool - query pool by name
	QueryPoolByName(ctx context.Context, in *QueryPoolByNameRequest, opts ...grpc.CallOption) (*QueryPoolByNameResponse, error)
	// query-pool-proposals - query pool proposals by name
	QueryPoolProposals(ctx context.Context, in *QueryPoolProposalsRequest, opts ...grpc.CallOption) (*QueryPoolProposalsResponse, error)
	// query-pools-by-account - query list of pool names where specific kira account can register its claim or otherwise claim tokens from
	QueryPoolsByAccount(ctx context.Context, in *QueryPoolsByAccountRequest, opts ...grpc.CallOption) (*QueryPoolsByAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryPoolNames(ctx context.Context, in *QueryPoolNamesRequest, opts ...grpc.CallOption) (*QueryPoolNamesResponse, error) {
	out := new(QueryPoolNamesResponse)
	err := c.cc.Invoke(ctx, "/kira.spending.Query/QueryPoolNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolByName(ctx context.Context, in *QueryPoolByNameRequest, opts ...grpc.CallOption) (*QueryPoolByNameResponse, error) {
	out := new(QueryPoolByNameResponse)
	err := c.cc.Invoke(ctx, "/kira.spending.Query/QueryPoolByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolProposals(ctx context.Context, in *QueryPoolProposalsRequest, opts ...grpc.CallOption) (*QueryPoolProposalsResponse, error) {
	out := new(QueryPoolProposalsResponse)
	err := c.cc.Invoke(ctx, "/kira.spending.Query/QueryPoolProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPoolsByAccount(ctx context.Context, in *QueryPoolsByAccountRequest, opts ...grpc.CallOption) (*QueryPoolsByAccountResponse, error) {
	out := new(QueryPoolsByAccountResponse)
	err := c.cc.Invoke(ctx, "/kira.spending.Query/QueryPoolsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// query-pools - query list of pool names
	QueryPoolNames(context.Context, *QueryPoolNamesRequest) (*QueryPoolNamesResponse, error)
	// query-pool - query pool by name
	QueryPoolByName(context.Context, *QueryPoolByNameRequest) (*QueryPoolByNameResponse, error)
	// query-pool-proposals - query pool proposals by name
	QueryPoolProposals(context.Context, *QueryPoolProposalsRequest) (*QueryPoolProposalsResponse, error)
	// query-pools-by-account - query list of pool names where specific kira account can register its claim or otherwise claim tokens from
	QueryPoolsByAccount(context.Context, *QueryPoolsByAccountRequest) (*QueryPoolsByAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) QueryPoolNames(ctx context.Context, req *QueryPoolNamesRequest) (*QueryPoolNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolNames not implemented")
}
func (*UnimplementedQueryServer) QueryPoolByName(ctx context.Context, req *QueryPoolByNameRequest) (*QueryPoolByNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolByName not implemented")
}
func (*UnimplementedQueryServer) QueryPoolProposals(ctx context.Context, req *QueryPoolProposalsRequest) (*QueryPoolProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolProposals not implemented")
}
func (*UnimplementedQueryServer) QueryPoolsByAccount(ctx context.Context, req *QueryPoolsByAccountRequest) (*QueryPoolsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPoolsByAccount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryPoolNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.spending.Query/QueryPoolNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolNames(ctx, req.(*QueryPoolNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.spending.Query/QueryPoolByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolByName(ctx, req.(*QueryPoolByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.spending.Query/QueryPoolProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolProposals(ctx, req.(*QueryPoolProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPoolsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPoolsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.spending.Query/QueryPoolsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPoolsByAccount(ctx, req.(*QueryPoolsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.spending.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryPoolNames",
			Handler:    _Query_QueryPoolNames_Handler,
		},
		{
			MethodName: "QueryPoolByName",
			Handler:    _Query_QueryPoolByName_Handler,
		},
		{
			MethodName: "QueryPoolProposals",
			Handler:    _Query_QueryPoolProposals_Handler,
		},
		{
			MethodName: "QueryPoolsByAccount",
			Handler:    _Query_QueryPoolsByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/spending/query.proto",
}

func (m *QueryPoolNamesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolNamesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolNamesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPoolNamesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolNamesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolNamesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolByNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolByNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolByNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolByNameResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolByNameResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolByNameResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolsByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolsByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolsByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryPoolNamesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPoolNamesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolByNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolByNameResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolsByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryPoolNamesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolNamesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolNamesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolNamesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolNamesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolNamesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolByNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolByNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolByNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolByNameResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolByNameResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolByNameResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &SpendingPool{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, types.Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolsByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolsByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolsByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, SpendingPool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
