// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/basket/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryTokenBasketByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTokenBasketByIdRequest) Reset()         { *m = QueryTokenBasketByIdRequest{} }
func (m *QueryTokenBasketByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketByIdRequest) ProtoMessage()    {}
func (*QueryTokenBasketByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{0}
}
func (m *QueryTokenBasketByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketByIdRequest.Merge(m, src)
}
func (m *QueryTokenBasketByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketByIdRequest proto.InternalMessageInfo

func (m *QueryTokenBasketByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryTokenBasketByIdResponse struct {
	Basket *Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket,omitempty"`
}

func (m *QueryTokenBasketByIdResponse) Reset()         { *m = QueryTokenBasketByIdResponse{} }
func (m *QueryTokenBasketByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketByIdResponse) ProtoMessage()    {}
func (*QueryTokenBasketByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{1}
}
func (m *QueryTokenBasketByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketByIdResponse.Merge(m, src)
}
func (m *QueryTokenBasketByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketByIdResponse proto.InternalMessageInfo

func (m *QueryTokenBasketByIdResponse) GetBasket() *Basket {
	if m != nil {
		return m.Basket
	}
	return nil
}

type QueryTokenBasketByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTokenBasketByDenomRequest) Reset()         { *m = QueryTokenBasketByDenomRequest{} }
func (m *QueryTokenBasketByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketByDenomRequest) ProtoMessage()    {}
func (*QueryTokenBasketByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{2}
}
func (m *QueryTokenBasketByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketByDenomRequest.Merge(m, src)
}
func (m *QueryTokenBasketByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketByDenomRequest proto.InternalMessageInfo

func (m *QueryTokenBasketByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryTokenBasketByDenomResponse struct {
	Basket *Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket,omitempty"`
}

func (m *QueryTokenBasketByDenomResponse) Reset()         { *m = QueryTokenBasketByDenomResponse{} }
func (m *QueryTokenBasketByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketByDenomResponse) ProtoMessage()    {}
func (*QueryTokenBasketByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{3}
}
func (m *QueryTokenBasketByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketByDenomResponse.Merge(m, src)
}
func (m *QueryTokenBasketByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketByDenomResponse proto.InternalMessageInfo

func (m *QueryTokenBasketByDenomResponse) GetBasket() *Basket {
	if m != nil {
		return m.Basket
	}
	return nil
}

type QueryTokenBasketsRequest struct {
	Tokens          []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	DerivativesOnly bool     `protobuf:"varint,2,opt,name=derivatives_only,json=derivativesOnly,proto3" json:"derivatives_only,omitempty"`
}

func (m *QueryTokenBasketsRequest) Reset()         { *m = QueryTokenBasketsRequest{} }
func (m *QueryTokenBasketsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketsRequest) ProtoMessage()    {}
func (*QueryTokenBasketsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{4}
}
func (m *QueryTokenBasketsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketsRequest.Merge(m, src)
}
func (m *QueryTokenBasketsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketsRequest proto.InternalMessageInfo

func (m *QueryTokenBasketsRequest) GetTokens() []string {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *QueryTokenBasketsRequest) GetDerivativesOnly() bool {
	if m != nil {
		return m.DerivativesOnly
	}
	return false
}

type QueryTokenBasketsResponse struct {
	Baskets []Basket `protobuf:"bytes,1,rep,name=baskets,proto3" json:"baskets"`
}

func (m *QueryTokenBasketsResponse) Reset()         { *m = QueryTokenBasketsResponse{} }
func (m *QueryTokenBasketsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenBasketsResponse) ProtoMessage()    {}
func (*QueryTokenBasketsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_42506911a94aa353, []int{5}
}
func (m *QueryTokenBasketsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenBasketsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenBasketsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenBasketsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenBasketsResponse.Merge(m, src)
}
func (m *QueryTokenBasketsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenBasketsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenBasketsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenBasketsResponse proto.InternalMessageInfo

func (m *QueryTokenBasketsResponse) GetBaskets() []Basket {
	if m != nil {
		return m.Baskets
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryTokenBasketByIdRequest)(nil), "kira.basket.QueryTokenBasketByIdRequest")
	proto.RegisterType((*QueryTokenBasketByIdResponse)(nil), "kira.basket.QueryTokenBasketByIdResponse")
	proto.RegisterType((*QueryTokenBasketByDenomRequest)(nil), "kira.basket.QueryTokenBasketByDenomRequest")
	proto.RegisterType((*QueryTokenBasketByDenomResponse)(nil), "kira.basket.QueryTokenBasketByDenomResponse")
	proto.RegisterType((*QueryTokenBasketsRequest)(nil), "kira.basket.QueryTokenBasketsRequest")
	proto.RegisterType((*QueryTokenBasketsResponse)(nil), "kira.basket.QueryTokenBasketsResponse")
}

func init() { proto.RegisterFile("kira/basket/query.proto", fileDescriptor_42506911a94aa353) }

var fileDescriptor_42506911a94aa353 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x6e, 0x2b, 0xcc, 0x43, 0x0c, 0x99, 0x09, 0xb2, 0x30, 0x65, 0x55, 0x04, 0x53,
	0xb6, 0x95, 0x58, 0xeb, 0xa4, 0x89, 0x13, 0x87, 0xc0, 0x05, 0x4d, 0xe2, 0x47, 0xc4, 0x09, 0x09,
	0x55, 0xce, 0x62, 0x82, 0xd5, 0xd6, 0xce, 0xe2, 0xb4, 0x22, 0xaa, 0x7a, 0xe1, 0x2f, 0x40, 0x82,
	0x2b, 0x27, 0xfe, 0x99, 0x1d, 0x27, 0x71, 0xe1, 0x84, 0x50, 0xbb, 0x3f, 0x04, 0xc5, 0x4e, 0x51,
	0xb6, 0x75, 0x5d, 0xc5, 0x29, 0x7e, 0x7e, 0xdf, 0xf7, 0x7d, 0x1f, 0xf9, 0xbd, 0xc0, 0xfb, 0x6d,
	0x96, 0x10, 0x1c, 0x10, 0xd9, 0xa6, 0x29, 0x3e, 0xee, 0xd1, 0x24, 0x73, 0xe3, 0x44, 0xa4, 0x02,
	0xad, 0xe4, 0x09, 0x57, 0x27, 0xcc, 0x9d, 0x23, 0x21, 0xbb, 0x42, 0xe6, 0x3a, 0xaa, 0x55, 0xb8,
	0xbf, 0x17, 0xd0, 0x94, 0xec, 0xe1, 0x98, 0x44, 0x8c, 0x93, 0x94, 0x09, 0xae, 0x0b, 0xcd, 0xb5,
	0x48, 0x44, 0x42, 0x1d, 0x71, 0x7e, 0x2a, 0x6e, 0xd7, 0x23, 0x21, 0xa2, 0x0e, 0xc5, 0x2a, 0x0a,
	0x7a, 0x1f, 0x30, 0xe1, 0x45, 0x27, 0x73, 0xa3, 0x48, 0x91, 0x98, 0x61, 0xc2, 0xb9, 0x48, 0x95,
	0x9b, 0x2c, 0xb2, 0x46, 0x19, 0x50, 0x7f, 0x74, 0xc6, 0x7e, 0x0c, 0x1f, 0xbc, 0xc9, 0x51, 0xde,
	0x8a, 0x36, 0xe5, 0x9e, 0xca, 0x78, 0xd9, 0x8b, 0xd0, 0xa7, 0xc7, 0x3d, 0x2a, 0x53, 0x74, 0x1b,
	0x56, 0x59, 0x68, 0x80, 0x3a, 0x70, 0x16, 0xfd, 0x2a, 0x0b, 0xed, 0x43, 0xb8, 0x31, 0x5d, 0x2e,
	0x63, 0xc1, 0x25, 0x45, 0xbb, 0xb0, 0xa6, 0xed, 0x55, 0xcd, 0x4a, 0xf3, 0xae, 0x5b, 0x7a, 0x01,
	0x57, 0x17, 0xf8, 0x85, 0xc4, 0x3e, 0x80, 0xd6, 0x65, 0xb3, 0xe7, 0x94, 0x8b, 0xee, 0xa4, 0xfd,
	0x1a, 0x5c, 0x0a, 0xf3, 0x58, 0xb9, 0x2d, 0xfb, 0x3a, 0xb0, 0x5f, 0xc2, 0xcd, 0x2b, 0xeb, 0xfe,
	0x87, 0xe3, 0x3d, 0x34, 0x2e, 0xfa, 0xc9, 0x09, 0xc1, 0x3d, 0x58, 0x4b, 0xf3, 0x6b, 0x69, 0x80,
	0xfa, 0x82, 0xb3, 0xec, 0x17, 0x11, 0xda, 0x86, 0x77, 0x42, 0x9a, 0xb0, 0x3e, 0x49, 0x59, 0x9f,
	0xca, 0x96, 0xe0, 0x9d, 0xcc, 0xa8, 0xd6, 0x81, 0x73, 0xd3, 0x5f, 0x2d, 0xdd, 0xbf, 0xe2, 0x9d,
	0xcc, 0x7e, 0x0d, 0xd7, 0xa7, 0xd8, 0x17, 0xa0, 0xfb, 0xf0, 0x86, 0xa6, 0xd0, 0x0d, 0xa6, 0x93,
	0x7a, 0x8b, 0x27, 0xbf, 0x37, 0x2b, 0xfe, 0x44, 0xd9, 0x3c, 0x5b, 0x80, 0x4b, 0xca, 0x12, 0x7d,
	0x03, 0x70, 0xf5, 0xc2, 0x2c, 0x90, 0x73, 0xce, 0x61, 0xc6, 0x74, 0xcd, 0xed, 0x39, 0x94, 0x9a,
	0xd3, 0x6e, 0x7c, 0xfe, 0x79, 0xf6, 0xb5, 0xba, 0x85, 0x1e, 0xe2, 0xf2, 0x2a, 0xa9, 0xc7, 0x68,
	0xe9, 0xa0, 0x15, 0x64, 0x2d, 0x16, 0xe2, 0x01, 0x0b, 0x87, 0xe8, 0x07, 0x80, 0xe8, 0xf2, 0x74,
	0xd0, 0xee, 0x35, 0xfd, 0xca, 0xb3, 0x37, 0x1b, 0xf3, 0x89, 0x0b, 0xbe, 0xa6, 0xe2, 0x6b, 0xa0,
	0x9d, 0x99, 0x7c, 0x6a, 0x7f, 0xf0, 0x40, 0x7d, 0x86, 0xe8, 0x3b, 0x80, 0xb7, 0xca, 0x43, 0x41,
	0x8f, 0x66, 0xb6, 0x9c, 0xec, 0x84, 0xb9, 0x75, 0x9d, 0xac, 0x60, 0x7a, 0xaa, 0x98, 0x9e, 0xa0,
	0x83, 0x2b, 0x99, 0x24, 0x1e, 0xe8, 0x7d, 0x1a, 0xe6, 0x50, 0xe7, 0xd7, 0x69, 0xe8, 0x79, 0x27,
	0x23, 0x0b, 0x9c, 0x8e, 0x2c, 0xf0, 0x67, 0x64, 0x81, 0x2f, 0x63, 0xab, 0x72, 0x3a, 0xb6, 0x2a,
	0xbf, 0xc6, 0x56, 0xe5, 0x9d, 0x13, 0xb1, 0xf4, 0x63, 0x2f, 0x70, 0x8f, 0x44, 0x17, 0x1f, 0xb2,
	0x84, 0x3c, 0x13, 0x09, 0xc5, 0x92, 0xb6, 0x09, 0xc3, 0x9f, 0xfe, 0xf5, 0xc9, 0x62, 0x2a, 0x83,
	0x9a, 0xfa, 0xcd, 0xf7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x93, 0x12, 0x09, 0x47, 0xa3, 0x04,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TokenBasketById queries a single basket by id
	TokenBasketById(ctx context.Context, in *QueryTokenBasketByIdRequest, opts ...grpc.CallOption) (*QueryTokenBasketByIdResponse, error)
	// TokenBasketByDenom queries a single basket by denom
	TokenBasketByDenom(ctx context.Context, in *QueryTokenBasketByDenomRequest, opts ...grpc.CallOption) (*QueryTokenBasketByDenomResponse, error)
	// TokenBaskets queries token baskets by filter
	TokenBaskets(ctx context.Context, in *QueryTokenBasketsRequest, opts ...grpc.CallOption) (*QueryTokenBasketsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TokenBasketById(ctx context.Context, in *QueryTokenBasketByIdRequest, opts ...grpc.CallOption) (*QueryTokenBasketByIdResponse, error) {
	out := new(QueryTokenBasketByIdResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Query/TokenBasketById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBasketByDenom(ctx context.Context, in *QueryTokenBasketByDenomRequest, opts ...grpc.CallOption) (*QueryTokenBasketByDenomResponse, error) {
	out := new(QueryTokenBasketByDenomResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Query/TokenBasketByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenBaskets(ctx context.Context, in *QueryTokenBasketsRequest, opts ...grpc.CallOption) (*QueryTokenBasketsResponse, error) {
	out := new(QueryTokenBasketsResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Query/TokenBaskets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TokenBasketById queries a single basket by id
	TokenBasketById(context.Context, *QueryTokenBasketByIdRequest) (*QueryTokenBasketByIdResponse, error)
	// TokenBasketByDenom queries a single basket by denom
	TokenBasketByDenom(context.Context, *QueryTokenBasketByDenomRequest) (*QueryTokenBasketByDenomResponse, error)
	// TokenBaskets queries token baskets by filter
	TokenBaskets(context.Context, *QueryTokenBasketsRequest) (*QueryTokenBasketsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) TokenBasketById(ctx context.Context, req *QueryTokenBasketByIdRequest) (*QueryTokenBasketByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBasketById not implemented")
}
func (*UnimplementedQueryServer) TokenBasketByDenom(ctx context.Context, req *QueryTokenBasketByDenomRequest) (*QueryTokenBasketByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBasketByDenom not implemented")
}
func (*UnimplementedQueryServer) TokenBaskets(ctx context.Context, req *QueryTokenBasketsRequest) (*QueryTokenBasketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenBaskets not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_TokenBasketById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBasketById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Query/TokenBasketById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBasketById(ctx, req.(*QueryTokenBasketByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBasketByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBasketByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Query/TokenBasketByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBasketByDenom(ctx, req.(*QueryTokenBasketByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenBaskets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenBasketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenBaskets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Query/TokenBaskets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenBaskets(ctx, req.(*QueryTokenBasketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.basket.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TokenBasketById",
			Handler:    _Query_TokenBasketById_Handler,
		},
		{
			MethodName: "TokenBasketByDenom",
			Handler:    _Query_TokenBasketByDenom_Handler,
		},
		{
			MethodName: "TokenBaskets",
			Handler:    _Query_TokenBaskets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/basket/query.proto",
}

func (m *QueryTokenBasketByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenBasketByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Basket != nil {
		{
			size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenBasketByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenBasketByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Basket != nil {
		{
			size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenBasketsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DerivativesOnly {
		i--
		if m.DerivativesOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tokens[iNdEx])
			copy(dAtA[i:], m.Tokens[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Tokens[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenBasketsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenBasketsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenBasketsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Baskets) > 0 {
		for iNdEx := len(m.Baskets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Baskets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTokenBasketByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTokenBasketByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basket != nil {
		l = m.Basket.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenBasketByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenBasketByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Basket != nil {
		l = m.Basket.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenBasketsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for _, s := range m.Tokens {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.DerivativesOnly {
		n += 2
	}
	return n
}

func (m *QueryTokenBasketsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Baskets) > 0 {
		for _, e := range m.Baskets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTokenBasketByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenBasketByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basket == nil {
				m.Basket = &Basket{}
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenBasketByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenBasketByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Basket == nil {
				m.Basket = &Basket{}
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenBasketsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativesOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DerivativesOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenBasketsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenBasketsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenBasketsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Baskets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Baskets = append(m.Baskets, Basket{})
			if err := m.Baskets[len(m.Baskets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
