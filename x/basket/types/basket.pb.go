// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/basket/basket.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Basket struct {
	Id              uint64                                    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Suffix          string                                    `protobuf:"bytes,2,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Description     string                                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	SwapFee         github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,5,opt,name=swap_fee,json=swapFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"swap_fee"`
	SlipppageFeeMin github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,6,opt,name=slipppage_fee_min,json=slipppageFeeMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"slipppage_fee_min"`
	TokensCap       github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,7,opt,name=tokens_cap,json=tokensCap,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"tokens_cap"`
	LimitsPeriod    uint64                                    `protobuf:"varint,8,opt,name=limits_period,json=limitsPeriod,proto3" json:"limits_period,omitempty"`
	MintsMin        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,9,opt,name=mints_min,json=mintsMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"mints_min"`
	MintsMax        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,10,opt,name=mints_max,json=mintsMax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"mints_max"`
	MintsDisabled   bool                                      `protobuf:"varint,11,opt,name=mints_disabled,json=mintsDisabled,proto3" json:"mints_disabled,omitempty"`
	BurnsMin        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,12,opt,name=burns_min,json=burnsMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"burns_min"`
	BurnsMax        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,13,opt,name=burns_max,json=burnsMax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"burns_max"`
	BurnsDisabled   bool                                      `protobuf:"varint,14,opt,name=burns_disabled,json=burnsDisabled,proto3" json:"burns_disabled,omitempty"`
	SwapsMin        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,15,opt,name=swaps_min,json=swapsMin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"swaps_min"`
	SwapsMax        github_com_cosmos_cosmos_sdk_types.Int    `protobuf:"bytes,16,opt,name=swaps_max,json=swapsMax,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"swaps_max"`
	SwapsDisabled   bool                                      `protobuf:"varint,17,opt,name=swaps_disabled,json=swapsDisabled,proto3" json:"swaps_disabled,omitempty"`
	Tokens          []BasketToken                             `protobuf:"bytes,18,rep,name=tokens,proto3" json:"tokens"`
	Surplus         []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,19,rep,name=surplus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"surplus"`
}

func (m *Basket) Reset()         { *m = Basket{} }
func (m *Basket) String() string { return proto.CompactTextString(m) }
func (*Basket) ProtoMessage()    {}
func (*Basket) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dee9a37d60b8713, []int{0}
}
func (m *Basket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Basket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Basket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Basket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Basket.Merge(m, src)
}
func (m *Basket) XXX_Size() int {
	return m.Size()
}
func (m *Basket) XXX_DiscardUnknown() {
	xxx_messageInfo_Basket.DiscardUnknown(m)
}

var xxx_messageInfo_Basket proto.InternalMessageInfo

func (m *Basket) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Basket) GetSuffix() string {
	if m != nil {
		return m.Suffix
	}
	return ""
}

func (m *Basket) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Basket) GetLimitsPeriod() uint64 {
	if m != nil {
		return m.LimitsPeriod
	}
	return 0
}

func (m *Basket) GetMintsDisabled() bool {
	if m != nil {
		return m.MintsDisabled
	}
	return false
}

func (m *Basket) GetBurnsDisabled() bool {
	if m != nil {
		return m.BurnsDisabled
	}
	return false
}

func (m *Basket) GetSwapsDisabled() bool {
	if m != nil {
		return m.SwapsDisabled
	}
	return false
}

func (m *Basket) GetTokens() []BasketToken {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type BasketToken struct {
	Denom     string                                 `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Weight    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
	Amount    github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Deposits  bool                                   `protobuf:"varint,4,opt,name=deposits,proto3" json:"deposits,omitempty"`
	Withdraws bool                                   `protobuf:"varint,5,opt,name=withdraws,proto3" json:"withdraws,omitempty"`
	Swaps     bool                                   `protobuf:"varint,6,opt,name=swaps,proto3" json:"swaps,omitempty"`
}

func (m *BasketToken) Reset()         { *m = BasketToken{} }
func (m *BasketToken) String() string { return proto.CompactTextString(m) }
func (*BasketToken) ProtoMessage()    {}
func (*BasketToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dee9a37d60b8713, []int{1}
}
func (m *BasketToken) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasketToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasketToken.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasketToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasketToken.Merge(m, src)
}
func (m *BasketToken) XXX_Size() int {
	return m.Size()
}
func (m *BasketToken) XXX_DiscardUnknown() {
	xxx_messageInfo_BasketToken.DiscardUnknown(m)
}

var xxx_messageInfo_BasketToken proto.InternalMessageInfo

func (m *BasketToken) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *BasketToken) GetDeposits() bool {
	if m != nil {
		return m.Deposits
	}
	return false
}

func (m *BasketToken) GetWithdraws() bool {
	if m != nil {
		return m.Withdraws
	}
	return false
}

func (m *BasketToken) GetSwaps() bool {
	if m != nil {
		return m.Swaps
	}
	return false
}

// used to record mint, burn, swap actions to prevent actions from exceeding daily limitation
type AmountAtTime struct {
	BasketId uint64                                 `protobuf:"varint,1,opt,name=basket_id,json=basketId,proto3" json:"basket_id,omitempty"`
	Time     uint64                                 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Amount   github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *AmountAtTime) Reset()         { *m = AmountAtTime{} }
func (m *AmountAtTime) String() string { return proto.CompactTextString(m) }
func (*AmountAtTime) ProtoMessage()    {}
func (*AmountAtTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dee9a37d60b8713, []int{2}
}
func (m *AmountAtTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AmountAtTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AmountAtTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AmountAtTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AmountAtTime.Merge(m, src)
}
func (m *AmountAtTime) XXX_Size() int {
	return m.Size()
}
func (m *AmountAtTime) XXX_DiscardUnknown() {
	xxx_messageInfo_AmountAtTime.DiscardUnknown(m)
}

var xxx_messageInfo_AmountAtTime proto.InternalMessageInfo

func (m *AmountAtTime) GetBasketId() uint64 {
	if m != nil {
		return m.BasketId
	}
	return 0
}

func (m *AmountAtTime) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

// Params represents the parameters used for by the module.
type Params struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_8dee9a37d60b8713, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func init() {
	proto.RegisterType((*Basket)(nil), "kira.basket.Basket")
	proto.RegisterType((*BasketToken)(nil), "kira.basket.BasketToken")
	proto.RegisterType((*AmountAtTime)(nil), "kira.basket.AmountAtTime")
	proto.RegisterType((*Params)(nil), "kira.basket.Params")
}

func init() { proto.RegisterFile("kira/basket/basket.proto", fileDescriptor_8dee9a37d60b8713) }

var fileDescriptor_8dee9a37d60b8713 = []byte{
	// 672 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0x4f, 0x6b, 0xdb, 0x3e,
	0x18, 0xc7, 0xe3, 0x24, 0x4d, 0x6d, 0xa5, 0x7f, 0x7e, 0xd5, 0xaf, 0x0c, 0xd1, 0x0d, 0x37, 0x64,
	0x6c, 0xcb, 0x65, 0x36, 0x6c, 0xb0, 0x7b, 0xd3, 0x12, 0x08, 0xa5, 0x50, 0x4c, 0x4f, 0xbd, 0x04,
	0x25, 0x56, 0x5c, 0x91, 0xd8, 0x12, 0x96, 0x4c, 0xb2, 0xf3, 0x0e, 0xbb, 0xee, 0x65, 0xec, 0xa5,
	0xf4, 0xd8, 0xe3, 0xd8, 0xa1, 0x8c, 0xf4, 0x65, 0xec, 0x32, 0xf4, 0xc8, 0x4d, 0x73, 0x5c, 0x93,
	0x9d, 0xec, 0xe7, 0x2b, 0xe9, 0xf3, 0xe8, 0x6b, 0xd9, 0x5f, 0x23, 0x32, 0xe1, 0x39, 0x0d, 0x87,
	0x54, 0x4d, 0x98, 0x2e, 0x2f, 0x81, 0xcc, 0x85, 0x16, 0xb8, 0x69, 0x46, 0x02, 0x2b, 0x1d, 0x1d,
	0x26, 0x22, 0x11, 0xa0, 0x87, 0xe6, 0xce, 0x4e, 0x39, 0x3a, 0x4e, 0x84, 0x48, 0xa6, 0x2c, 0x84,
	0x6a, 0x58, 0x8c, 0x43, 0xcd, 0x53, 0xa6, 0x34, 0x4d, 0xa5, 0x9d, 0xd0, 0xfe, 0xed, 0xa2, 0x46,
	0x17, 0x08, 0x78, 0x0f, 0x55, 0x79, 0x4c, 0x9c, 0x96, 0xd3, 0xa9, 0x47, 0x55, 0x1e, 0xe3, 0x17,
	0xa8, 0xa1, 0x8a, 0xf1, 0x98, 0xcf, 0x49, 0xb5, 0xe5, 0x74, 0xbc, 0xa8, 0xac, 0x70, 0x0b, 0x35,
	0x63, 0xa6, 0x46, 0x39, 0x97, 0x9a, 0x8b, 0x8c, 0xd4, 0x60, 0x70, 0x55, 0xc2, 0x3d, 0xd4, 0xa0,
	0xa9, 0x28, 0x32, 0x4d, 0xea, 0x66, 0xb0, 0x1b, 0xdc, 0xde, 0x1f, 0x57, 0x7e, 0xde, 0x1f, 0xbf,
	0x4d, 0xb8, 0xbe, 0x29, 0x86, 0xc1, 0x48, 0xa4, 0xe1, 0x48, 0xa8, 0x54, 0xa8, 0xf2, 0xf2, 0x5e,
	0xc5, 0x93, 0x50, 0x7f, 0x96, 0x4c, 0x05, 0xfd, 0x4c, 0x47, 0xe5, 0x6a, 0xdc, 0x47, 0xae, 0x9a,
	0x51, 0x39, 0x18, 0x33, 0x46, 0xb6, 0x9e, 0x4d, 0x3a, 0x63, 0xa3, 0x68, 0xdb, 0xac, 0xef, 0x31,
	0x86, 0xaf, 0xd1, 0x81, 0x9a, 0x72, 0x29, 0x25, 0x4d, 0x98, 0xe1, 0x0d, 0x52, 0x9e, 0x91, 0xc6,
	0x5a, 0xcc, 0xfd, 0x25, 0xa8, 0xc7, 0xd8, 0x05, 0xcf, 0xf0, 0x05, 0x42, 0x5a, 0x4c, 0x58, 0xa6,
	0x06, 0x23, 0x2a, 0xc9, 0xf6, 0x5a, 0x50, 0xcf, 0x12, 0x4e, 0xa9, 0xc4, 0xaf, 0xd1, 0xee, 0x94,
	0xa7, 0x5c, 0xab, 0x81, 0x64, 0x39, 0x17, 0x31, 0x71, 0xe1, 0x48, 0x76, 0xac, 0x78, 0x09, 0x1a,
	0x3e, 0x47, 0x5e, 0xca, 0x33, 0xad, 0xc0, 0x87, 0xb7, 0xd6, 0x53, 0x76, 0x01, 0x60, 0x0c, 0x3c,
	0xc1, 0xe8, 0x9c, 0xa0, 0x4d, 0x60, 0x74, 0x8e, 0xdf, 0xa0, 0x3d, 0x0b, 0x8b, 0xb9, 0xa2, 0xc3,
	0x29, 0x8b, 0x49, 0xb3, 0xe5, 0x74, 0xdc, 0x68, 0x17, 0xd4, 0xb3, 0x52, 0x34, 0x3d, 0x87, 0x45,
	0x9e, 0x59, 0x03, 0x3b, 0xeb, 0xf5, 0x04, 0x40, 0x69, 0xa0, 0x84, 0xd1, 0x39, 0xd9, 0xdd, 0x04,
	0x66, 0x0d, 0x58, 0xd8, 0xd2, 0xc0, 0x9e, 0x35, 0x00, 0xea, 0xaa, 0x01, 0xf3, 0x72, 0x59, 0x03,
	0xfb, 0xeb, 0xf5, 0x04, 0x40, 0x69, 0xa0, 0x84, 0xd1, 0x39, 0xf9, 0x6f, 0x13, 0x98, 0x35, 0x60,
	0x61, 0x4b, 0x03, 0x07, 0xd6, 0x00, 0xa8, 0x4b, 0x03, 0x9f, 0x50, 0xc3, 0xbe, 0x74, 0x04, 0xb7,
	0x6a, 0x9d, 0xe6, 0x07, 0x12, 0xac, 0xe4, 0x49, 0x60, 0x43, 0xe1, 0xca, 0x4c, 0xe8, 0xd6, 0xcd,
	0x56, 0xa2, 0x72, 0x36, 0xee, 0xa3, 0x6d, 0x55, 0xe4, 0x72, 0x5a, 0x28, 0xf2, 0x7f, 0xab, 0xd6,
	0xf1, 0xba, 0x61, 0xb9, 0xd3, 0x77, 0x7f, 0xb1, 0xd3, 0x53, 0xc1, 0xb3, 0xe8, 0x71, 0x7d, 0xfb,
	0x4b, 0x15, 0x35, 0x57, 0x1a, 0xe1, 0x43, 0xb4, 0x15, 0xb3, 0x4c, 0xa4, 0x90, 0x42, 0x5e, 0x64,
	0x0b, 0x13, 0x27, 0x33, 0xc6, 0x93, 0x1b, 0x6d, 0x83, 0xe8, 0xd9, 0xdf, 0x56, 0xb9, 0x7a, 0x25,
	0x96, 0x6a, 0x1b, 0xc5, 0xd2, 0x11, 0x72, 0x63, 0x26, 0x85, 0xe2, 0x5a, 0x41, 0xc0, 0xb9, 0xd1,
	0xb2, 0xc6, 0xaf, 0x90, 0x37, 0xe3, 0xfa, 0x26, 0xce, 0xe9, 0x4c, 0x41, 0x66, 0xb9, 0xd1, 0x93,
	0x60, 0xfc, 0xc1, 0x19, 0x40, 0xf2, 0xb8, 0x91, 0x2d, 0xda, 0x5f, 0x1d, 0xb4, 0x73, 0x02, 0xe8,
	0x13, 0x7d, 0xc5, 0x53, 0x86, 0x5f, 0x22, 0xcf, 0x9e, 0xc2, 0x60, 0x19, 0xc8, 0xae, 0x15, 0xfa,
	0x31, 0xc6, 0xa8, 0x6e, 0x42, 0x1c, 0x9e, 0x45, 0x3d, 0x82, 0xfb, 0x7f, 0xe5, 0xac, 0xed, 0xa3,
	0xc6, 0x25, 0xcd, 0x69, 0x0a, 0x3b, 0x15, 0xb3, 0x8c, 0xe5, 0x8f, 0x27, 0x01, 0x45, 0xb7, 0xf7,
	0x7d, 0xe1, 0x3b, 0xb7, 0x0b, 0xdf, 0xb9, 0x5b, 0xf8, 0xce, 0xaf, 0x85, 0xef, 0x7c, 0x7b, 0xf0,
	0x2b, 0x77, 0x0f, 0x7e, 0xe5, 0xc7, 0x83, 0x5f, 0xb9, 0xee, 0xac, 0x74, 0x3b, 0xe7, 0x39, 0x3d,
	0x15, 0x39, 0x0b, 0x15, 0x9b, 0x50, 0x1e, 0xce, 0x1f, 0x7f, 0x60, 0xd0, 0x73, 0xd8, 0x80, 0x9f,
	0xcf, 0xc7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9b, 0xfe, 0xee, 0x58, 0xdc, 0x06, 0x00, 0x00,
}

func (this *Basket) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Basket)
	if !ok {
		that2, ok := that.(Basket)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Suffix != that1.Suffix {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if !this.SwapFee.Equal(that1.SwapFee) {
		return false
	}
	if !this.SlipppageFeeMin.Equal(that1.SlipppageFeeMin) {
		return false
	}
	if !this.TokensCap.Equal(that1.TokensCap) {
		return false
	}
	if this.LimitsPeriod != that1.LimitsPeriod {
		return false
	}
	if !this.MintsMin.Equal(that1.MintsMin) {
		return false
	}
	if !this.MintsMax.Equal(that1.MintsMax) {
		return false
	}
	if this.MintsDisabled != that1.MintsDisabled {
		return false
	}
	if !this.BurnsMin.Equal(that1.BurnsMin) {
		return false
	}
	if !this.BurnsMax.Equal(that1.BurnsMax) {
		return false
	}
	if this.BurnsDisabled != that1.BurnsDisabled {
		return false
	}
	if !this.SwapsMin.Equal(that1.SwapsMin) {
		return false
	}
	if !this.SwapsMax.Equal(that1.SwapsMax) {
		return false
	}
	if this.SwapsDisabled != that1.SwapsDisabled {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(&that1.Tokens[i]) {
			return false
		}
	}
	if len(this.Surplus) != len(that1.Surplus) {
		return false
	}
	for i := range this.Surplus {
		if !this.Surplus[i].Equal(that1.Surplus[i]) {
			return false
		}
	}
	return true
}
func (this *BasketToken) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BasketToken)
	if !ok {
		that2, ok := that.(BasketToken)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	if this.Deposits != that1.Deposits {
		return false
	}
	if this.Withdraws != that1.Withdraws {
		return false
	}
	if this.Swaps != that1.Swaps {
		return false
	}
	return true
}
func (this *AmountAtTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AmountAtTime)
	if !ok {
		that2, ok := that.(AmountAtTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BasketId != that1.BasketId {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if !this.Amount.Equal(that1.Amount) {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	return true
}
func (m *Basket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Basket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Basket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Surplus) > 0 {
		for iNdEx := len(m.Surplus) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Surplus[iNdEx].Size()
				i -= size
				if _, err := m.Surplus[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintBasket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBasket(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if m.SwapsDisabled {
		i--
		if m.SwapsDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size := m.SwapsMax.Size()
		i -= size
		if _, err := m.SwapsMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size := m.SwapsMin.Size()
		i -= size
		if _, err := m.SwapsMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.BurnsDisabled {
		i--
		if m.BurnsDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.BurnsMax.Size()
		i -= size
		if _, err := m.BurnsMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size := m.BurnsMin.Size()
		i -= size
		if _, err := m.BurnsMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.MintsDisabled {
		i--
		if m.MintsDisabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.MintsMax.Size()
		i -= size
		if _, err := m.MintsMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.MintsMin.Size()
		i -= size
		if _, err := m.MintsMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.LimitsPeriod != 0 {
		i = encodeVarintBasket(dAtA, i, uint64(m.LimitsPeriod))
		i--
		dAtA[i] = 0x40
	}
	{
		size := m.TokensCap.Size()
		i -= size
		if _, err := m.TokensCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.SlipppageFeeMin.Size()
		i -= size
		if _, err := m.SlipppageFeeMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Suffix) > 0 {
		i -= len(m.Suffix)
		copy(dAtA[i:], m.Suffix)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Suffix)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBasket(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BasketToken) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasketToken) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasketToken) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Swaps {
		i--
		if m.Swaps {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Withdraws {
		i--
		if m.Withdraws {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Deposits {
		i--
		if m.Deposits {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AmountAtTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AmountAtTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AmountAtTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBasket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Time != 0 {
		i = encodeVarintBasket(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x10
	}
	if m.BasketId != 0 {
		i = encodeVarintBasket(dAtA, i, uint64(m.BasketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintBasket(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBasket(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Basket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBasket(uint64(m.Id))
	}
	l = len(m.Suffix)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.SwapFee.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.SlipppageFeeMin.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.TokensCap.Size()
	n += 1 + l + sovBasket(uint64(l))
	if m.LimitsPeriod != 0 {
		n += 1 + sovBasket(uint64(m.LimitsPeriod))
	}
	l = m.MintsMin.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.MintsMax.Size()
	n += 1 + l + sovBasket(uint64(l))
	if m.MintsDisabled {
		n += 2
	}
	l = m.BurnsMin.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.BurnsMax.Size()
	n += 1 + l + sovBasket(uint64(l))
	if m.BurnsDisabled {
		n += 2
	}
	l = m.SwapsMin.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.SwapsMax.Size()
	n += 2 + l + sovBasket(uint64(l))
	if m.SwapsDisabled {
		n += 3
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 2 + l + sovBasket(uint64(l))
		}
	}
	if len(m.Surplus) > 0 {
		for _, e := range m.Surplus {
			l = e.Size()
			n += 2 + l + sovBasket(uint64(l))
		}
	}
	return n
}

func (m *BasketToken) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovBasket(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovBasket(uint64(l))
	if m.Deposits {
		n += 2
	}
	if m.Withdraws {
		n += 2
	}
	if m.Swaps {
		n += 2
	}
	return n
}

func (m *AmountAtTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasketId != 0 {
		n += 1 + sovBasket(uint64(m.BasketId))
	}
	if m.Time != 0 {
		n += 1 + sovBasket(uint64(m.Time))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBasket(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovBasket(uint64(l))
	}
	return n
}

func sovBasket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasket(x uint64) (n int) {
	return sovBasket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Basket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Basket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Basket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suffix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Suffix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlipppageFeeMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlipppageFeeMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokensCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokensCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LimitsPeriod", wireType)
			}
			m.LimitsPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LimitsPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintsMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintsMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintsMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintsMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintsDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintsDisabled = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnsMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnsMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnsMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnsMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnsDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BurnsDisabled = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapsMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapsMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapsMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapsMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapsDisabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SwapsDisabled = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, BasketToken{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Surplus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Surplus = append(m.Surplus, v)
			if err := m.Surplus[len(m.Surplus)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BasketToken) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasketToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasketToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposits", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Deposits = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Withdraws", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Withdraws = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swaps", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Swaps = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AmountAtTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AmountAtTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AmountAtTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasketId", wireType)
			}
			m.BasketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBasket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBasket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasket = fmt.Errorf("proto: unexpected end of group")
)
