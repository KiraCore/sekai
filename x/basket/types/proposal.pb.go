// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/basket/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// proposal to create a token basket
type ProposalCreateBasket struct {
	Basket Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket"`
}

func (m *ProposalCreateBasket) Reset()         { *m = ProposalCreateBasket{} }
func (m *ProposalCreateBasket) String() string { return proto.CompactTextString(m) }
func (*ProposalCreateBasket) ProtoMessage()    {}
func (*ProposalCreateBasket) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{0}
}
func (m *ProposalCreateBasket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalCreateBasket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalCreateBasket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalCreateBasket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalCreateBasket.Merge(m, src)
}
func (m *ProposalCreateBasket) XXX_Size() int {
	return m.Size()
}
func (m *ProposalCreateBasket) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalCreateBasket.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalCreateBasket proto.InternalMessageInfo

func (m *ProposalCreateBasket) GetBasket() Basket {
	if m != nil {
		return m.Basket
	}
	return Basket{}
}

// proposal to edit properties of the basket
type ProposalEditBasket struct {
	Basket Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket"`
}

func (m *ProposalEditBasket) Reset()         { *m = ProposalEditBasket{} }
func (m *ProposalEditBasket) String() string { return proto.CompactTextString(m) }
func (*ProposalEditBasket) ProtoMessage()    {}
func (*ProposalEditBasket) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{1}
}
func (m *ProposalEditBasket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalEditBasket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalEditBasket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalEditBasket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalEditBasket.Merge(m, src)
}
func (m *ProposalEditBasket) XXX_Size() int {
	return m.Size()
}
func (m *ProposalEditBasket) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalEditBasket.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalEditBasket proto.InternalMessageInfo

func (m *ProposalEditBasket) GetBasket() Basket {
	if m != nil {
		return m.Basket
	}
	return Basket{}
}

// proposal to withdraw surplus of one or all tokens in the `surplus` array of
// the basket to a specific wallet or a spending pool
type ProposalBasketWithdrawSurplus struct {
	BasketId uint64 `protobuf:"varint,1,opt,name=basket_id,json=basketId,proto3" json:"basket_id,omitempty"`
}

func (m *ProposalBasketWithdrawSurplus) Reset()         { *m = ProposalBasketWithdrawSurplus{} }
func (m *ProposalBasketWithdrawSurplus) String() string { return proto.CompactTextString(m) }
func (*ProposalBasketWithdrawSurplus) ProtoMessage()    {}
func (*ProposalBasketWithdrawSurplus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{2}
}
func (m *ProposalBasketWithdrawSurplus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalBasketWithdrawSurplus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalBasketWithdrawSurplus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalBasketWithdrawSurplus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalBasketWithdrawSurplus.Merge(m, src)
}
func (m *ProposalBasketWithdrawSurplus) XXX_Size() int {
	return m.Size()
}
func (m *ProposalBasketWithdrawSurplus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalBasketWithdrawSurplus.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalBasketWithdrawSurplus proto.InternalMessageInfo

func (m *ProposalBasketWithdrawSurplus) GetBasketId() uint64 {
	if m != nil {
		return m.BasketId
	}
	return 0
}

func init() {
	proto.RegisterType((*ProposalCreateBasket)(nil), "kira.basket.ProposalCreateBasket")
	proto.RegisterType((*ProposalEditBasket)(nil), "kira.basket.ProposalEditBasket")
	proto.RegisterType((*ProposalBasketWithdrawSurplus)(nil), "kira.basket.ProposalBasketWithdrawSurplus")
}

func init() { proto.RegisterFile("kira/basket/proposal.proto", fileDescriptor_5cb09524a833b7d6) }

var fileDescriptor_5cb09524a833b7d6 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x13, 0xa9, 0xaa, 0xc0, 0xdd, 0x42, 0x87, 0x12, 0x84, 0x8b, 0x3a, 0x75, 0x8a, 0x05,
	0xac, 0x4c, 0xa9, 0x10, 0xaa, 0x58, 0x50, 0x19, 0x90, 0x58, 0x2a, 0xa7, 0x31, 0xae, 0x95, 0x44,
	0x67, 0xd9, 0x8e, 0x80, 0xb7, 0xe0, 0xb1, 0x3a, 0x76, 0x64, 0x42, 0x28, 0x79, 0x11, 0x54, 0x5f,
	0x22, 0x75, 0x66, 0xb2, 0xef, 0xbe, 0x4f, 0xff, 0x9d, 0x8e, 0xc4, 0x85, 0x32, 0x9c, 0x65, 0xdc,
	0x16, 0xc2, 0x31, 0x6d, 0x40, 0x83, 0xe5, 0x65, 0xa2, 0x0d, 0x38, 0x88, 0x46, 0x07, 0x96, 0x20,
	0x8b, 0xc7, 0x12, 0x24, 0xf8, 0x3e, 0x3b, 0xfc, 0x50, 0x89, 0xcf, 0x37, 0x60, 0x2b, 0xb0, 0x6b,
	0x04, 0x58, 0x74, 0x68, 0x2a, 0x01, 0x64, 0x29, 0x98, 0xaf, 0xb2, 0xfa, 0x8d, 0x39, 0x55, 0x09,
	0xeb, 0x78, 0xa5, 0x3b, 0x61, 0x72, 0x3c, 0x1a, 0x1f, 0x24, 0xb3, 0x25, 0x19, 0x3f, 0x75, 0xab,
	0x2c, 0x8c, 0xe0, 0x4e, 0xa4, 0x9e, 0x46, 0xd7, 0x64, 0x88, 0xde, 0x24, 0xbc, 0x0a, 0xe7, 0xa3,
	0x9b, 0xb3, 0xe4, 0x68, 0xc3, 0x04, 0xa5, 0x74, 0xb0, 0xfb, 0x99, 0x06, 0xab, 0x4e, 0x9c, 0x3d,
	0x90, 0xa8, 0x8f, 0xba, 0xcf, 0x95, 0xfb, 0x7f, 0xd0, 0x1d, 0xb9, 0xec, 0x83, 0x90, 0xbf, 0x28,
	0xb7, 0xcd, 0x0d, 0x7f, 0x7f, 0xae, 0x8d, 0x2e, 0x6b, 0x1b, 0x5d, 0x90, 0x53, 0x54, 0xd7, 0x2a,
	0xf7, 0xb1, 0x83, 0xd5, 0x09, 0x36, 0x96, 0x79, 0x9a, 0xee, 0x1a, 0x1a, 0xee, 0x1b, 0x1a, 0xfe,
	0x36, 0x34, 0xfc, 0x6a, 0x69, 0xb0, 0x6f, 0x69, 0xf0, 0xdd, 0xd2, 0xe0, 0x75, 0x2e, 0x95, 0xdb,
	0xd6, 0x59, 0xb2, 0x81, 0x8a, 0x3d, 0x2a, 0xc3, 0x17, 0x60, 0x04, 0xb3, 0xa2, 0xe0, 0x8a, 0x7d,
	0xf4, 0xc7, 0x71, 0x9f, 0x5a, 0xd8, 0x6c, 0xe8, 0x8f, 0x73, 0xfb, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x87, 0x04, 0xee, 0xe4, 0xb3, 0x01, 0x00, 0x00,
}

func (m *ProposalCreateBasket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalCreateBasket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalCreateBasket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalEditBasket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalEditBasket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalEditBasket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalBasketWithdrawSurplus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalBasketWithdrawSurplus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalBasketWithdrawSurplus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BasketId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.BasketId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalCreateBasket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Basket.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *ProposalEditBasket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Basket.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *ProposalBasketWithdrawSurplus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasketId != 0 {
		n += 1 + sovProposal(uint64(m.BasketId))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalCreateBasket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalCreateBasket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalCreateBasket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalEditBasket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalEditBasket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalEditBasket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalBasketWithdrawSurplus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalBasketWithdrawSurplus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalBasketWithdrawSurplus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasketId", wireType)
			}
			m.BasketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BasketId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
