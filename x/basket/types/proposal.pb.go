// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/basket/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// proposal to create a token basket
type ProposalCreateBasket struct {
	Basket Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket"`
}

func (m *ProposalCreateBasket) Reset()         { *m = ProposalCreateBasket{} }
func (m *ProposalCreateBasket) String() string { return proto.CompactTextString(m) }
func (*ProposalCreateBasket) ProtoMessage()    {}
func (*ProposalCreateBasket) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{0}
}
func (m *ProposalCreateBasket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalCreateBasket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalCreateBasket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalCreateBasket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalCreateBasket.Merge(m, src)
}
func (m *ProposalCreateBasket) XXX_Size() int {
	return m.Size()
}
func (m *ProposalCreateBasket) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalCreateBasket.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalCreateBasket proto.InternalMessageInfo

func (m *ProposalCreateBasket) GetBasket() Basket {
	if m != nil {
		return m.Basket
	}
	return Basket{}
}

// proposal to edit properties of the basket
type ProposalEditBasket struct {
	Basket Basket `protobuf:"bytes,1,opt,name=basket,proto3" json:"basket"`
}

func (m *ProposalEditBasket) Reset()         { *m = ProposalEditBasket{} }
func (m *ProposalEditBasket) String() string { return proto.CompactTextString(m) }
func (*ProposalEditBasket) ProtoMessage()    {}
func (*ProposalEditBasket) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{1}
}
func (m *ProposalEditBasket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalEditBasket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalEditBasket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalEditBasket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalEditBasket.Merge(m, src)
}
func (m *ProposalEditBasket) XXX_Size() int {
	return m.Size()
}
func (m *ProposalEditBasket) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalEditBasket.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalEditBasket proto.InternalMessageInfo

func (m *ProposalEditBasket) GetBasket() Basket {
	if m != nil {
		return m.Basket
	}
	return Basket{}
}

// proposal to withdraw surplus of one or all tokens in the `surplus` array of
// the basket to a specific wallet or a spending pool
type ProposalBasketWithdrawSurplus struct {
	BasketIds      []uint64 `protobuf:"varint,1,rep,packed,name=basket_ids,json=basketIds,proto3" json:"basket_ids,omitempty"`
	WithdrawTarget string   `protobuf:"bytes,2,opt,name=withdraw_target,json=withdrawTarget,proto3" json:"withdraw_target,omitempty"`
}

func (m *ProposalBasketWithdrawSurplus) Reset()         { *m = ProposalBasketWithdrawSurplus{} }
func (m *ProposalBasketWithdrawSurplus) String() string { return proto.CompactTextString(m) }
func (*ProposalBasketWithdrawSurplus) ProtoMessage()    {}
func (*ProposalBasketWithdrawSurplus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5cb09524a833b7d6, []int{2}
}
func (m *ProposalBasketWithdrawSurplus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalBasketWithdrawSurplus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalBasketWithdrawSurplus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalBasketWithdrawSurplus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalBasketWithdrawSurplus.Merge(m, src)
}
func (m *ProposalBasketWithdrawSurplus) XXX_Size() int {
	return m.Size()
}
func (m *ProposalBasketWithdrawSurplus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalBasketWithdrawSurplus.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalBasketWithdrawSurplus proto.InternalMessageInfo

func (m *ProposalBasketWithdrawSurplus) GetBasketIds() []uint64 {
	if m != nil {
		return m.BasketIds
	}
	return nil
}

func (m *ProposalBasketWithdrawSurplus) GetWithdrawTarget() string {
	if m != nil {
		return m.WithdrawTarget
	}
	return ""
}

func init() {
	proto.RegisterType((*ProposalCreateBasket)(nil), "kira.basket.ProposalCreateBasket")
	proto.RegisterType((*ProposalEditBasket)(nil), "kira.basket.ProposalEditBasket")
	proto.RegisterType((*ProposalBasketWithdrawSurplus)(nil), "kira.basket.ProposalBasketWithdrawSurplus")
}

func init() { proto.RegisterFile("kira/basket/proposal.proto", fileDescriptor_5cb09524a833b7d6) }

var fileDescriptor_5cb09524a833b7d6 = []byte{
	// 308 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x90, 0x41, 0x4b, 0xf3, 0x30,
	0x18, 0xc7, 0x9b, 0xf7, 0x1d, 0x83, 0x65, 0xa0, 0x50, 0x77, 0xa8, 0x83, 0x65, 0x63, 0x17, 0x7b,
	0x6a, 0x50, 0xbf, 0x41, 0x87, 0xc8, 0xf0, 0x22, 0x53, 0x10, 0xbc, 0x8c, 0x74, 0x8d, 0x59, 0x68,
	0xcb, 0x13, 0x92, 0x94, 0xe9, 0xb7, 0xf0, 0x63, 0xed, 0xb8, 0xa3, 0x27, 0x91, 0xf6, 0x8b, 0xc8,
	0x9a, 0x16, 0x76, 0xf6, 0x94, 0x3c, 0xff, 0xdf, 0x2f, 0x4f, 0x1e, 0x1e, 0x3c, 0xce, 0xa4, 0x66,
	0x34, 0x61, 0x26, 0xe3, 0x96, 0x2a, 0x0d, 0x0a, 0x0c, 0xcb, 0x23, 0xa5, 0xc1, 0x82, 0x3f, 0x3c,
	0xb2, 0xc8, 0xb1, 0xf1, 0x48, 0x80, 0x80, 0x26, 0xa7, 0xc7, 0x9b, 0x53, 0xc6, 0x97, 0x1b, 0x30,
	0x05, 0x98, 0xb5, 0x03, 0xae, 0x68, 0xd1, 0x54, 0x00, 0x88, 0x9c, 0xd3, 0xa6, 0x4a, 0xca, 0x37,
	0x6a, 0x65, 0xc1, 0x8d, 0x65, 0x85, 0x6a, 0x85, 0xe0, 0xf4, 0x6b, 0x77, 0x38, 0x32, 0x5f, 0xe2,
	0xd1, 0x63, 0x3b, 0xca, 0x42, 0x73, 0x66, 0x79, 0xdc, 0x50, 0xff, 0x1a, 0xf7, 0x9d, 0x17, 0xa0,
	0x19, 0x0a, 0x87, 0x37, 0x17, 0xd1, 0xc9, 0x84, 0x91, 0x93, 0xe2, 0xde, 0xfe, 0x7b, 0xea, 0xad,
	0x5a, 0x71, 0x7e, 0x8f, 0xfd, 0xae, 0xd5, 0x5d, 0x2a, 0xed, 0xdf, 0x1b, 0x09, 0x3c, 0xe9, 0x1a,
	0x39, 0xfe, 0x22, 0xed, 0x36, 0xd5, 0x6c, 0xf7, 0x54, 0x6a, 0x95, 0x97, 0xc6, 0x9f, 0x60, 0xec,
	0xd4, 0xb5, 0x4c, 0x4d, 0x80, 0x66, 0xff, 0xc3, 0xde, 0x6a, 0xe0, 0x92, 0x65, 0x6a, 0xfc, 0x2b,
	0x7c, 0xbe, 0x6b, 0x5f, 0xac, 0x2d, 0xd3, 0x82, 0xdb, 0xe0, 0xdf, 0x0c, 0x85, 0x83, 0xd5, 0x59,
	0x17, 0x3f, 0x37, 0x69, 0x1c, 0xef, 0x2b, 0x82, 0x0e, 0x15, 0x41, 0x3f, 0x15, 0x41, 0x9f, 0x35,
	0xf1, 0x0e, 0x35, 0xf1, 0xbe, 0x6a, 0xe2, 0xbd, 0x86, 0x42, 0xda, 0x6d, 0x99, 0x44, 0x1b, 0x28,
	0xe8, 0x83, 0xd4, 0x6c, 0x01, 0x9a, 0x53, 0xc3, 0x33, 0x26, 0xe9, 0x7b, 0xb7, 0x47, 0xfb, 0xa1,
	0xb8, 0x49, 0xfa, 0xcd, 0x1e, 0x6f, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x17, 0x3f, 0x58, 0xac,
	0xde, 0x01, 0x00, 0x00,
}

func (m *ProposalCreateBasket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalCreateBasket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalCreateBasket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalEditBasket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalEditBasket) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalEditBasket) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Basket.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ProposalBasketWithdrawSurplus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalBasketWithdrawSurplus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalBasketWithdrawSurplus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawTarget) > 0 {
		i -= len(m.WithdrawTarget)
		copy(dAtA[i:], m.WithdrawTarget)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.WithdrawTarget)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BasketIds) > 0 {
		dAtA4 := make([]byte, len(m.BasketIds)*10)
		var j3 int
		for _, num := range m.BasketIds {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintProposal(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProposalCreateBasket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Basket.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *ProposalEditBasket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Basket.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *ProposalBasketWithdrawSurplus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BasketIds) > 0 {
		l = 0
		for _, e := range m.BasketIds {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	l = len(m.WithdrawTarget)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProposalCreateBasket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalCreateBasket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalCreateBasket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalEditBasket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalEditBasket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalEditBasket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Basket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Basket.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalBasketWithdrawSurplus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalBasketWithdrawSurplus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalBasketWithdrawSurplus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BasketIds = append(m.BasketIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BasketIds) == 0 {
					m.BasketIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BasketIds = append(m.BasketIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BasketIds", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawTarget", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawTarget = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
