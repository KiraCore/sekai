// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/basket/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// - `disable-basket-deposits` - emergency function & permission to disable one or all deposits of one or all token in the basket
//     - To disable all deposits at once the `mints_max` should be set to `0`
//     - To disable single token set `deposits` boolean flag to false
type MsgDisableBasketDeposits struct {
}

func (m *MsgDisableBasketDeposits) Reset()         { *m = MsgDisableBasketDeposits{} }
func (m *MsgDisableBasketDeposits) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketDeposits) ProtoMessage()    {}
func (*MsgDisableBasketDeposits) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{0}
}
func (m *MsgDisableBasketDeposits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketDeposits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketDeposits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketDeposits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketDeposits.Merge(m, src)
}
func (m *MsgDisableBasketDeposits) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketDeposits) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketDeposits.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketDeposits proto.InternalMessageInfo

type MsgDisableBasketDepositsResponse struct {
}

func (m *MsgDisableBasketDepositsResponse) Reset()         { *m = MsgDisableBasketDepositsResponse{} }
func (m *MsgDisableBasketDepositsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketDepositsResponse) ProtoMessage()    {}
func (*MsgDisableBasketDepositsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{1}
}
func (m *MsgDisableBasketDepositsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketDepositsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketDepositsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketDepositsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketDepositsResponse.Merge(m, src)
}
func (m *MsgDisableBasketDepositsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketDepositsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketDepositsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketDepositsResponse proto.InternalMessageInfo

// - `disable-basket-withdraws`- emergency function & permission to disable one or all withdrawals of one or all token in the basket
//     - To disable all withdraws at once the `burns_max` should be set to `0`
//     - To disable single token set `withdraws` boolean flag to false
type MsgDisableBasketWithdraws struct {
}

func (m *MsgDisableBasketWithdraws) Reset()         { *m = MsgDisableBasketWithdraws{} }
func (m *MsgDisableBasketWithdraws) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketWithdraws) ProtoMessage()    {}
func (*MsgDisableBasketWithdraws) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{2}
}
func (m *MsgDisableBasketWithdraws) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketWithdraws) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketWithdraws.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketWithdraws) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketWithdraws.Merge(m, src)
}
func (m *MsgDisableBasketWithdraws) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketWithdraws) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketWithdraws.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketWithdraws proto.InternalMessageInfo

type MsgDisableBasketWithdrawsResponse struct {
}

func (m *MsgDisableBasketWithdrawsResponse) Reset()         { *m = MsgDisableBasketWithdrawsResponse{} }
func (m *MsgDisableBasketWithdrawsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketWithdrawsResponse) ProtoMessage()    {}
func (*MsgDisableBasketWithdrawsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{3}
}
func (m *MsgDisableBasketWithdrawsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketWithdrawsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketWithdrawsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketWithdrawsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketWithdrawsResponse.Merge(m, src)
}
func (m *MsgDisableBasketWithdrawsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketWithdrawsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketWithdrawsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketWithdrawsResponse proto.InternalMessageInfo

// - `disable-basket-swaps`- emergency function & permission to disable one or all swaps of one or all token in the basket
//     - To disable all swaps at once the `swaps_max` should be set to `0`
//     - To disable single token set `swaps` boolean flag to false
type MsgDisableBasketSwaps struct {
}

func (m *MsgDisableBasketSwaps) Reset()         { *m = MsgDisableBasketSwaps{} }
func (m *MsgDisableBasketSwaps) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketSwaps) ProtoMessage()    {}
func (*MsgDisableBasketSwaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{4}
}
func (m *MsgDisableBasketSwaps) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketSwaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketSwaps.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketSwaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketSwaps.Merge(m, src)
}
func (m *MsgDisableBasketSwaps) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketSwaps) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketSwaps.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketSwaps proto.InternalMessageInfo

type MsgDisableBasketSwapsResponse struct {
}

func (m *MsgDisableBasketSwapsResponse) Reset()         { *m = MsgDisableBasketSwapsResponse{} }
func (m *MsgDisableBasketSwapsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableBasketSwapsResponse) ProtoMessage()    {}
func (*MsgDisableBasketSwapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{5}
}
func (m *MsgDisableBasketSwapsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableBasketSwapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableBasketSwapsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableBasketSwapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableBasketSwapsResponse.Merge(m, src)
}
func (m *MsgDisableBasketSwapsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableBasketSwapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableBasketSwapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableBasketSwapsResponse proto.InternalMessageInfo

// - `basket-token-mint` - transaction to mint basket tokens
type MsgBasketTokenMint struct {
}

func (m *MsgBasketTokenMint) Reset()         { *m = MsgBasketTokenMint{} }
func (m *MsgBasketTokenMint) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenMint) ProtoMessage()    {}
func (*MsgBasketTokenMint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{6}
}
func (m *MsgBasketTokenMint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenMint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenMint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenMint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenMint.Merge(m, src)
}
func (m *MsgBasketTokenMint) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenMint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenMint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenMint proto.InternalMessageInfo

type MsgBasketTokenMintResponse struct {
}

func (m *MsgBasketTokenMintResponse) Reset()         { *m = MsgBasketTokenMintResponse{} }
func (m *MsgBasketTokenMintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenMintResponse) ProtoMessage()    {}
func (*MsgBasketTokenMintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{7}
}
func (m *MsgBasketTokenMintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenMintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenMintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenMintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenMintResponse.Merge(m, src)
}
func (m *MsgBasketTokenMintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenMintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenMintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenMintResponse proto.InternalMessageInfo

// - `basket-token-burn` - transaction to burn basket tokens and redeem underlying aggregate tokens
type MsgBasketTokenBurn struct {
}

func (m *MsgBasketTokenBurn) Reset()         { *m = MsgBasketTokenBurn{} }
func (m *MsgBasketTokenBurn) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenBurn) ProtoMessage()    {}
func (*MsgBasketTokenBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{8}
}
func (m *MsgBasketTokenBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenBurn.Merge(m, src)
}
func (m *MsgBasketTokenBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenBurn proto.InternalMessageInfo

type MsgBasketTokenBurnResponse struct {
}

func (m *MsgBasketTokenBurnResponse) Reset()         { *m = MsgBasketTokenBurnResponse{} }
func (m *MsgBasketTokenBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenBurnResponse) ProtoMessage()    {}
func (*MsgBasketTokenBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{9}
}
func (m *MsgBasketTokenBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenBurnResponse.Merge(m, src)
}
func (m *MsgBasketTokenBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenBurnResponse proto.InternalMessageInfo

// - `basket-token-swap` - transaction to swap one or many of the basket tokens for one or many others
type MsgBasketTokenSwap struct {
}

func (m *MsgBasketTokenSwap) Reset()         { *m = MsgBasketTokenSwap{} }
func (m *MsgBasketTokenSwap) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenSwap) ProtoMessage()    {}
func (*MsgBasketTokenSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{10}
}
func (m *MsgBasketTokenSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenSwap.Merge(m, src)
}
func (m *MsgBasketTokenSwap) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenSwap.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenSwap proto.InternalMessageInfo

type MsgBasketTokenSwapResponse struct {
}

func (m *MsgBasketTokenSwapResponse) Reset()         { *m = MsgBasketTokenSwapResponse{} }
func (m *MsgBasketTokenSwapResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBasketTokenSwapResponse) ProtoMessage()    {}
func (*MsgBasketTokenSwapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{11}
}
func (m *MsgBasketTokenSwapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketTokenSwapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketTokenSwapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketTokenSwapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketTokenSwapResponse.Merge(m, src)
}
func (m *MsgBasketTokenSwapResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketTokenSwapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketTokenSwapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketTokenSwapResponse proto.InternalMessageInfo

// - `basket-claim-rewards` - transaction to force staking derivative `SDB` basket to claim outstanding rewards of one all or many aggregate `V<ID>` tokens
type MsgBasketClaimRewards struct {
}

func (m *MsgBasketClaimRewards) Reset()         { *m = MsgBasketClaimRewards{} }
func (m *MsgBasketClaimRewards) String() string { return proto.CompactTextString(m) }
func (*MsgBasketClaimRewards) ProtoMessage()    {}
func (*MsgBasketClaimRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{12}
}
func (m *MsgBasketClaimRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketClaimRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketClaimRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketClaimRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketClaimRewards.Merge(m, src)
}
func (m *MsgBasketClaimRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketClaimRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketClaimRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketClaimRewards proto.InternalMessageInfo

type MsgBasketClaimRewardsResponse struct {
}

func (m *MsgBasketClaimRewardsResponse) Reset()         { *m = MsgBasketClaimRewardsResponse{} }
func (m *MsgBasketClaimRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBasketClaimRewardsResponse) ProtoMessage()    {}
func (*MsgBasketClaimRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f49b6d7fee9897c9, []int{13}
}
func (m *MsgBasketClaimRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBasketClaimRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBasketClaimRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBasketClaimRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBasketClaimRewardsResponse.Merge(m, src)
}
func (m *MsgBasketClaimRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBasketClaimRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBasketClaimRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBasketClaimRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgDisableBasketDeposits)(nil), "kira.basket.MsgDisableBasketDeposits")
	proto.RegisterType((*MsgDisableBasketDepositsResponse)(nil), "kira.basket.MsgDisableBasketDepositsResponse")
	proto.RegisterType((*MsgDisableBasketWithdraws)(nil), "kira.basket.MsgDisableBasketWithdraws")
	proto.RegisterType((*MsgDisableBasketWithdrawsResponse)(nil), "kira.basket.MsgDisableBasketWithdrawsResponse")
	proto.RegisterType((*MsgDisableBasketSwaps)(nil), "kira.basket.MsgDisableBasketSwaps")
	proto.RegisterType((*MsgDisableBasketSwapsResponse)(nil), "kira.basket.MsgDisableBasketSwapsResponse")
	proto.RegisterType((*MsgBasketTokenMint)(nil), "kira.basket.MsgBasketTokenMint")
	proto.RegisterType((*MsgBasketTokenMintResponse)(nil), "kira.basket.MsgBasketTokenMintResponse")
	proto.RegisterType((*MsgBasketTokenBurn)(nil), "kira.basket.MsgBasketTokenBurn")
	proto.RegisterType((*MsgBasketTokenBurnResponse)(nil), "kira.basket.MsgBasketTokenBurnResponse")
	proto.RegisterType((*MsgBasketTokenSwap)(nil), "kira.basket.MsgBasketTokenSwap")
	proto.RegisterType((*MsgBasketTokenSwapResponse)(nil), "kira.basket.MsgBasketTokenSwapResponse")
	proto.RegisterType((*MsgBasketClaimRewards)(nil), "kira.basket.MsgBasketClaimRewards")
	proto.RegisterType((*MsgBasketClaimRewardsResponse)(nil), "kira.basket.MsgBasketClaimRewardsResponse")
}

func init() { proto.RegisterFile("kira/basket/tx.proto", fileDescriptor_f49b6d7fee9897c9) }

var fileDescriptor_f49b6d7fee9897c9 = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcf, 0x6a, 0xdb, 0x30,
	0x18, 0x8f, 0x19, 0xdb, 0x41, 0x3b, 0x0c, 0x44, 0xb2, 0x25, 0xde, 0xe6, 0x6c, 0x1a, 0x63, 0x63,
	0x30, 0x0b, 0xb6, 0x37, 0x48, 0xc2, 0x2e, 0xc3, 0x97, 0xb4, 0x50, 0x68, 0x0f, 0x45, 0x4e, 0x54,
	0x45, 0x38, 0xb6, 0x8c, 0xe5, 0x90, 0xe4, 0x2d, 0xfa, 0x18, 0x7d, 0x93, 0xf6, 0x98, 0x63, 0x8f,
	0xc5, 0x79, 0x91, 0x22, 0xab, 0x36, 0xc6, 0x8a, 0x9d, 0x5e, 0x7a, 0x4a, 0xf4, 0xfd, 0xfe, 0x7c,
	0xd6, 0xf7, 0xfd, 0x10, 0xe8, 0x06, 0x3c, 0x21, 0xd8, 0x27, 0x32, 0xa0, 0x29, 0x4e, 0x37, 0x6e,
	0x9c, 0x88, 0x54, 0xc0, 0xb7, 0xaa, 0xea, 0xea, 0xaa, 0xdd, 0x65, 0x82, 0x89, 0xbc, 0x8e, 0xd5,
	0x3f, 0x4d, 0xb1, 0x07, 0x4c, 0x08, 0xb6, 0xa4, 0x38, 0x3f, 0xf9, 0xab, 0x2b, 0x4c, 0xa2, 0x6d,
	0x01, 0xcd, 0x84, 0x0c, 0x85, 0xbc, 0xd4, 0x1a, 0x7d, 0x78, 0x82, 0xfa, 0xd5, 0x76, 0xfa, 0x47,
	0x23, 0xc8, 0x06, 0x7d, 0x4f, 0xb2, 0x09, 0x97, 0xc4, 0x5f, 0xd2, 0x51, 0x8e, 0x4c, 0x68, 0x2c,
	0x24, 0x4f, 0x25, 0x42, 0xe0, 0x4b, 0x13, 0x36, 0xa5, 0x32, 0x16, 0x91, 0xa4, 0xe8, 0x23, 0x18,
	0xd4, 0x39, 0x67, 0x3c, 0x5d, 0xcc, 0x13, 0xb2, 0x96, 0xe8, 0x1b, 0xf8, 0xda, 0x08, 0x96, 0x0e,
	0x1f, 0x40, 0xaf, 0x4e, 0x3a, 0x59, 0x93, 0x58, 0xa2, 0x21, 0xf8, 0x7c, 0x10, 0x28, 0x95, 0x5d,
	0x00, 0x3d, 0xc9, 0x34, 0x72, 0x2a, 0x02, 0x1a, 0x79, 0x3c, 0x4a, 0xd1, 0x27, 0x60, 0x9b, 0xd5,
	0x66, 0xcd, 0x68, 0x95, 0x44, 0xa6, 0x46, 0x55, 0x9b, 0x35, 0xea, 0x33, 0x4c, 0x8d, 0xaa, 0xd6,
	0x6e, 0xa5, 0xd1, 0xf1, 0x92, 0xf0, 0x70, 0x4a, 0xd7, 0x24, 0x99, 0x17, 0xb7, 0x32, 0x81, 0x42,
	0xf9, 0xe7, 0xf6, 0x35, 0x78, 0xe5, 0x49, 0x06, 0x43, 0xd0, 0x3b, 0x38, 0x7a, 0xf8, 0xdd, 0xad,
	0xc4, 0xc4, 0x6d, 0xda, 0x90, 0xfd, 0xfb, 0x59, 0xb4, 0xa2, 0x2d, 0x8c, 0xc0, 0xfb, 0xc3, 0x8b,
	0x7a, 0xa1, 0x7e, 0x73, 0x00, 0xcd, 0xd5, 0x42, 0xd4, 0x6a, 0x92, 0x73, 0xec, 0x5f, 0xc7, 0x39,
	0x65, 0x97, 0x0b, 0xf0, 0xae, 0x96, 0x04, 0x38, 0xac, 0xcb, 0x6b, 0x04, 0xfb, 0xc7, 0x11, 0x42,
	0x83, 0xb9, 0x8a, 0x4c, 0xab, 0xb9, 0x22, 0xb4, 0x9a, 0x57, 0x43, 0x57, 0x33, 0x57, 0xb7, 0x6a,
	0x35, 0x57, 0x84, 0x56, 0xf3, 0x6a, 0x3a, 0xd5, 0xf0, 0xcd, 0x04, 0x9a, 0xc3, 0x37, 0x39, 0xe6,
	0xf0, 0x9b, 0x93, 0x3c, 0xfa, 0x77, 0x93, 0x39, 0xd6, 0x5d, 0xe6, 0x58, 0xbb, 0xcc, 0xb1, 0x1e,
	0x32, 0xc7, 0xba, 0xde, 0x3b, 0x9d, 0xdd, 0xde, 0xe9, 0xdc, 0xef, 0x9d, 0xce, 0xf9, 0x4f, 0xc6,
	0xd3, 0xc5, 0xca, 0x77, 0x67, 0x22, 0xc4, 0xff, 0x79, 0x42, 0xc6, 0x22, 0xa1, 0x58, 0xd2, 0x80,
	0x70, 0xbc, 0x29, 0x5f, 0xc6, 0x6d, 0x4c, 0xa5, 0xff, 0x26, 0x7f, 0xaa, 0xfe, 0x3e, 0x06, 0x00,
	0x00, 0xff, 0xff, 0x17, 0x2d, 0x69, 0xab, 0x35, 0x05, 0x00, 0x00,
}

func (this *MsgDisableBasketDeposits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketDeposits)
	if !ok {
		that2, ok := that.(MsgDisableBasketDeposits)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDisableBasketDepositsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketDepositsResponse)
	if !ok {
		that2, ok := that.(MsgDisableBasketDepositsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDisableBasketWithdraws) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketWithdraws)
	if !ok {
		that2, ok := that.(MsgDisableBasketWithdraws)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDisableBasketWithdrawsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketWithdrawsResponse)
	if !ok {
		that2, ok := that.(MsgDisableBasketWithdrawsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDisableBasketSwaps) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketSwaps)
	if !ok {
		that2, ok := that.(MsgDisableBasketSwaps)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgDisableBasketSwapsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgDisableBasketSwapsResponse)
	if !ok {
		that2, ok := that.(MsgDisableBasketSwapsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenMint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenMint)
	if !ok {
		that2, ok := that.(MsgBasketTokenMint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenMintResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenMintResponse)
	if !ok {
		that2, ok := that.(MsgBasketTokenMintResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenBurn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenBurn)
	if !ok {
		that2, ok := that.(MsgBasketTokenBurn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenBurnResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenBurnResponse)
	if !ok {
		that2, ok := that.(MsgBasketTokenBurnResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenSwap) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenSwap)
	if !ok {
		that2, ok := that.(MsgBasketTokenSwap)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketTokenSwapResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketTokenSwapResponse)
	if !ok {
		that2, ok := that.(MsgBasketTokenSwapResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketClaimRewards) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketClaimRewards)
	if !ok {
		that2, ok := that.(MsgBasketClaimRewards)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBasketClaimRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBasketClaimRewardsResponse)
	if !ok {
		that2, ok := that.(MsgBasketClaimRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// DisableBasketDeposits - emergency function & permission to disable one or all deposits of one or all token in the basket
	DisableBasketDeposits(ctx context.Context, in *MsgDisableBasketDeposits, opts ...grpc.CallOption) (*MsgDisableBasketDepositsResponse, error)
	// DisableBasketWithdraws - emergency function & permission to disable one or all withdrawals of one or all token in the basket
	DisableBasketWithdraws(ctx context.Context, in *MsgDisableBasketDeposits, opts ...grpc.CallOption) (*MsgDisableBasketDepositsResponse, error)
	// DisableBasketSwaps - emergency function & permission to disable one or all withdrawals of one or all token in the basket
	DisableBasketSwaps(ctx context.Context, in *MsgDisableBasketSwaps, opts ...grpc.CallOption) (*MsgDisableBasketSwapsResponse, error)
	// BasketTokenMint - to mint basket tokens
	BasketTokenMint(ctx context.Context, in *MsgBasketTokenMint, opts ...grpc.CallOption) (*MsgBasketTokenMintResponse, error)
	// BasketTokenBurn - to burn basket tokens and redeem underlying aggregate tokens
	BasketTokenBurn(ctx context.Context, in *MsgBasketTokenBurn, opts ...grpc.CallOption) (*MsgBasketTokenBurnResponse, error)
	// BasketTokenSwap - to swap one or many of the basket tokens for one or many others
	BasketTokenSwap(ctx context.Context, in *MsgBasketTokenSwap, opts ...grpc.CallOption) (*MsgBasketTokenSwapResponse, error)
	// BasketClaimRewards - to force staking derivative `SDB` basket to claim outstanding rewards of one all or many aggregate `V<ID>` tokens
	BasketClaimRewards(ctx context.Context, in *MsgBasketClaimRewards, opts ...grpc.CallOption) (*MsgBasketClaimRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) DisableBasketDeposits(ctx context.Context, in *MsgDisableBasketDeposits, opts ...grpc.CallOption) (*MsgDisableBasketDepositsResponse, error) {
	out := new(MsgDisableBasketDepositsResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/DisableBasketDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableBasketWithdraws(ctx context.Context, in *MsgDisableBasketDeposits, opts ...grpc.CallOption) (*MsgDisableBasketDepositsResponse, error) {
	out := new(MsgDisableBasketDepositsResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/DisableBasketWithdraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableBasketSwaps(ctx context.Context, in *MsgDisableBasketSwaps, opts ...grpc.CallOption) (*MsgDisableBasketSwapsResponse, error) {
	out := new(MsgDisableBasketSwapsResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/DisableBasketSwaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BasketTokenMint(ctx context.Context, in *MsgBasketTokenMint, opts ...grpc.CallOption) (*MsgBasketTokenMintResponse, error) {
	out := new(MsgBasketTokenMintResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/BasketTokenMint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BasketTokenBurn(ctx context.Context, in *MsgBasketTokenBurn, opts ...grpc.CallOption) (*MsgBasketTokenBurnResponse, error) {
	out := new(MsgBasketTokenBurnResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/BasketTokenBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BasketTokenSwap(ctx context.Context, in *MsgBasketTokenSwap, opts ...grpc.CallOption) (*MsgBasketTokenSwapResponse, error) {
	out := new(MsgBasketTokenSwapResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/BasketTokenSwap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BasketClaimRewards(ctx context.Context, in *MsgBasketClaimRewards, opts ...grpc.CallOption) (*MsgBasketClaimRewardsResponse, error) {
	out := new(MsgBasketClaimRewardsResponse)
	err := c.cc.Invoke(ctx, "/kira.basket.Msg/BasketClaimRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// DisableBasketDeposits - emergency function & permission to disable one or all deposits of one or all token in the basket
	DisableBasketDeposits(context.Context, *MsgDisableBasketDeposits) (*MsgDisableBasketDepositsResponse, error)
	// DisableBasketWithdraws - emergency function & permission to disable one or all withdrawals of one or all token in the basket
	DisableBasketWithdraws(context.Context, *MsgDisableBasketDeposits) (*MsgDisableBasketDepositsResponse, error)
	// DisableBasketSwaps - emergency function & permission to disable one or all withdrawals of one or all token in the basket
	DisableBasketSwaps(context.Context, *MsgDisableBasketSwaps) (*MsgDisableBasketSwapsResponse, error)
	// BasketTokenMint - to mint basket tokens
	BasketTokenMint(context.Context, *MsgBasketTokenMint) (*MsgBasketTokenMintResponse, error)
	// BasketTokenBurn - to burn basket tokens and redeem underlying aggregate tokens
	BasketTokenBurn(context.Context, *MsgBasketTokenBurn) (*MsgBasketTokenBurnResponse, error)
	// BasketTokenSwap - to swap one or many of the basket tokens for one or many others
	BasketTokenSwap(context.Context, *MsgBasketTokenSwap) (*MsgBasketTokenSwapResponse, error)
	// BasketClaimRewards - to force staking derivative `SDB` basket to claim outstanding rewards of one all or many aggregate `V<ID>` tokens
	BasketClaimRewards(context.Context, *MsgBasketClaimRewards) (*MsgBasketClaimRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) DisableBasketDeposits(ctx context.Context, req *MsgDisableBasketDeposits) (*MsgDisableBasketDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBasketDeposits not implemented")
}
func (*UnimplementedMsgServer) DisableBasketWithdraws(ctx context.Context, req *MsgDisableBasketDeposits) (*MsgDisableBasketDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBasketWithdraws not implemented")
}
func (*UnimplementedMsgServer) DisableBasketSwaps(ctx context.Context, req *MsgDisableBasketSwaps) (*MsgDisableBasketSwapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableBasketSwaps not implemented")
}
func (*UnimplementedMsgServer) BasketTokenMint(ctx context.Context, req *MsgBasketTokenMint) (*MsgBasketTokenMintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasketTokenMint not implemented")
}
func (*UnimplementedMsgServer) BasketTokenBurn(ctx context.Context, req *MsgBasketTokenBurn) (*MsgBasketTokenBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasketTokenBurn not implemented")
}
func (*UnimplementedMsgServer) BasketTokenSwap(ctx context.Context, req *MsgBasketTokenSwap) (*MsgBasketTokenSwapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasketTokenSwap not implemented")
}
func (*UnimplementedMsgServer) BasketClaimRewards(ctx context.Context, req *MsgBasketClaimRewards) (*MsgBasketClaimRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BasketClaimRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_DisableBasketDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableBasketDeposits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableBasketDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/DisableBasketDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableBasketDeposits(ctx, req.(*MsgDisableBasketDeposits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableBasketWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableBasketDeposits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableBasketWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/DisableBasketWithdraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableBasketWithdraws(ctx, req.(*MsgDisableBasketDeposits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableBasketSwaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableBasketSwaps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableBasketSwaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/DisableBasketSwaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableBasketSwaps(ctx, req.(*MsgDisableBasketSwaps))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BasketTokenMint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBasketTokenMint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BasketTokenMint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/BasketTokenMint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BasketTokenMint(ctx, req.(*MsgBasketTokenMint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BasketTokenBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBasketTokenBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BasketTokenBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/BasketTokenBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BasketTokenBurn(ctx, req.(*MsgBasketTokenBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BasketTokenSwap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBasketTokenSwap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BasketTokenSwap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/BasketTokenSwap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BasketTokenSwap(ctx, req.(*MsgBasketTokenSwap))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BasketClaimRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBasketClaimRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BasketClaimRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.basket.Msg/BasketClaimRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BasketClaimRewards(ctx, req.(*MsgBasketClaimRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.basket.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DisableBasketDeposits",
			Handler:    _Msg_DisableBasketDeposits_Handler,
		},
		{
			MethodName: "DisableBasketWithdraws",
			Handler:    _Msg_DisableBasketWithdraws_Handler,
		},
		{
			MethodName: "DisableBasketSwaps",
			Handler:    _Msg_DisableBasketSwaps_Handler,
		},
		{
			MethodName: "BasketTokenMint",
			Handler:    _Msg_BasketTokenMint_Handler,
		},
		{
			MethodName: "BasketTokenBurn",
			Handler:    _Msg_BasketTokenBurn_Handler,
		},
		{
			MethodName: "BasketTokenSwap",
			Handler:    _Msg_BasketTokenSwap_Handler,
		},
		{
			MethodName: "BasketClaimRewards",
			Handler:    _Msg_BasketClaimRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/basket/tx.proto",
}

func (m *MsgDisableBasketDeposits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketDeposits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketDeposits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableBasketDepositsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketDepositsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketDepositsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableBasketWithdraws) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketWithdraws) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketWithdraws) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableBasketWithdrawsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketWithdrawsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketWithdrawsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableBasketSwaps) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketSwaps) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketSwaps) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableBasketSwapsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableBasketSwapsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableBasketSwapsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenMint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenMint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenMint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenMintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenMintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenMintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketTokenSwapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketTokenSwapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketTokenSwapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketClaimRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketClaimRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketClaimRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBasketClaimRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBasketClaimRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBasketClaimRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgDisableBasketDeposits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableBasketDepositsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableBasketWithdraws) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableBasketWithdrawsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableBasketSwaps) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableBasketSwapsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenMint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenMintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketTokenSwapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketClaimRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBasketClaimRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgDisableBasketDeposits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketDeposits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketDeposits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableBasketDepositsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketDepositsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketDepositsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableBasketWithdraws) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketWithdraws: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketWithdraws: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableBasketWithdrawsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketWithdrawsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketWithdrawsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableBasketSwaps) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketSwaps: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketSwaps: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableBasketSwapsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableBasketSwapsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableBasketSwapsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenMint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenMint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenMint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenMintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenMintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenMintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketTokenSwapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketTokenSwapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketTokenSwapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketClaimRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketClaimRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketClaimRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBasketClaimRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBasketClaimRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBasketClaimRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
