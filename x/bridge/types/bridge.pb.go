// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/bridge/bridge.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChangeCosmosEthereumRecord struct {
	From   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=from,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"from,omitempty" yaml:"address"`
	To     string                                        `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Hash   string                                        `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *ChangeCosmosEthereumRecord) Reset()         { *m = ChangeCosmosEthereumRecord{} }
func (m *ChangeCosmosEthereumRecord) String() string { return proto.CompactTextString(m) }
func (*ChangeCosmosEthereumRecord) ProtoMessage()    {}
func (*ChangeCosmosEthereumRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b359d394e693f719, []int{0}
}
func (m *ChangeCosmosEthereumRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeCosmosEthereumRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeCosmosEthereumRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeCosmosEthereumRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeCosmosEthereumRecord.Merge(m, src)
}
func (m *ChangeCosmosEthereumRecord) XXX_Size() int {
	return m.Size()
}
func (m *ChangeCosmosEthereumRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeCosmosEthereumRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeCosmosEthereumRecord proto.InternalMessageInfo

func (m *ChangeCosmosEthereumRecord) GetFrom() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ChangeCosmosEthereumRecord) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChangeCosmosEthereumRecord) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *ChangeCosmosEthereumRecord) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type ChangeEthereumCosmosRecord struct {
	Addr   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=addr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"addr,omitempty" yaml:"address"`
	From   string                                        `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=to,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"to,omitempty" yaml:"address"`
	Amount github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,4,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *ChangeEthereumCosmosRecord) Reset()         { *m = ChangeEthereumCosmosRecord{} }
func (m *ChangeEthereumCosmosRecord) String() string { return proto.CompactTextString(m) }
func (*ChangeEthereumCosmosRecord) ProtoMessage()    {}
func (*ChangeEthereumCosmosRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b359d394e693f719, []int{1}
}
func (m *ChangeEthereumCosmosRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChangeEthereumCosmosRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChangeEthereumCosmosRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChangeEthereumCosmosRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeEthereumCosmosRecord.Merge(m, src)
}
func (m *ChangeEthereumCosmosRecord) XXX_Size() int {
	return m.Size()
}
func (m *ChangeEthereumCosmosRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeEthereumCosmosRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeEthereumCosmosRecord proto.InternalMessageInfo

func (m *ChangeEthereumCosmosRecord) GetAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *ChangeEthereumCosmosRecord) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChangeEthereumCosmosRecord) GetTo() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ChangeEthereumCosmosRecord) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func init() {
	proto.RegisterType((*ChangeCosmosEthereumRecord)(nil), "kira.bridge.ChangeCosmosEthereumRecord")
	proto.RegisterType((*ChangeEthereumCosmosRecord)(nil), "kira.bridge.ChangeEthereumCosmosRecord")
}

func init() { proto.RegisterFile("kira/bridge/bridge.proto", fileDescriptor_b359d394e693f719) }

var fileDescriptor_b359d394e693f719 = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0xbf, 0x6e, 0xa3, 0x40,
	0x10, 0xc6, 0x01, 0x5b, 0x96, 0x0e, 0x9f, 0x5c, 0xa0, 0x2b, 0xb0, 0x0b, 0xb0, 0xa8, 0x68, 0xbc,
	0x7b, 0xbe, 0xeb, 0xae, 0x33, 0xe8, 0xaa, 0xeb, 0xb8, 0xe2, 0xa4, 0xeb, 0x16, 0x58, 0x03, 0xb2,
	0x61, 0xac, 0xdd, 0x25, 0x8a, 0xdf, 0x22, 0xcf, 0x91, 0xd7, 0x48, 0xe3, 0xd2, 0x65, 0x2a, 0x27,
	0xb2, 0xdf, 0x20, 0x65, 0x8a, 0x28, 0xda, 0x5d, 0xac, 0xa4, 0x4c, 0x61, 0xa5, 0xda, 0x61, 0xfe,
	0x7c, 0xc3, 0xf7, 0xd3, 0xd8, 0xee, 0xaa, 0x62, 0x04, 0xa7, 0xac, 0xca, 0x0b, 0xda, 0x3d, 0x68,
	0xc3, 0x40, 0x80, 0x33, 0x94, 0x15, 0xa4, 0x53, 0x93, 0x6f, 0x05, 0x14, 0xa0, 0xf2, 0x58, 0x46,
	0xba, 0x65, 0x32, 0x2e, 0x00, 0x8a, 0x35, 0xc5, 0xea, 0x2b, 0x6d, 0x97, 0x98, 0x34, 0xdb, 0xae,
	0xe4, 0x65, 0xc0, 0x6b, 0xe0, 0x38, 0x25, 0x9c, 0xe2, 0xab, 0x79, 0x4a, 0x05, 0x99, 0xe3, 0x0c,
	0xaa, 0x46, 0xd7, 0x83, 0x17, 0xd3, 0x9e, 0xc4, 0x25, 0x69, 0x0a, 0x1a, 0xab, 0xc6, 0xdf, 0xa2,
	0xa4, 0x8c, 0xb6, 0x75, 0x42, 0x33, 0x60, 0xb9, 0xf3, 0xcf, 0xee, 0x2f, 0x19, 0xd4, 0xae, 0x39,
	0x35, 0xc3, 0xaf, 0x51, 0xfc, 0x74, 0xf0, 0x47, 0x5b, 0x52, 0xaf, 0x7f, 0x05, 0x24, 0xcf, 0x19,
	0xe5, 0x3c, 0x78, 0x3e, 0xf8, 0xb3, 0xa2, 0x12, 0x65, 0x9b, 0xa2, 0x0c, 0x6a, 0xdc, 0x6d, 0xd3,
	0xcf, 0x8c, 0xe7, 0x2b, 0x2c, 0xb6, 0x1b, 0xca, 0xd1, 0x22, 0xcb, 0x16, 0x7a, 0x22, 0x51, 0x82,
	0xce, 0xc8, 0xb6, 0x04, 0xb8, 0xd6, 0xd4, 0x0c, 0xbf, 0x24, 0x96, 0x00, 0xc7, 0xb1, 0xfb, 0x25,
	0xe1, 0xa5, 0xdb, 0x53, 0x19, 0x15, 0x3b, 0x99, 0x3d, 0x20, 0x35, 0xb4, 0x8d, 0x70, 0xfb, 0xd3,
	0x5e, 0x38, 0xfc, 0x31, 0x46, 0x5a, 0x17, 0x49, 0x33, 0xa8, 0x33, 0x83, 0x62, 0xa8, 0x9a, 0xe8,
	0xfb, 0xee, 0xe0, 0x1b, 0xb7, 0x0f, 0x7e, 0xf8, 0x81, 0x7f, 0x91, 0x03, 0x3c, 0xe9, 0xa4, 0x83,
	0x3b, 0xeb, 0x0c, 0xe0, 0x6c, 0x5d, 0x83, 0x78, 0x03, 0x20, 0xad, 0x5e, 0x14, 0x80, 0x1c, 0x95,
	0x86, 0x15, 0x59, 0x8d, 0x40, 0x43, 0xf9, 0xab, 0xa0, 0xf4, 0x2e, 0xb7, 0x4a, 0x92, 0xfd, 0x0c,
	0x8a, 0x51, 0xb4, 0x3b, 0x7a, 0xe6, 0xfe, 0xe8, 0x99, 0x8f, 0x47, 0xcf, 0xbc, 0x39, 0x79, 0xc6,
	0xfe, 0xe4, 0x19, 0xf7, 0x27, 0xcf, 0xf8, 0xff, 0x5e, 0xeb, 0x4f, 0xc5, 0x48, 0x0c, 0x8c, 0x62,
	0x4e, 0x57, 0xa4, 0xc2, 0xd7, 0xe7, 0x7b, 0x57, 0x8a, 0xe9, 0x40, 0x5d, 0xe4, 0xcf, 0xd7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x53, 0x30, 0x79, 0xb7, 0x0b, 0x03, 0x00, 0x00,
}

func (m *ChangeCosmosEthereumRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeCosmosEthereumRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeCosmosEthereumRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChangeEthereumCosmosRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeEthereumCosmosRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChangeEthereumCosmosRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChangeCosmosEthereumRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	return n
}

func (m *ChangeEthereumCosmosRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	return n
}

func sovBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridge(x uint64) (n int) {
	return sovBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChangeCosmosEthereumRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeCosmosEthereumRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeCosmosEthereumRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeEthereumCosmosRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeEthereumCosmosRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeEthereumCosmosRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridge = fmt.Errorf("proto: unexpected end of group")
)
