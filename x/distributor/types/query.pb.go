// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/distributor/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryFeesTreasuryRequest struct {
}

func (m *QueryFeesTreasuryRequest) Reset()         { *m = QueryFeesTreasuryRequest{} }
func (m *QueryFeesTreasuryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeesTreasuryRequest) ProtoMessage()    {}
func (*QueryFeesTreasuryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{0}
}
func (m *QueryFeesTreasuryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesTreasuryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesTreasuryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeesTreasuryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesTreasuryRequest.Merge(m, src)
}
func (m *QueryFeesTreasuryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesTreasuryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesTreasuryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesTreasuryRequest proto.InternalMessageInfo

type QueryFeesTreasuryResponse struct {
	Coins []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=coins,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coins"`
}

func (m *QueryFeesTreasuryResponse) Reset()         { *m = QueryFeesTreasuryResponse{} }
func (m *QueryFeesTreasuryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeesTreasuryResponse) ProtoMessage()    {}
func (*QueryFeesTreasuryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{1}
}
func (m *QueryFeesTreasuryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesTreasuryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesTreasuryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeesTreasuryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesTreasuryResponse.Merge(m, src)
}
func (m *QueryFeesTreasuryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesTreasuryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesTreasuryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesTreasuryResponse proto.InternalMessageInfo

type QueryFeesCollectedRequest struct {
}

func (m *QueryFeesCollectedRequest) Reset()         { *m = QueryFeesCollectedRequest{} }
func (m *QueryFeesCollectedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFeesCollectedRequest) ProtoMessage()    {}
func (*QueryFeesCollectedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{2}
}
func (m *QueryFeesCollectedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesCollectedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesCollectedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeesCollectedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesCollectedRequest.Merge(m, src)
}
func (m *QueryFeesCollectedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesCollectedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesCollectedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesCollectedRequest proto.InternalMessageInfo

type QueryFeesCollectedResponse struct {
	Coins []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,1,rep,name=coins,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"coins"`
}

func (m *QueryFeesCollectedResponse) Reset()         { *m = QueryFeesCollectedResponse{} }
func (m *QueryFeesCollectedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFeesCollectedResponse) ProtoMessage()    {}
func (*QueryFeesCollectedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{3}
}
func (m *QueryFeesCollectedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFeesCollectedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFeesCollectedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFeesCollectedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFeesCollectedResponse.Merge(m, src)
}
func (m *QueryFeesCollectedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFeesCollectedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFeesCollectedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFeesCollectedResponse proto.InternalMessageInfo

type QuerySnapshotPeriodRequest struct {
}

func (m *QuerySnapshotPeriodRequest) Reset()         { *m = QuerySnapshotPeriodRequest{} }
func (m *QuerySnapshotPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPeriodRequest) ProtoMessage()    {}
func (*QuerySnapshotPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{4}
}
func (m *QuerySnapshotPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPeriodRequest.Merge(m, src)
}
func (m *QuerySnapshotPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPeriodRequest proto.InternalMessageInfo

type QuerySnapshotPeriodResponse struct {
	SnapshotPeriod int64 `protobuf:"varint,1,opt,name=snapshot_period,json=snapshotPeriod,proto3" json:"snapshot_period,omitempty"`
}

func (m *QuerySnapshotPeriodResponse) Reset()         { *m = QuerySnapshotPeriodResponse{} }
func (m *QuerySnapshotPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPeriodResponse) ProtoMessage()    {}
func (*QuerySnapshotPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{5}
}
func (m *QuerySnapshotPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPeriodResponse.Merge(m, src)
}
func (m *QuerySnapshotPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPeriodResponse proto.InternalMessageInfo

func (m *QuerySnapshotPeriodResponse) GetSnapshotPeriod() int64 {
	if m != nil {
		return m.SnapshotPeriod
	}
	return 0
}

type QuerySnapshotPeriodPerformanceRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
}

func (m *QuerySnapshotPeriodPerformanceRequest) Reset()         { *m = QuerySnapshotPeriodPerformanceRequest{} }
func (m *QuerySnapshotPeriodPerformanceRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPeriodPerformanceRequest) ProtoMessage()    {}
func (*QuerySnapshotPeriodPerformanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{6}
}
func (m *QuerySnapshotPeriodPerformanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPeriodPerformanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPeriodPerformanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPeriodPerformanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPeriodPerformanceRequest.Merge(m, src)
}
func (m *QuerySnapshotPeriodPerformanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPeriodPerformanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPeriodPerformanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPeriodPerformanceRequest proto.InternalMessageInfo

func (m *QuerySnapshotPeriodPerformanceRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QuerySnapshotPeriodPerformanceResponse struct {
	Performance    int64 `protobuf:"varint,1,opt,name=performance,proto3" json:"performance,omitempty"`
	SnapshotPeriod int64 `protobuf:"varint,2,opt,name=snapshot_period,json=snapshotPeriod,proto3" json:"snapshot_period,omitempty"`
}

func (m *QuerySnapshotPeriodPerformanceResponse) Reset() {
	*m = QuerySnapshotPeriodPerformanceResponse{}
}
func (m *QuerySnapshotPeriodPerformanceResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySnapshotPeriodPerformanceResponse) ProtoMessage()    {}
func (*QuerySnapshotPeriodPerformanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d334d1f8d9e2298, []int{7}
}
func (m *QuerySnapshotPeriodPerformanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySnapshotPeriodPerformanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySnapshotPeriodPerformanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySnapshotPeriodPerformanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySnapshotPeriodPerformanceResponse.Merge(m, src)
}
func (m *QuerySnapshotPeriodPerformanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySnapshotPeriodPerformanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySnapshotPeriodPerformanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySnapshotPeriodPerformanceResponse proto.InternalMessageInfo

func (m *QuerySnapshotPeriodPerformanceResponse) GetPerformance() int64 {
	if m != nil {
		return m.Performance
	}
	return 0
}

func (m *QuerySnapshotPeriodPerformanceResponse) GetSnapshotPeriod() int64 {
	if m != nil {
		return m.SnapshotPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryFeesTreasuryRequest)(nil), "kira.distributor.QueryFeesTreasuryRequest")
	proto.RegisterType((*QueryFeesTreasuryResponse)(nil), "kira.distributor.QueryFeesTreasuryResponse")
	proto.RegisterType((*QueryFeesCollectedRequest)(nil), "kira.distributor.QueryFeesCollectedRequest")
	proto.RegisterType((*QueryFeesCollectedResponse)(nil), "kira.distributor.QueryFeesCollectedResponse")
	proto.RegisterType((*QuerySnapshotPeriodRequest)(nil), "kira.distributor.QuerySnapshotPeriodRequest")
	proto.RegisterType((*QuerySnapshotPeriodResponse)(nil), "kira.distributor.QuerySnapshotPeriodResponse")
	proto.RegisterType((*QuerySnapshotPeriodPerformanceRequest)(nil), "kira.distributor.QuerySnapshotPeriodPerformanceRequest")
	proto.RegisterType((*QuerySnapshotPeriodPerformanceResponse)(nil), "kira.distributor.QuerySnapshotPeriodPerformanceResponse")
}

func init() { proto.RegisterFile("kira/distributor/query.proto", fileDescriptor_4d334d1f8d9e2298) }

var fileDescriptor_4d334d1f8d9e2298 = []byte{
	// 576 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x41, 0x6f, 0xd3, 0x3e,
	0x18, 0xc6, 0x9b, 0x4d, 0xfb, 0x4b, 0xf3, 0x1f, 0xc6, 0xb0, 0x38, 0xac, 0x59, 0x95, 0x55, 0x91,
	0xa0, 0x5d, 0x4b, 0x63, 0x0a, 0x07, 0xb8, 0xb2, 0x8a, 0x21, 0xb4, 0xcb, 0x56, 0x76, 0xe2, 0x52,
	0x39, 0x89, 0x9b, 0x59, 0x6d, 0xe3, 0xcc, 0x76, 0x26, 0x2a, 0xc4, 0x85, 0x4f, 0x80, 0xc4, 0x85,
	0x03, 0x07, 0x3e, 0x4e, 0x8f, 0x93, 0xb8, 0x20, 0x0e, 0x13, 0xb4, 0x7c, 0x10, 0x54, 0xc7, 0x2d,
	0x69, 0x9b, 0xb2, 0x22, 0x71, 0x6a, 0xea, 0xc7, 0xef, 0xfb, 0xfc, 0x5e, 0xf9, 0xb1, 0x41, 0xa1,
	0x43, 0x39, 0x46, 0x3e, 0x15, 0x92, 0x53, 0x37, 0x96, 0x8c, 0xa3, 0xf3, 0x98, 0xf0, 0xbe, 0x13,
	0x71, 0x26, 0x19, 0xdc, 0x1e, 0xab, 0x4e, 0x4a, 0x35, 0x2b, 0x1e, 0x13, 0x3d, 0x26, 0x90, 0x8b,
	0x05, 0x49, 0xb6, 0xa2, 0x8b, 0xba, 0x4b, 0x24, 0xae, 0xa3, 0x08, 0x07, 0x34, 0xc4, 0x92, 0xb2,
	0x30, 0xa9, 0x36, 0xef, 0x04, 0x2c, 0x60, 0xea, 0x13, 0x8d, 0xbf, 0xf4, 0x6a, 0x3e, 0x60, 0x2c,
	0xe8, 0x12, 0xa4, 0xfe, 0xb9, 0x71, 0x1b, 0xe1, 0x50, 0xdb, 0x99, 0x05, 0x2d, 0xe1, 0x88, 0x22,
	0x1c, 0x86, 0x4c, 0xaa, 0x6e, 0x22, 0x51, 0x6d, 0x13, 0xec, 0x9c, 0x8c, 0x0d, 0x0f, 0x09, 0x11,
	0xa7, 0x9c, 0x60, 0x11, 0xf3, 0x7e, 0x93, 0x9c, 0xc7, 0x44, 0x48, 0xdb, 0x05, 0xf9, 0x0c, 0x4d,
	0x44, 0x2c, 0x14, 0x04, 0x3e, 0x03, 0x1b, 0x1e, 0xa3, 0xa1, 0xd8, 0x31, 0x8a, 0xeb, 0xe5, 0xcd,
	0x03, 0x34, 0xb8, 0xda, 0xcb, 0x7d, 0xbb, 0xda, 0x2b, 0x05, 0x54, 0x9e, 0xc5, 0xae, 0xe3, 0xb1,
	0x1e, 0xd2, 0x53, 0x25, 0x3f, 0x35, 0xe1, 0x77, 0x90, 0xec, 0x47, 0x44, 0x38, 0x0d, 0x46, 0xc3,
	0x66, 0x52, 0x6d, 0xef, 0xa6, 0x3c, 0x1a, 0xac, 0xdb, 0x25, 0x9e, 0x24, 0xfe, 0x04, 0xc0, 0x03,
	0x66, 0x96, 0xf8, 0x6f, 0x09, 0x0a, 0xda, 0xe4, 0x65, 0x88, 0x23, 0x71, 0xc6, 0xe4, 0x31, 0xe1,
	0x94, 0x4d, 0x11, 0x0e, 0xc1, 0x6e, 0xa6, 0xaa, 0x19, 0x4a, 0xe0, 0x96, 0xd0, 0x4a, 0x2b, 0x52,
	0xd2, 0x8e, 0x51, 0x34, 0xca, 0xeb, 0xcd, 0x2d, 0x31, 0x53, 0x60, 0x9f, 0x82, 0xbb, 0x19, 0x7d,
	0x8e, 0x09, 0x6f, 0x33, 0xde, 0xc3, 0xa1, 0x47, 0xb4, 0x21, 0xac, 0x82, 0xdb, 0x17, 0xb8, 0x4b,
	0x7d, 0x2c, 0x19, 0x6f, 0x61, 0xdf, 0xe7, 0x44, 0x08, 0xd5, 0x73, 0xb3, 0xb9, 0x3d, 0x15, 0x9e,
	0x26, 0xeb, 0xb6, 0x00, 0xf7, 0xae, 0xeb, 0xaa, 0x41, 0x8b, 0xe0, 0xff, 0xe8, 0xf7, 0xb2, 0x86,
	0x4c, 0x2f, 0x65, 0x8d, 0xb2, 0x96, 0x35, 0xca, 0xc3, 0xc1, 0x06, 0xd8, 0x50, 0xae, 0xf0, 0xa3,
	0x01, 0x6e, 0xa4, 0xc3, 0x01, 0x2b, 0xce, 0x7c, 0xb6, 0x9d, 0x65, 0xe9, 0x32, 0xab, 0x2b, 0xed,
	0x4d, 0xf0, 0x6d, 0xf4, 0xee, 0xcb, 0xcf, 0x0f, 0x6b, 0xfb, 0xb0, 0x84, 0x16, 0xae, 0xd6, 0xe4,
	0xa6, 0xb4, 0x09, 0x11, 0x2d, 0x39, 0x21, 0xf9, 0x64, 0x80, 0x9b, 0x33, 0xb1, 0x81, 0x7f, 0xf2,
	0x9b, 0x4f, 0x9e, 0x79, 0x7f, 0xb5, 0xcd, 0x9a, 0xee, 0x81, 0xa2, 0xab, 0xc0, 0xf2, 0x35, 0x74,
	0xde, 0x14, 0xe6, 0xb3, 0x01, 0xb6, 0x66, 0x0f, 0x0d, 0x2e, 0xb3, 0xcc, 0xcc, 0xa5, 0x59, 0x5b,
	0x71, 0xb7, 0x26, 0xac, 0x2b, 0xc2, 0x2a, 0xdc, 0x5f, 0x4e, 0x38, 0x77, 0xf8, 0xf0, 0x87, 0x01,
	0xf2, 0x4b, 0x73, 0x05, 0x1f, 0xaf, 0xe4, 0xbf, 0x98, 0x6f, 0xf3, 0xc9, 0xdf, 0x17, 0xea, 0x19,
	0x4e, 0xd4, 0x0c, 0x47, 0xf0, 0xc5, 0xca, 0x33, 0xb4, 0x52, 0xf9, 0x46, 0x6f, 0x16, 0xae, 0xd5,
	0xdb, 0x83, 0xe7, 0x83, 0xa1, 0x65, 0x5c, 0x0e, 0x2d, 0xe3, 0xfb, 0xd0, 0x32, 0xde, 0x8f, 0xac,
	0xdc, 0xe5, 0xc8, 0xca, 0x7d, 0x1d, 0x59, 0xb9, 0x57, 0xb5, 0xd4, 0x2b, 0x72, 0x44, 0x39, 0x6e,
	0x30, 0x4e, 0x90, 0x20, 0x1d, 0x4c, 0xd1, 0xeb, 0x19, 0x6b, 0xf5, 0xa0, 0xb8, 0xff, 0xa9, 0xd7,
	0xf4, 0xd1, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x41, 0x40, 0x77, 0xfa, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// FeesTreasury queries fee treasury
	FeesTreasury(ctx context.Context, in *QueryFeesTreasuryRequest, opts ...grpc.CallOption) (*QueryFeesTreasuryResponse, error)
	// FeesCollected queries fees collected from genesis
	FeesCollected(ctx context.Context, in *QueryFeesCollectedRequest, opts ...grpc.CallOption) (*QueryFeesCollectedResponse, error)
	// SnapshotPeriod queries number of blocks considered for reward calculation
	SnapshotPeriod(ctx context.Context, in *QuerySnapshotPeriodRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodResponse, error)
	// SnapPeriodPerformance queries number of blocks signed during the snap period
	SnapshotPeriodPerformance(ctx context.Context, in *QuerySnapshotPeriodPerformanceRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodPerformanceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) FeesTreasury(ctx context.Context, in *QueryFeesTreasuryRequest, opts ...grpc.CallOption) (*QueryFeesTreasuryResponse, error) {
	out := new(QueryFeesTreasuryResponse)
	err := c.cc.Invoke(ctx, "/kira.distributor.Query/FeesTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FeesCollected(ctx context.Context, in *QueryFeesCollectedRequest, opts ...grpc.CallOption) (*QueryFeesCollectedResponse, error) {
	out := new(QueryFeesCollectedResponse)
	err := c.cc.Invoke(ctx, "/kira.distributor.Query/FeesCollected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SnapshotPeriod(ctx context.Context, in *QuerySnapshotPeriodRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodResponse, error) {
	out := new(QuerySnapshotPeriodResponse)
	err := c.cc.Invoke(ctx, "/kira.distributor.Query/SnapshotPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SnapshotPeriodPerformance(ctx context.Context, in *QuerySnapshotPeriodPerformanceRequest, opts ...grpc.CallOption) (*QuerySnapshotPeriodPerformanceResponse, error) {
	out := new(QuerySnapshotPeriodPerformanceResponse)
	err := c.cc.Invoke(ctx, "/kira.distributor.Query/SnapshotPeriodPerformance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// FeesTreasury queries fee treasury
	FeesTreasury(context.Context, *QueryFeesTreasuryRequest) (*QueryFeesTreasuryResponse, error)
	// FeesCollected queries fees collected from genesis
	FeesCollected(context.Context, *QueryFeesCollectedRequest) (*QueryFeesCollectedResponse, error)
	// SnapshotPeriod queries number of blocks considered for reward calculation
	SnapshotPeriod(context.Context, *QuerySnapshotPeriodRequest) (*QuerySnapshotPeriodResponse, error)
	// SnapPeriodPerformance queries number of blocks signed during the snap period
	SnapshotPeriodPerformance(context.Context, *QuerySnapshotPeriodPerformanceRequest) (*QuerySnapshotPeriodPerformanceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) FeesTreasury(ctx context.Context, req *QueryFeesTreasuryRequest) (*QueryFeesTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesTreasury not implemented")
}
func (*UnimplementedQueryServer) FeesCollected(ctx context.Context, req *QueryFeesCollectedRequest) (*QueryFeesCollectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FeesCollected not implemented")
}
func (*UnimplementedQueryServer) SnapshotPeriod(ctx context.Context, req *QuerySnapshotPeriodRequest) (*QuerySnapshotPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPeriod not implemented")
}
func (*UnimplementedQueryServer) SnapshotPeriodPerformance(ctx context.Context, req *QuerySnapshotPeriodPerformanceRequest) (*QuerySnapshotPeriodPerformanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SnapshotPeriodPerformance not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_FeesTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeesTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.distributor.Query/FeesTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesTreasury(ctx, req.(*QueryFeesTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FeesCollected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFeesCollectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FeesCollected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.distributor.Query/FeesCollected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FeesCollected(ctx, req.(*QueryFeesCollectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SnapshotPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SnapshotPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.distributor.Query/SnapshotPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SnapshotPeriod(ctx, req.(*QuerySnapshotPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SnapshotPeriodPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySnapshotPeriodPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SnapshotPeriodPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.distributor.Query/SnapshotPeriodPerformance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SnapshotPeriodPerformance(ctx, req.(*QuerySnapshotPeriodPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.distributor.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FeesTreasury",
			Handler:    _Query_FeesTreasury_Handler,
		},
		{
			MethodName: "FeesCollected",
			Handler:    _Query_FeesCollected_Handler,
		},
		{
			MethodName: "SnapshotPeriod",
			Handler:    _Query_SnapshotPeriod_Handler,
		},
		{
			MethodName: "SnapshotPeriodPerformance",
			Handler:    _Query_SnapshotPeriodPerformance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/distributor/query.proto",
}

func (m *QueryFeesTreasuryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeesTreasuryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeesTreasuryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeesTreasuryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeesTreasuryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeesTreasuryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Coins[iNdEx].Size()
				i -= size
				if _, err := m.Coins[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFeesCollectedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeesCollectedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeesCollectedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFeesCollectedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFeesCollectedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFeesCollectedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Coins[iNdEx].Size()
				i -= size
				if _, err := m.Coins[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnapshotPeriod != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SnapshotPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPeriodPerformanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPeriodPerformanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPeriodPerformanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySnapshotPeriodPerformanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySnapshotPeriodPerformanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySnapshotPeriodPerformanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SnapshotPeriod != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SnapshotPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.Performance != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Performance))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryFeesTreasuryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeesTreasuryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFeesCollectedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFeesCollectedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QuerySnapshotPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySnapshotPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SnapshotPeriod != 0 {
		n += 1 + sovQuery(uint64(m.SnapshotPeriod))
	}
	return n
}

func (m *QuerySnapshotPeriodPerformanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySnapshotPeriodPerformanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Performance != 0 {
		n += 1 + sovQuery(uint64(m.Performance))
	}
	if m.SnapshotPeriod != 0 {
		n += 1 + sovQuery(uint64(m.SnapshotPeriod))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryFeesTreasuryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeesTreasuryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesTreasuryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeesTreasuryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeesTreasuryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesTreasuryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Coins = append(m.Coins, v)
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeesCollectedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeesCollectedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesCollectedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFeesCollectedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFeesCollectedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFeesCollectedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Coins = append(m.Coins, v)
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPeriod", wireType)
			}
			m.SnapshotPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPeriodPerformanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPeriodPerformanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPeriodPerformanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySnapshotPeriodPerformanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySnapshotPeriodPerformanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySnapshotPeriodPerformanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Performance", wireType)
			}
			m.Performance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Performance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotPeriod", wireType)
			}
			m.SnapshotPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SnapshotPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
