// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/recovery/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterRecoverySecret struct {
	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Challenge string `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
	Nonce     string `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Proof     string `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgRegisterRecoverySecret) Reset()         { *m = MsgRegisterRecoverySecret{} }
func (m *MsgRegisterRecoverySecret) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterRecoverySecret) ProtoMessage()    {}
func (*MsgRegisterRecoverySecret) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{0}
}
func (m *MsgRegisterRecoverySecret) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterRecoverySecret) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterRecoverySecret.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterRecoverySecret) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterRecoverySecret.Merge(m, src)
}
func (m *MsgRegisterRecoverySecret) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterRecoverySecret) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterRecoverySecret.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterRecoverySecret proto.InternalMessageInfo

func (m *MsgRegisterRecoverySecret) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRegisterRecoverySecret) GetChallenge() string {
	if m != nil {
		return m.Challenge
	}
	return ""
}

func (m *MsgRegisterRecoverySecret) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *MsgRegisterRecoverySecret) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type MsgRegisterRecoverySecretResponse struct {
}

func (m *MsgRegisterRecoverySecretResponse) Reset()         { *m = MsgRegisterRecoverySecretResponse{} }
func (m *MsgRegisterRecoverySecretResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterRecoverySecretResponse) ProtoMessage()    {}
func (*MsgRegisterRecoverySecretResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{1}
}
func (m *MsgRegisterRecoverySecretResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterRecoverySecretResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterRecoverySecretResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterRecoverySecretResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterRecoverySecretResponse.Merge(m, src)
}
func (m *MsgRegisterRecoverySecretResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterRecoverySecretResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterRecoverySecretResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterRecoverySecretResponse proto.InternalMessageInfo

type MsgRotateRecoveryAddress struct {
	FeePayer string `protobuf:"bytes,1,opt,name=fee_payer,json=feePayer,proto3" json:"fee_payer,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Recovery string `protobuf:"bytes,3,opt,name=recovery,proto3" json:"recovery,omitempty"`
	Proof    string `protobuf:"bytes,4,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgRotateRecoveryAddress) Reset()         { *m = MsgRotateRecoveryAddress{} }
func (m *MsgRotateRecoveryAddress) String() string { return proto.CompactTextString(m) }
func (*MsgRotateRecoveryAddress) ProtoMessage()    {}
func (*MsgRotateRecoveryAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{2}
}
func (m *MsgRotateRecoveryAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRotateRecoveryAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRotateRecoveryAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRotateRecoveryAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRotateRecoveryAddress.Merge(m, src)
}
func (m *MsgRotateRecoveryAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgRotateRecoveryAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRotateRecoveryAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRotateRecoveryAddress proto.InternalMessageInfo

func (m *MsgRotateRecoveryAddress) GetFeePayer() string {
	if m != nil {
		return m.FeePayer
	}
	return ""
}

func (m *MsgRotateRecoveryAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRotateRecoveryAddress) GetRecovery() string {
	if m != nil {
		return m.Recovery
	}
	return ""
}

func (m *MsgRotateRecoveryAddress) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

type MsgRotateRecoveryAddressResponse struct {
}

func (m *MsgRotateRecoveryAddressResponse) Reset()         { *m = MsgRotateRecoveryAddressResponse{} }
func (m *MsgRotateRecoveryAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRotateRecoveryAddressResponse) ProtoMessage()    {}
func (*MsgRotateRecoveryAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{3}
}
func (m *MsgRotateRecoveryAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRotateRecoveryAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRotateRecoveryAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRotateRecoveryAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRotateRecoveryAddressResponse.Merge(m, src)
}
func (m *MsgRotateRecoveryAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRotateRecoveryAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRotateRecoveryAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRotateRecoveryAddressResponse proto.InternalMessageInfo

type MsgIssueRecoveryTokens struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgIssueRecoveryTokens) Reset()         { *m = MsgIssueRecoveryTokens{} }
func (m *MsgIssueRecoveryTokens) String() string { return proto.CompactTextString(m) }
func (*MsgIssueRecoveryTokens) ProtoMessage()    {}
func (*MsgIssueRecoveryTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{4}
}
func (m *MsgIssueRecoveryTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueRecoveryTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueRecoveryTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueRecoveryTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueRecoveryTokens.Merge(m, src)
}
func (m *MsgIssueRecoveryTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueRecoveryTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueRecoveryTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueRecoveryTokens proto.InternalMessageInfo

func (m *MsgIssueRecoveryTokens) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgIssueRecoveryTokensResponse struct {
}

func (m *MsgIssueRecoveryTokensResponse) Reset()         { *m = MsgIssueRecoveryTokensResponse{} }
func (m *MsgIssueRecoveryTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueRecoveryTokensResponse) ProtoMessage()    {}
func (*MsgIssueRecoveryTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{5}
}
func (m *MsgIssueRecoveryTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueRecoveryTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueRecoveryTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueRecoveryTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueRecoveryTokensResponse.Merge(m, src)
}
func (m *MsgIssueRecoveryTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueRecoveryTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueRecoveryTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueRecoveryTokensResponse proto.InternalMessageInfo

type MsgBurnRecoveryTokens struct {
	Address string                                  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	RrCoin  github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,2,opt,name=rr_coin,json=rrCoin,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rr_coin"`
}

func (m *MsgBurnRecoveryTokens) Reset()         { *m = MsgBurnRecoveryTokens{} }
func (m *MsgBurnRecoveryTokens) String() string { return proto.CompactTextString(m) }
func (*MsgBurnRecoveryTokens) ProtoMessage()    {}
func (*MsgBurnRecoveryTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{6}
}
func (m *MsgBurnRecoveryTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnRecoveryTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnRecoveryTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnRecoveryTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnRecoveryTokens.Merge(m, src)
}
func (m *MsgBurnRecoveryTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnRecoveryTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnRecoveryTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnRecoveryTokens proto.InternalMessageInfo

func (m *MsgBurnRecoveryTokens) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MsgBurnRecoveryTokensResponse struct {
}

func (m *MsgBurnRecoveryTokensResponse) Reset()         { *m = MsgBurnRecoveryTokensResponse{} }
func (m *MsgBurnRecoveryTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnRecoveryTokensResponse) ProtoMessage()    {}
func (*MsgBurnRecoveryTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{7}
}
func (m *MsgBurnRecoveryTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnRecoveryTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnRecoveryTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnRecoveryTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnRecoveryTokensResponse.Merge(m, src)
}
func (m *MsgBurnRecoveryTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnRecoveryTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnRecoveryTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnRecoveryTokensResponse proto.InternalMessageInfo

type MsgClaimRRHolderRewards struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
}

func (m *MsgClaimRRHolderRewards) Reset()         { *m = MsgClaimRRHolderRewards{} }
func (m *MsgClaimRRHolderRewards) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRRHolderRewards) ProtoMessage()    {}
func (*MsgClaimRRHolderRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{8}
}
func (m *MsgClaimRRHolderRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRRHolderRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRRHolderRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRRHolderRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRRHolderRewards.Merge(m, src)
}
func (m *MsgClaimRRHolderRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRRHolderRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRRHolderRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRRHolderRewards proto.InternalMessageInfo

type MsgClaimRRHolderRewardsResponse struct {
}

func (m *MsgClaimRRHolderRewardsResponse) Reset()         { *m = MsgClaimRRHolderRewardsResponse{} }
func (m *MsgClaimRRHolderRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClaimRRHolderRewardsResponse) ProtoMessage()    {}
func (*MsgClaimRRHolderRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{9}
}
func (m *MsgClaimRRHolderRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClaimRRHolderRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClaimRRHolderRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClaimRRHolderRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClaimRRHolderRewardsResponse.Merge(m, src)
}
func (m *MsgClaimRRHolderRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClaimRRHolderRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClaimRRHolderRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClaimRRHolderRewardsResponse proto.InternalMessageInfo

type MsgRegisterRRTokenHolder struct {
	Holder string `protobuf:"bytes,1,opt,name=holder,proto3" json:"holder,omitempty"`
}

func (m *MsgRegisterRRTokenHolder) Reset()         { *m = MsgRegisterRRTokenHolder{} }
func (m *MsgRegisterRRTokenHolder) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterRRTokenHolder) ProtoMessage()    {}
func (*MsgRegisterRRTokenHolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{10}
}
func (m *MsgRegisterRRTokenHolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterRRTokenHolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterRRTokenHolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterRRTokenHolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterRRTokenHolder.Merge(m, src)
}
func (m *MsgRegisterRRTokenHolder) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterRRTokenHolder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterRRTokenHolder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterRRTokenHolder proto.InternalMessageInfo

func (m *MsgRegisterRRTokenHolder) GetHolder() string {
	if m != nil {
		return m.Holder
	}
	return ""
}

type MsgRegisterRRTokenHolderResponse struct {
}

func (m *MsgRegisterRRTokenHolderResponse) Reset()         { *m = MsgRegisterRRTokenHolderResponse{} }
func (m *MsgRegisterRRTokenHolderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterRRTokenHolderResponse) ProtoMessage()    {}
func (*MsgRegisterRRTokenHolderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{11}
}
func (m *MsgRegisterRRTokenHolderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterRRTokenHolderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterRRTokenHolderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterRRTokenHolderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterRRTokenHolderResponse.Merge(m, src)
}
func (m *MsgRegisterRRTokenHolderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterRRTokenHolderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterRRTokenHolderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterRRTokenHolderResponse proto.InternalMessageInfo

type MsgRotateValidatorByHalfRRTokenHolder struct {
	RrHolder string `protobuf:"bytes,1,opt,name=rr_holder,json=rrHolder,proto3" json:"rr_holder,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Recovery string `protobuf:"bytes,3,opt,name=recovery,proto3" json:"recovery,omitempty"`
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) Reset()         { *m = MsgRotateValidatorByHalfRRTokenHolder{} }
func (m *MsgRotateValidatorByHalfRRTokenHolder) String() string { return proto.CompactTextString(m) }
func (*MsgRotateValidatorByHalfRRTokenHolder) ProtoMessage()    {}
func (*MsgRotateValidatorByHalfRRTokenHolder) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{12}
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolder.Merge(m, src)
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) XXX_Size() int {
	return m.Size()
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolder.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolder proto.InternalMessageInfo

func (m *MsgRotateValidatorByHalfRRTokenHolder) GetRrHolder() string {
	if m != nil {
		return m.RrHolder
	}
	return ""
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) GetRecovery() string {
	if m != nil {
		return m.Recovery
	}
	return ""
}

type MsgRotateValidatorByHalfRRTokenHolderResponse struct {
}

func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) Reset() {
	*m = MsgRotateValidatorByHalfRRTokenHolderResponse{}
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgRotateValidatorByHalfRRTokenHolderResponse) ProtoMessage() {}
func (*MsgRotateValidatorByHalfRRTokenHolderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b5bb529d56b66ae, []int{13}
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolderResponse.Merge(m, src)
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRotateValidatorByHalfRRTokenHolderResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterRecoverySecret)(nil), "kira.recovery.MsgRegisterRecoverySecret")
	proto.RegisterType((*MsgRegisterRecoverySecretResponse)(nil), "kira.recovery.MsgRegisterRecoverySecretResponse")
	proto.RegisterType((*MsgRotateRecoveryAddress)(nil), "kira.recovery.MsgRotateRecoveryAddress")
	proto.RegisterType((*MsgRotateRecoveryAddressResponse)(nil), "kira.recovery.MsgRotateRecoveryAddressResponse")
	proto.RegisterType((*MsgIssueRecoveryTokens)(nil), "kira.recovery.MsgIssueRecoveryTokens")
	proto.RegisterType((*MsgIssueRecoveryTokensResponse)(nil), "kira.recovery.MsgIssueRecoveryTokensResponse")
	proto.RegisterType((*MsgBurnRecoveryTokens)(nil), "kira.recovery.MsgBurnRecoveryTokens")
	proto.RegisterType((*MsgBurnRecoveryTokensResponse)(nil), "kira.recovery.MsgBurnRecoveryTokensResponse")
	proto.RegisterType((*MsgClaimRRHolderRewards)(nil), "kira.recovery.MsgClaimRRHolderRewards")
	proto.RegisterType((*MsgClaimRRHolderRewardsResponse)(nil), "kira.recovery.MsgClaimRRHolderRewardsResponse")
	proto.RegisterType((*MsgRegisterRRTokenHolder)(nil), "kira.recovery.MsgRegisterRRTokenHolder")
	proto.RegisterType((*MsgRegisterRRTokenHolderResponse)(nil), "kira.recovery.MsgRegisterRRTokenHolderResponse")
	proto.RegisterType((*MsgRotateValidatorByHalfRRTokenHolder)(nil), "kira.recovery.MsgRotateValidatorByHalfRRTokenHolder")
	proto.RegisterType((*MsgRotateValidatorByHalfRRTokenHolderResponse)(nil), "kira.recovery.MsgRotateValidatorByHalfRRTokenHolderResponse")
}

func init() { proto.RegisterFile("kira/recovery/tx.proto", fileDescriptor_8b5bb529d56b66ae) }

var fileDescriptor_8b5bb529d56b66ae = []byte{
	// 671 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xbf, 0x6f, 0xd3, 0x4e,
	0x14, 0x8f, 0xdb, 0xef, 0x37, 0x4d, 0x9e, 0xc4, 0x62, 0xda, 0xe0, 0xba, 0xc5, 0x69, 0x0d, 0xa5,
	0x15, 0xa2, 0x36, 0x2a, 0x4c, 0xc0, 0x42, 0xba, 0x04, 0xa1, 0x48, 0xc8, 0x20, 0x06, 0x96, 0xe8,
	0x6a, 0xbf, 0x38, 0x56, 0x5c, 0x5f, 0xb8, 0x73, 0xa0, 0x81, 0x81, 0x81, 0x85, 0x91, 0x91, 0xb1,
	0x23, 0xff, 0x07, 0x4b, 0xc7, 0x8e, 0x88, 0xa1, 0x42, 0xe9, 0xc2, 0x9f, 0x81, 0xfc, 0x93, 0x44,
	0x39, 0x47, 0x56, 0x27, 0xdf, 0xbb, 0xf7, 0x79, 0xef, 0xf3, 0xb9, 0x7b, 0xef, 0x9d, 0xa1, 0x31,
	0xf0, 0x18, 0x31, 0x19, 0xda, 0xf4, 0x1d, 0xb2, 0xb1, 0x19, 0x9e, 0x18, 0x43, 0x46, 0x43, 0x2a,
	0x5f, 0x8b, 0xf6, 0x8d, 0x6c, 0x5f, 0x5d, 0x75, 0xa9, 0x4b, 0x63, 0x8f, 0x19, 0xad, 0x12, 0x90,
	0xba, 0xee, 0x52, 0xea, 0xfa, 0x68, 0xc6, 0xd6, 0xd1, 0xa8, 0x67, 0x92, 0x60, 0x9c, 0xb9, 0x6c,
	0xca, 0x8f, 0x29, 0xef, 0x26, 0x31, 0x89, 0x91, 0xba, 0x36, 0x67, 0x29, 0xb3, 0x45, 0xe2, 0xd5,
	0x3f, 0xc1, 0x7a, 0x87, 0xbb, 0x16, 0xba, 0x1e, 0x0f, 0x91, 0x59, 0xa9, 0xf3, 0x25, 0xda, 0x0c,
	0x43, 0x59, 0x81, 0x15, 0xe2, 0x38, 0x0c, 0x39, 0x57, 0xa4, 0x2d, 0x69, 0xaf, 0x6e, 0x65, 0xa6,
	0xbc, 0x09, 0x75, 0xbb, 0x4f, 0x7c, 0x1f, 0x03, 0x17, 0x95, 0xa5, 0xd8, 0xf7, 0x6f, 0x43, 0x5e,
	0x85, 0xff, 0x03, 0x1a, 0xd8, 0xa8, 0x2c, 0xc7, 0x9e, 0xc4, 0x88, 0x76, 0x87, 0x8c, 0xd2, 0x9e,
	0xf2, 0x5f, 0xb2, 0x1b, 0x1b, 0xfa, 0x2d, 0xd8, 0x2e, 0x14, 0x60, 0x21, 0x1f, 0xd2, 0x80, 0xa3,
	0xfe, 0x59, 0x02, 0x25, 0x42, 0xd1, 0x90, 0x84, 0x98, 0x61, 0x9e, 0xa6, 0x5a, 0x36, 0xa0, 0xde,
	0x43, 0xec, 0x0e, 0xc9, 0x18, 0x59, 0xaa, 0xb3, 0xd6, 0x43, 0x7c, 0x11, 0xd9, 0xd3, 0x47, 0x58,
	0x9a, 0x3d, 0x82, 0x0a, 0xb5, 0xec, 0x2e, 0x52, 0x9d, 0xb9, 0x5d, 0x20, 0x55, 0x87, 0xad, 0x22,
	0x11, 0xb9, 0xd2, 0x03, 0x68, 0x74, 0xb8, 0xfb, 0x8c, 0xf3, 0x51, 0x0e, 0x79, 0x45, 0x07, 0x18,
	0xf0, 0xe2, 0xcb, 0xd4, 0xb7, 0x40, 0x13, 0xc7, 0xe4, 0x59, 0x3f, 0xc2, 0x5a, 0x87, 0xbb, 0xad,
	0x11, 0x0b, 0xca, 0x26, 0x95, 0xdb, 0xb0, 0xc2, 0x58, 0xd7, 0xa6, 0x5e, 0x90, 0x1c, 0xbc, 0x65,
	0x9e, 0x5d, 0x34, 0x2b, 0xbf, 0x2e, 0x9a, 0xbb, 0xae, 0x17, 0xf6, 0x47, 0x47, 0x86, 0x4d, 0x8f,
	0xd3, 0x46, 0x49, 0x3f, 0xfb, 0xdc, 0x19, 0x98, 0xe1, 0x78, 0x88, 0xdc, 0x38, 0xa4, 0x5e, 0x60,
	0x55, 0x19, 0x8b, 0xbe, 0x7a, 0x13, 0x6e, 0x0a, 0xc9, 0x73, 0x75, 0x8f, 0xe1, 0x46, 0x87, 0xbb,
	0x87, 0x3e, 0xf1, 0x8e, 0x2d, 0xab, 0x4d, 0x7d, 0x27, 0xaa, 0xe3, 0x7b, 0xc2, 0x1c, 0x2e, 0x37,
	0xa0, 0xca, 0x31, 0x70, 0xf2, 0xc2, 0xa4, 0xd6, 0xa3, 0xda, 0x97, 0xd3, 0x66, 0xe5, 0xcf, 0x69,
	0xb3, 0xa2, 0x6f, 0x43, 0xb3, 0x20, 0x78, 0xea, 0x4e, 0x95, 0xe9, 0x16, 0xb1, 0x62, 0xfa, 0x04,
	0x1a, 0x11, 0xf4, 0xe3, 0x55, 0x46, 0x90, 0x58, 0x59, 0xad, 0x44, 0x31, 0x79, 0xde, 0x0f, 0xb0,
	0x93, 0xd7, 0xf3, 0x35, 0xf1, 0x3d, 0x87, 0x84, 0x94, 0xb5, 0xc6, 0x6d, 0xe2, 0xf7, 0x66, 0x49,
	0x36, 0xa0, 0xce, 0x58, 0x77, 0x86, 0xa7, 0xc6, 0x58, 0xea, 0xbc, 0x52, 0x87, 0xe9, 0x26, 0xec,
	0x97, 0xe2, 0xce, 0xc4, 0x1e, 0xfc, 0xa8, 0xc2, 0x72, 0x87, 0xbb, 0x72, 0x08, 0x8d, 0x82, 0x69,
	0xdd, 0x33, 0x66, 0x1e, 0x11, 0xa3, 0x70, 0xac, 0xd4, 0xfb, 0x65, 0x91, 0x19, 0xbb, 0xfc, 0x16,
	0xd6, 0xc4, 0xc3, 0xb7, 0x2b, 0x48, 0x25, 0x02, 0xaa, 0x66, 0x49, 0x60, 0x4e, 0x39, 0x80, 0xeb,
	0xa2, 0x31, 0xda, 0x99, 0xcf, 0x23, 0x80, 0xa9, 0xfb, 0xa5, 0x60, 0x39, 0x59, 0x1f, 0x64, 0xc1,
	0x74, 0xdd, 0x9e, 0x4f, 0x32, 0x8f, 0x52, 0xef, 0x95, 0x41, 0xe5, 0x4c, 0x01, 0xac, 0x0a, 0x27,
	0xe5, 0xce, 0x7c, 0x16, 0x11, 0x4e, 0x35, 0xca, 0xe1, 0x66, 0x2a, 0x27, 0x9c, 0x9c, 0xdd, 0x05,
	0x4d, 0x30, 0x0d, 0x14, 0x56, 0x6e, 0xd1, 0x5c, 0xc9, 0xdf, 0x24, 0xd0, 0x4b, 0x4c, 0xd5, 0xc3,
	0xa2, 0x8e, 0x58, 0x14, 0xa5, 0x3e, 0xb9, 0x4a, 0x54, 0x26, 0xad, 0xd5, 0xfe, 0x3e, 0xd1, 0xa4,
	0xb3, 0x89, 0x26, 0x9d, 0x4f, 0x34, 0xe9, 0xf7, 0x44, 0x93, 0xbe, 0x5e, 0x6a, 0x95, 0xf3, 0x4b,
	0xad, 0xf2, 0xf3, 0x52, 0xab, 0xbc, 0xb9, 0x3b, 0xf5, 0x34, 0x3e, 0xf7, 0x18, 0x39, 0xa4, 0x0c,
	0x4d, 0x8e, 0x03, 0xe2, 0x99, 0x27, 0x53, 0x3f, 0xed, 0xe8, 0x89, 0x3c, 0xaa, 0xc6, 0xff, 0xcf,
	0x07, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x5a, 0x7b, 0x37, 0xd2, 0x07, 0x00, 0x00,
}

func (this *MsgRegisterRecoverySecret) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterRecoverySecret)
	if !ok {
		that2, ok := that.(MsgRegisterRecoverySecret)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Challenge != that1.Challenge {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *MsgRegisterRecoverySecretResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterRecoverySecretResponse)
	if !ok {
		that2, ok := that.(MsgRegisterRecoverySecretResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRotateRecoveryAddress) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRotateRecoveryAddress)
	if !ok {
		that2, ok := that.(MsgRotateRecoveryAddress)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FeePayer != that1.FeePayer {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Recovery != that1.Recovery {
		return false
	}
	if this.Proof != that1.Proof {
		return false
	}
	return true
}
func (this *MsgRotateRecoveryAddressResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRotateRecoveryAddressResponse)
	if !ok {
		that2, ok := that.(MsgRotateRecoveryAddressResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgIssueRecoveryTokens) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgIssueRecoveryTokens)
	if !ok {
		that2, ok := that.(MsgIssueRecoveryTokens)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *MsgIssueRecoveryTokensResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgIssueRecoveryTokensResponse)
	if !ok {
		that2, ok := that.(MsgIssueRecoveryTokensResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgBurnRecoveryTokens) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBurnRecoveryTokens)
	if !ok {
		that2, ok := that.(MsgBurnRecoveryTokens)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if !this.RrCoin.Equal(that1.RrCoin) {
		return false
	}
	return true
}
func (this *MsgBurnRecoveryTokensResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgBurnRecoveryTokensResponse)
	if !ok {
		that2, ok := that.(MsgBurnRecoveryTokensResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgClaimRRHolderRewardsResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgClaimRRHolderRewardsResponse)
	if !ok {
		that2, ok := that.(MsgClaimRRHolderRewardsResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRegisterRRTokenHolder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterRRTokenHolder)
	if !ok {
		that2, ok := that.(MsgRegisterRRTokenHolder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Holder != that1.Holder {
		return false
	}
	return true
}
func (this *MsgRegisterRRTokenHolderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRegisterRRTokenHolderResponse)
	if !ok {
		that2, ok := that.(MsgRegisterRRTokenHolderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *MsgRotateValidatorByHalfRRTokenHolder) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRotateValidatorByHalfRRTokenHolder)
	if !ok {
		that2, ok := that.(MsgRotateValidatorByHalfRRTokenHolder)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RrHolder != that1.RrHolder {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Recovery != that1.Recovery {
		return false
	}
	return true
}
func (this *MsgRotateValidatorByHalfRRTokenHolderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgRotateValidatorByHalfRRTokenHolderResponse)
	if !ok {
		that2, ok := that.(MsgRotateValidatorByHalfRRTokenHolderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// allow ANY user to register or modify existing recovery secret & verify if the nonce is correct
	RegisterRecoverySecret(ctx context.Context, in *MsgRegisterRecoverySecret, opts ...grpc.CallOption) (*MsgRegisterRecoverySecretResponse, error)
	// allow ANY KIRA address that knows the recovery secret to rotate the address
	RotateRecoveryAddress(ctx context.Context, in *MsgRotateRecoveryAddress, opts ...grpc.CallOption) (*MsgRotateRecoveryAddressResponse, error)
	// mint `rr_<moniker>` tokens and deposit them to the validator account.
	// This function will require putting up a bond in the amount of `validator_recovery_bond` otherwise should fail
	IssueRecoveryTokens(ctx context.Context, in *MsgIssueRecoveryTokens, opts ...grpc.CallOption) (*MsgIssueRecoveryTokensResponse, error)
	// burn tokens and redeem KEX
	BurnRecoveryTokens(ctx context.Context, in *MsgBurnRecoveryTokens, opts ...grpc.CallOption) (*MsgBurnRecoveryTokensResponse, error)
	// claim rewards
	ClaimRRHolderRewards(ctx context.Context, in *MsgClaimRRHolderRewards, opts ...grpc.CallOption) (*MsgClaimRRHolderRewardsResponse, error)
	// register RR token holder
	RegisterRRTokenHolder(ctx context.Context, in *MsgRegisterRRTokenHolder, opts ...grpc.CallOption) (*MsgRegisterRRTokenHolderResponse, error)
	// allow ANY KIRA address has a sufficient number of RR tokens to rotate the address
	RotateValidatorByHalfRRTokenHolder(ctx context.Context, in *MsgRotateValidatorByHalfRRTokenHolder, opts ...grpc.CallOption) (*MsgRotateValidatorByHalfRRTokenHolderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterRecoverySecret(ctx context.Context, in *MsgRegisterRecoverySecret, opts ...grpc.CallOption) (*MsgRegisterRecoverySecretResponse, error) {
	out := new(MsgRegisterRecoverySecretResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/RegisterRecoverySecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RotateRecoveryAddress(ctx context.Context, in *MsgRotateRecoveryAddress, opts ...grpc.CallOption) (*MsgRotateRecoveryAddressResponse, error) {
	out := new(MsgRotateRecoveryAddressResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/RotateRecoveryAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssueRecoveryTokens(ctx context.Context, in *MsgIssueRecoveryTokens, opts ...grpc.CallOption) (*MsgIssueRecoveryTokensResponse, error) {
	out := new(MsgIssueRecoveryTokensResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/IssueRecoveryTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnRecoveryTokens(ctx context.Context, in *MsgBurnRecoveryTokens, opts ...grpc.CallOption) (*MsgBurnRecoveryTokensResponse, error) {
	out := new(MsgBurnRecoveryTokensResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/BurnRecoveryTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimRRHolderRewards(ctx context.Context, in *MsgClaimRRHolderRewards, opts ...grpc.CallOption) (*MsgClaimRRHolderRewardsResponse, error) {
	out := new(MsgClaimRRHolderRewardsResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/ClaimRRHolderRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterRRTokenHolder(ctx context.Context, in *MsgRegisterRRTokenHolder, opts ...grpc.CallOption) (*MsgRegisterRRTokenHolderResponse, error) {
	out := new(MsgRegisterRRTokenHolderResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/RegisterRRTokenHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RotateValidatorByHalfRRTokenHolder(ctx context.Context, in *MsgRotateValidatorByHalfRRTokenHolder, opts ...grpc.CallOption) (*MsgRotateValidatorByHalfRRTokenHolderResponse, error) {
	out := new(MsgRotateValidatorByHalfRRTokenHolderResponse)
	err := c.cc.Invoke(ctx, "/kira.recovery.Msg/RotateValidatorByHalfRRTokenHolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// allow ANY user to register or modify existing recovery secret & verify if the nonce is correct
	RegisterRecoverySecret(context.Context, *MsgRegisterRecoverySecret) (*MsgRegisterRecoverySecretResponse, error)
	// allow ANY KIRA address that knows the recovery secret to rotate the address
	RotateRecoveryAddress(context.Context, *MsgRotateRecoveryAddress) (*MsgRotateRecoveryAddressResponse, error)
	// mint `rr_<moniker>` tokens and deposit them to the validator account.
	// This function will require putting up a bond in the amount of `validator_recovery_bond` otherwise should fail
	IssueRecoveryTokens(context.Context, *MsgIssueRecoveryTokens) (*MsgIssueRecoveryTokensResponse, error)
	// burn tokens and redeem KEX
	BurnRecoveryTokens(context.Context, *MsgBurnRecoveryTokens) (*MsgBurnRecoveryTokensResponse, error)
	// claim rewards
	ClaimRRHolderRewards(context.Context, *MsgClaimRRHolderRewards) (*MsgClaimRRHolderRewardsResponse, error)
	// register RR token holder
	RegisterRRTokenHolder(context.Context, *MsgRegisterRRTokenHolder) (*MsgRegisterRRTokenHolderResponse, error)
	// allow ANY KIRA address has a sufficient number of RR tokens to rotate the address
	RotateValidatorByHalfRRTokenHolder(context.Context, *MsgRotateValidatorByHalfRRTokenHolder) (*MsgRotateValidatorByHalfRRTokenHolderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterRecoverySecret(ctx context.Context, req *MsgRegisterRecoverySecret) (*MsgRegisterRecoverySecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRecoverySecret not implemented")
}
func (*UnimplementedMsgServer) RotateRecoveryAddress(ctx context.Context, req *MsgRotateRecoveryAddress) (*MsgRotateRecoveryAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateRecoveryAddress not implemented")
}
func (*UnimplementedMsgServer) IssueRecoveryTokens(ctx context.Context, req *MsgIssueRecoveryTokens) (*MsgIssueRecoveryTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueRecoveryTokens not implemented")
}
func (*UnimplementedMsgServer) BurnRecoveryTokens(ctx context.Context, req *MsgBurnRecoveryTokens) (*MsgBurnRecoveryTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnRecoveryTokens not implemented")
}
func (*UnimplementedMsgServer) ClaimRRHolderRewards(ctx context.Context, req *MsgClaimRRHolderRewards) (*MsgClaimRRHolderRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimRRHolderRewards not implemented")
}
func (*UnimplementedMsgServer) RegisterRRTokenHolder(ctx context.Context, req *MsgRegisterRRTokenHolder) (*MsgRegisterRRTokenHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterRRTokenHolder not implemented")
}
func (*UnimplementedMsgServer) RotateValidatorByHalfRRTokenHolder(ctx context.Context, req *MsgRotateValidatorByHalfRRTokenHolder) (*MsgRotateValidatorByHalfRRTokenHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateValidatorByHalfRRTokenHolder not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterRecoverySecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterRecoverySecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterRecoverySecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/RegisterRecoverySecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterRecoverySecret(ctx, req.(*MsgRegisterRecoverySecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RotateRecoveryAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRotateRecoveryAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RotateRecoveryAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/RotateRecoveryAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RotateRecoveryAddress(ctx, req.(*MsgRotateRecoveryAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssueRecoveryTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueRecoveryTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueRecoveryTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/IssueRecoveryTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueRecoveryTokens(ctx, req.(*MsgIssueRecoveryTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnRecoveryTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnRecoveryTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnRecoveryTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/BurnRecoveryTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnRecoveryTokens(ctx, req.(*MsgBurnRecoveryTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimRRHolderRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimRRHolderRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimRRHolderRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/ClaimRRHolderRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimRRHolderRewards(ctx, req.(*MsgClaimRRHolderRewards))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterRRTokenHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterRRTokenHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterRRTokenHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/RegisterRRTokenHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterRRTokenHolder(ctx, req.(*MsgRegisterRRTokenHolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RotateValidatorByHalfRRTokenHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRotateValidatorByHalfRRTokenHolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RotateValidatorByHalfRRTokenHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.recovery.Msg/RotateValidatorByHalfRRTokenHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RotateValidatorByHalfRRTokenHolder(ctx, req.(*MsgRotateValidatorByHalfRRTokenHolder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.recovery.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterRecoverySecret",
			Handler:    _Msg_RegisterRecoverySecret_Handler,
		},
		{
			MethodName: "RotateRecoveryAddress",
			Handler:    _Msg_RotateRecoveryAddress_Handler,
		},
		{
			MethodName: "IssueRecoveryTokens",
			Handler:    _Msg_IssueRecoveryTokens_Handler,
		},
		{
			MethodName: "BurnRecoveryTokens",
			Handler:    _Msg_BurnRecoveryTokens_Handler,
		},
		{
			MethodName: "ClaimRRHolderRewards",
			Handler:    _Msg_ClaimRRHolderRewards_Handler,
		},
		{
			MethodName: "RegisterRRTokenHolder",
			Handler:    _Msg_RegisterRRTokenHolder_Handler,
		},
		{
			MethodName: "RotateValidatorByHalfRRTokenHolder",
			Handler:    _Msg_RotateValidatorByHalfRRTokenHolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/recovery/tx.proto",
}

func (m *MsgRegisterRecoverySecret) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterRecoverySecret) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterRecoverySecret) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nonce) > 0 {
		i -= len(m.Nonce)
		copy(dAtA[i:], m.Nonce)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Nonce)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Challenge) > 0 {
		i -= len(m.Challenge)
		copy(dAtA[i:], m.Challenge)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Challenge)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterRecoverySecretResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterRecoverySecretResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterRecoverySecretResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRotateRecoveryAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRotateRecoveryAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRotateRecoveryAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recovery) > 0 {
		i -= len(m.Recovery)
		copy(dAtA[i:], m.Recovery)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recovery)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeePayer) > 0 {
		i -= len(m.FeePayer)
		copy(dAtA[i:], m.FeePayer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeePayer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRotateRecoveryAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRotateRecoveryAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRotateRecoveryAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssueRecoveryTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueRecoveryTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueRecoveryTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueRecoveryTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueRecoveryTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueRecoveryTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnRecoveryTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnRecoveryTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnRecoveryTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RrCoin.Size()
		i -= size
		if _, err := m.RrCoin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnRecoveryTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnRecoveryTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnRecoveryTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgClaimRRHolderRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRRHolderRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRRHolderRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClaimRRHolderRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClaimRRHolderRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClaimRRHolderRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterRRTokenHolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterRRTokenHolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterRRTokenHolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Holder) > 0 {
		i -= len(m.Holder)
		copy(dAtA[i:], m.Holder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Holder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterRRTokenHolderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterRRTokenHolderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterRRTokenHolderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Recovery) > 0 {
		i -= len(m.Recovery)
		copy(dAtA[i:], m.Recovery)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recovery)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RrHolder) > 0 {
		i -= len(m.RrHolder)
		copy(dAtA[i:], m.RrHolder)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RrHolder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterRecoverySecret) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Challenge)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterRecoverySecretResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRotateRecoveryAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePayer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recovery)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRotateRecoveryAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssueRecoveryTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueRecoveryTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnRecoveryTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.RrCoin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgBurnRecoveryTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgClaimRRHolderRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgClaimRRHolderRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterRRTokenHolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Holder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterRRTokenHolderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRotateValidatorByHalfRRTokenHolder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RrHolder)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Recovery)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterRecoverySecret) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterRecoverySecret: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterRecoverySecret: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Challenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Challenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterRecoverySecretResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterRecoverySecretResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterRecoverySecretResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRotateRecoveryAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRotateRecoveryAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRotateRecoveryAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recovery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRotateRecoveryAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRotateRecoveryAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRotateRecoveryAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueRecoveryTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueRecoveryTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueRecoveryTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueRecoveryTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueRecoveryTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueRecoveryTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnRecoveryTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnRecoveryTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnRecoveryTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrCoin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RrCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnRecoveryTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnRecoveryTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnRecoveryTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRRHolderRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRRHolderRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRRHolderRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClaimRRHolderRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClaimRRHolderRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClaimRRHolderRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterRRTokenHolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterRRTokenHolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterRRTokenHolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Holder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Holder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterRRTokenHolderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterRRTokenHolderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterRRTokenHolderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRotateValidatorByHalfRRTokenHolder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRotateValidatorByHalfRRTokenHolder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRotateValidatorByHalfRRTokenHolder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RrHolder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RrHolder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recovery", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recovery = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRotateValidatorByHalfRRTokenHolderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRotateValidatorByHalfRRTokenHolderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRotateValidatorByHalfRRTokenHolderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
