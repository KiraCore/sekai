// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: actor.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PermValue int32

const (
	// PERMISSION_ZERO is a no-op permission.
	PermZero PermValue = 0
	// PERMISSION_SET_PERMISSIONS defines the permission that allows to Set Permissions to other actors.
	PermSetPermissions PermValue = 1
	// PERMISSION_CLAIM_VALIDATOR defines the permission that allows to Claim a validator Seat.
	PermClaimValidator PermValue = 2
	// PERMISSION_CLAIM_COUNCILOR defines the permission that allows to Claim a Councilor Seat.
	PermClaimCouncilor PermValue = 3
	// PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL defines the permission needed to create proposals.
	PermCreateSetPermissionsProposal PermValue = 4
	// PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL defines the permission that an actor must have in order to vote a
	// Proposal to set permissions.
	PermVoteSetPermissionProposal PermValue = 5
	PermUpsertTokenAlias          PermValue = 6
	PermUpsertTokenRate           PermValue = 7
	PermChangeTxFee               PermValue = 8
)

var PermValue_name = map[int32]string{
	0: "PERMISSION_ZERO",
	1: "PERMISSION_SET_PERMISSIONS",
	2: "PERMISSION_CLAIM_VALIDATOR",
	3: "PERMISSION_CLAIM_COUNCILOR",
	4: "PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL",
	5: "PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL",
	6: "PERMISSION_UPSERT_TOKEN_ALIAS",
	7: "PERMISSION_UPSERT_TOKEN_RATE",
	8: "PERMISSION_CHANGE_TX_FEE",
}

var PermValue_value = map[string]int32{
	"PERMISSION_ZERO":                            0,
	"PERMISSION_SET_PERMISSIONS":                 1,
	"PERMISSION_CLAIM_VALIDATOR":                 2,
	"PERMISSION_CLAIM_COUNCILOR":                 3,
	"PERMISSION_CREATE_SET_PERMISSIONS_PROPOSAL": 4,
	"PERMISSION_VOTE_SET_PERMISSIONS_PROPOSAL":   5,
	"PERMISSION_UPSERT_TOKEN_ALIAS":              6,
	"PERMISSION_UPSERT_TOKEN_RATE":               7,
	"PERMISSION_CHANGE_TX_FEE":                   8,
}

func (x PermValue) String() string {
	return proto.EnumName(PermValue_name, int32(x))
}

func (PermValue) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{0}
}

type ActorStatus int32

const (
	// Undefined status
	Undefined ActorStatus = 0
	// Unclaimed status
	Unclaimed ActorStatus = 1
	// Active status
	Active ActorStatus = 2
	// Paused status
	Paused ActorStatus = 3
	// Inactive status
	Inactive ActorStatus = 4
	// Jailed status
	Jailed ActorStatus = 5
	// Removed status
	Removed ActorStatus = 6
)

var ActorStatus_name = map[int32]string{
	0: "UNDEFINED",
	1: "UNCLAIMED",
	2: "ACTIVE",
	3: "PAUSED",
	4: "INACTIVE",
	5: "JAILED",
	6: "REMOVED",
}

var ActorStatus_value = map[string]int32{
	"UNDEFINED": 0,
	"UNCLAIMED": 1,
	"ACTIVE":    2,
	"PAUSED":    3,
	"INACTIVE":  4,
	"JAILED":    5,
	"REMOVED":   6,
}

func (x ActorStatus) String() string {
	return proto.EnumName(ActorStatus_name, int32(x))
}

func (ActorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{1}
}

type Permissions struct {
	Blacklist []uint32 `protobuf:"varint,1,rep,packed,name=blacklist,proto3" json:"blacklist,omitempty"`
	Whitelist []uint32 `protobuf:"varint,2,rep,packed,name=whitelist,proto3" json:"whitelist,omitempty"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{0}
}
func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return m.Size()
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetBlacklist() []uint32 {
	if m != nil {
		return m.Blacklist
	}
	return nil
}

func (m *Permissions) GetWhitelist() []uint32 {
	if m != nil {
		return m.Whitelist
	}
	return nil
}

type NetworkActor struct {
	Address     github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Roles       []uint64                                      `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Status      ActorStatus                                   `protobuf:"varint,3,opt,name=status,proto3,enum=kira.gov.ActorStatus" json:"status,omitempty"`
	Votes       []uint32                                      `protobuf:"varint,4,rep,packed,name=votes,proto3" json:"votes,omitempty"`
	Permissions *Permissions                                  `protobuf:"bytes,5,opt,name=permissions,proto3" json:"permissions,omitempty"`
	Skin        uint64                                        `protobuf:"varint,6,opt,name=skin,proto3" json:"skin,omitempty"`
}

func (m *NetworkActor) Reset()         { *m = NetworkActor{} }
func (m *NetworkActor) String() string { return proto.CompactTextString(m) }
func (*NetworkActor) ProtoMessage()    {}
func (*NetworkActor) Descriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{1}
}
func (m *NetworkActor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkActor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkActor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkActor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkActor.Merge(m, src)
}
func (m *NetworkActor) XXX_Size() int {
	return m.Size()
}
func (m *NetworkActor) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkActor.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkActor proto.InternalMessageInfo

func (m *NetworkActor) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *NetworkActor) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *NetworkActor) GetStatus() ActorStatus {
	if m != nil {
		return m.Status
	}
	return Undefined
}

func (m *NetworkActor) GetVotes() []uint32 {
	if m != nil {
		return m.Votes
	}
	return nil
}

func (m *NetworkActor) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

func (m *NetworkActor) GetSkin() uint64 {
	if m != nil {
		return m.Skin
	}
	return 0
}

type MsgWhitelistPermissions struct {
	Proposer   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty" yaml:"address"`
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission uint32                                        `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (m *MsgWhitelistPermissions) Reset()         { *m = MsgWhitelistPermissions{} }
func (m *MsgWhitelistPermissions) String() string { return proto.CompactTextString(m) }
func (*MsgWhitelistPermissions) ProtoMessage()    {}
func (*MsgWhitelistPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{2}
}
func (m *MsgWhitelistPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWhitelistPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWhitelistPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWhitelistPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWhitelistPermissions.Merge(m, src)
}
func (m *MsgWhitelistPermissions) XXX_Size() int {
	return m.Size()
}
func (m *MsgWhitelistPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWhitelistPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWhitelistPermissions proto.InternalMessageInfo

func (m *MsgWhitelistPermissions) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *MsgWhitelistPermissions) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgWhitelistPermissions) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

type MsgBlacklistPermissions struct {
	Proposer   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty" yaml:"address"`
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission uint32                                        `protobuf:"varint,3,opt,name=permission,proto3" json:"permission,omitempty"`
}

func (m *MsgBlacklistPermissions) Reset()         { *m = MsgBlacklistPermissions{} }
func (m *MsgBlacklistPermissions) String() string { return proto.CompactTextString(m) }
func (*MsgBlacklistPermissions) ProtoMessage()    {}
func (*MsgBlacklistPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_93a2698287ded216, []int{3}
}
func (m *MsgBlacklistPermissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlacklistPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlacklistPermissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlacklistPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlacklistPermissions.Merge(m, src)
}
func (m *MsgBlacklistPermissions) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlacklistPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlacklistPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlacklistPermissions proto.InternalMessageInfo

func (m *MsgBlacklistPermissions) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *MsgBlacklistPermissions) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgBlacklistPermissions) GetPermission() uint32 {
	if m != nil {
		return m.Permission
	}
	return 0
}

func init() {
	proto.RegisterEnum("kira.gov.PermValue", PermValue_name, PermValue_value)
	proto.RegisterEnum("kira.gov.ActorStatus", ActorStatus_name, ActorStatus_value)
	proto.RegisterType((*Permissions)(nil), "kira.gov.Permissions")
	proto.RegisterType((*NetworkActor)(nil), "kira.gov.NetworkActor")
	proto.RegisterType((*MsgWhitelistPermissions)(nil), "kira.gov.MsgWhitelistPermissions")
	proto.RegisterType((*MsgBlacklistPermissions)(nil), "kira.gov.MsgBlacklistPermissions")
}

func init() { proto.RegisterFile("actor.proto", fileDescriptor_93a2698287ded216) }

var fileDescriptor_93a2698287ded216 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x53, 0x37, 0x4d, 0x27, 0xed, 0xae, 0x35, 0x5b, 0x76, 0x2d, 0x6b, 0x37, 0xf5, 0x46,
	0x20, 0x45, 0x95, 0x9a, 0x08, 0x90, 0x40, 0x2c, 0x07, 0x34, 0x4d, 0xa6, 0xe0, 0xdd, 0x34, 0x8e,
	0xc6, 0x4e, 0x40, 0x95, 0x90, 0x35, 0xb5, 0x87, 0xd4, 0x8a, 0x93, 0x89, 0x3c, 0x4e, 0x76, 0xf7,
	0x1f, 0x20, 0x9f, 0xb8, 0x70, 0xb4, 0x84, 0xc4, 0x9d, 0xdf, 0xc1, 0x05, 0x69, 0x8f, 0x9c, 0x56,
	0xa8, 0xbd, 0x70, 0xe6, 0x06, 0x17, 0x90, 0xed, 0xa6, 0x71, 0x2b, 0xe0, 0x04, 0xa7, 0x3d, 0x79,
	0xe6, 0x7d, 0xef, 0xfb, 0xf4, 0xde, 0xf7, 0x66, 0xc6, 0xa0, 0x46, 0xdd, 0x88, 0x87, 0xad, 0x79,
	0xc8, 0x23, 0x0e, 0xab, 0x13, 0x3f, 0xa4, 0xad, 0x31, 0x5f, 0x6a, 0x7b, 0x63, 0x3e, 0xe6, 0x59,
	0xb0, 0x9d, 0xae, 0x72, 0xbc, 0x61, 0x80, 0xda, 0x80, 0x85, 0x53, 0x5f, 0x08, 0x9f, 0xcf, 0x04,
	0x7c, 0x08, 0xb6, 0xcf, 0x02, 0xea, 0x4e, 0x02, 0x5f, 0x44, 0xaa, 0xa4, 0x6f, 0x34, 0x77, 0xc9,
	0x3a, 0x90, 0xa2, 0xcf, 0xcf, 0xfd, 0x88, 0x65, 0x68, 0x39, 0x47, 0xaf, 0x03, 0x8d, 0x6f, 0xcb,
	0x60, 0xa7, 0xcf, 0xa2, 0xe7, 0x3c, 0x9c, 0xa0, 0xb4, 0x02, 0xf8, 0x25, 0xd8, 0xa2, 0x9e, 0x17,
	0x32, 0x21, 0x54, 0x49, 0x97, 0x9a, 0x3b, 0x47, 0x9d, 0xdf, 0x5e, 0xef, 0xdf, 0x79, 0x49, 0xa7,
	0xc1, 0x93, 0xc6, 0x15, 0xd0, 0xf8, 0xe3, 0xf5, 0xfe, 0xe1, 0xd8, 0x8f, 0xce, 0x17, 0x67, 0x2d,
	0x97, 0x4f, 0xdb, 0x2e, 0x17, 0x53, 0x2e, 0xae, 0x3e, 0x87, 0xc2, 0x9b, 0xb4, 0xa3, 0x97, 0x73,
	0x26, 0x5a, 0xc8, 0x75, 0x51, 0xce, 0x20, 0x2b, 0x4d, 0xb8, 0x07, 0x36, 0x43, 0x1e, 0x30, 0x91,
	0x55, 0x22, 0x93, 0x7c, 0x03, 0x0f, 0x41, 0x45, 0x44, 0x34, 0x5a, 0x08, 0x75, 0x43, 0x97, 0x9a,
	0x77, 0xde, 0x7b, 0xab, 0xb5, 0x72, 0xa0, 0x95, 0x55, 0x65, 0x65, 0x20, 0xb9, 0x4a, 0x4a, 0x45,
	0x96, 0x3c, 0x62, 0x42, 0x95, 0xb3, 0x76, 0xf2, 0x0d, 0xfc, 0x10, 0xd4, 0xe6, 0x6b, 0x57, 0xd4,
	0x4d, 0x5d, 0x6a, 0xd6, 0x8a, 0x4a, 0x05, 0xcb, 0x48, 0x31, 0x13, 0x42, 0x20, 0x8b, 0x89, 0x3f,
	0x53, 0x2b, 0xba, 0xd4, 0x94, 0x49, 0xb6, 0x6e, 0xfc, 0x29, 0x81, 0x07, 0x27, 0x62, 0xfc, 0xf9,
	0xca, 0xa8, 0xa2, 0xdf, 0x0e, 0xa8, 0xce, 0x43, 0x3e, 0xe7, 0x82, 0x85, 0xff, 0xa5, 0x47, 0xd7,
	0xa2, 0xc5, 0x19, 0x94, 0xff, 0x87, 0x19, 0xd4, 0x01, 0x58, 0xb7, 0x9f, 0x39, 0xbe, 0x4b, 0x0a,
	0x91, 0x27, 0xf2, 0xaf, 0xdf, 0xed, 0x4b, 0x8d, 0xdf, 0x73, 0x07, 0x8e, 0x56, 0x07, 0xe9, 0x0d,
	0x72, 0xe0, 0xe0, 0x07, 0x19, 0x6c, 0xa7, 0xfd, 0x8e, 0x68, 0xb0, 0x60, 0xf0, 0x31, 0xb8, 0x3b,
	0xc0, 0xe4, 0xc4, 0xb0, 0x2c, 0xc3, 0xec, 0x3b, 0xa7, 0x98, 0x98, 0x4a, 0x49, 0xdb, 0x89, 0x13,
	0xbd, 0x9a, 0xe6, 0x9c, 0xb2, 0x90, 0xc3, 0x0f, 0x80, 0x56, 0x48, 0xb1, 0xb0, 0xed, 0xac, 0xb7,
	0x96, 0x22, 0x69, 0xf7, 0xe3, 0x44, 0x87, 0x69, 0xb6, 0xc5, 0x6e, 0x18, 0x79, 0x93, 0xd7, 0xe9,
	0x21, 0xe3, 0xc4, 0x19, 0xa1, 0x9e, 0xd1, 0x45, 0xb6, 0x49, 0x94, 0xf2, 0x9a, 0xd7, 0x09, 0xa8,
	0x9f, 0x96, 0xe3, 0x7b, 0x34, 0xbd, 0xa5, 0x7f, 0xc7, 0xeb, 0x98, 0xc3, 0x7e, 0xc7, 0xe8, 0x99,
	0x44, 0xd9, 0xb8, 0xc5, 0xeb, 0xf0, 0xc5, 0xcc, 0xf5, 0x03, 0x1e, 0x42, 0x1b, 0x1c, 0x14, 0x79,
	0x04, 0x23, 0x1b, 0xdf, 0x2e, 0xd7, 0x19, 0x10, 0x73, 0x60, 0x5a, 0xa8, 0xa7, 0xc8, 0xda, 0xdb,
	0x71, 0xa2, 0xeb, 0x99, 0x4e, 0xc8, 0x68, 0xc4, 0x6e, 0x56, 0x3f, 0xc8, 0xa6, 0x45, 0x03, 0x68,
	0x82, 0x66, 0x41, 0x75, 0x64, 0xfe, 0x9b, 0xe6, 0xa6, 0xf6, 0x38, 0x4e, 0xf4, 0x47, 0x99, 0xbb,
	0xfc, 0x96, 0xe2, 0xb5, 0xe0, 0xc7, 0xe0, 0x51, 0x41, 0x70, 0x38, 0xb0, 0x30, 0xb1, 0x1d, 0xdb,
	0x7c, 0x86, 0xfb, 0x0e, 0xea, 0x19, 0xc8, 0x52, 0x2a, 0x9a, 0x1a, 0x27, 0xfa, 0x5e, 0x4a, 0x1d,
	0xce, 0x05, 0x0b, 0x23, 0x9b, 0x4f, 0xd8, 0x0c, 0x05, 0x3e, 0x15, 0xf0, 0x23, 0xf0, 0xf0, 0x9f,
	0xc8, 0x04, 0xd9, 0x58, 0xd9, 0xd2, 0x1e, 0xc4, 0x89, 0x7e, 0xef, 0x16, 0x97, 0xd0, 0x88, 0xc1,
	0x77, 0x81, 0x5a, 0xb4, 0xe7, 0x33, 0xd4, 0xff, 0x14, 0x3b, 0xf6, 0x17, 0xce, 0x31, 0xc6, 0x4a,
	0x55, 0xbb, 0x17, 0x27, 0xfa, 0xdd, 0xcc, 0x8c, 0x73, 0x3a, 0x1b, 0x33, 0xfb, 0xc5, 0x31, 0x63,
	0x9a, 0xfc, 0xf5, 0xf7, 0xf5, 0xd2, 0xc1, 0x4f, 0x12, 0xa8, 0x15, 0x5e, 0xaa, 0xf4, 0xd1, 0x1d,
	0xf6, 0xbb, 0xf8, 0xd8, 0xe8, 0xe3, 0xae, 0x52, 0xd2, 0x76, 0xe3, 0x44, 0xdf, 0x1e, 0xce, 0x3c,
	0xf6, 0x95, 0x3f, 0x63, 0x5e, 0x8e, 0x66, 0x43, 0xc3, 0x5d, 0x45, 0x5a, 0xa1, 0x6e, 0x3a, 0x2a,
	0xe6, 0xc1, 0xfb, 0xa0, 0x82, 0x3a, 0xb6, 0x31, 0xc2, 0x4a, 0x59, 0x03, 0x71, 0xa2, 0x57, 0x90,
	0x1b, 0xf9, 0x4b, 0x96, 0xc6, 0x07, 0x68, 0x68, 0xe1, 0xae, 0xb2, 0x91, 0xc7, 0x07, 0x74, 0x21,
	0x98, 0x07, 0x35, 0x50, 0x35, 0xfa, 0x57, 0x0c, 0x39, 0x3f, 0x97, 0xc6, 0x8c, 0x5e, 0x73, 0x9e,
	0x22, 0xa3, 0x87, 0xbb, 0xca, 0x66, 0xce, 0x79, 0x4a, 0xfd, 0x80, 0x79, 0x50, 0x05, 0x5b, 0x04,
	0x9f, 0x98, 0x23, 0xdc, 0x55, 0x2a, 0x5a, 0x2d, 0x4e, 0xf4, 0x2d, 0xc2, 0xa6, 0x7c, 0xc9, 0xbc,
	0xbc, 0x9f, 0xa3, 0x4f, 0x7e, 0xbc, 0xa8, 0x4b, 0xaf, 0x2e, 0xea, 0xd2, 0x2f, 0x17, 0x75, 0xe9,
	0x9b, 0xcb, 0x7a, 0xe9, 0xd5, 0x65, 0xbd, 0xf4, 0xf3, 0x65, 0xbd, 0x74, 0xfa, 0x4e, 0xe1, 0xca,
	0x3d, 0xf3, 0x43, 0xda, 0xe1, 0x21, 0x6b, 0x0b, 0x36, 0xa1, 0x7e, 0xfb, 0x45, 0x7b, 0xcc, 0x97,
	0xf9, 0xad, 0x3b, 0xab, 0x64, 0x7f, 0xaa, 0xf7, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xae, 0x30,
	0x50, 0xbb, 0xd8, 0x06, 0x00, 0x00,
}

func (this *MsgWhitelistPermissions) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgWhitelistPermissions)
	if !ok {
		that2, ok := that.(MsgWhitelistPermissions)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Proposer, that1.Proposer) {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (m *Permissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Permissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Permissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Whitelist) > 0 {
		dAtA2 := make([]byte, len(m.Whitelist)*10)
		var j1 int
		for _, num := range m.Whitelist {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintActor(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Blacklist) > 0 {
		dAtA4 := make([]byte, len(m.Blacklist)*10)
		var j3 int
		for _, num := range m.Blacklist {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintActor(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkActor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkActor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkActor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Skin != 0 {
		i = encodeVarintActor(dAtA, i, uint64(m.Skin))
		i--
		dAtA[i] = 0x30
	}
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintActor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Votes) > 0 {
		dAtA7 := make([]byte, len(m.Votes)*10)
		var j6 int
		for _, num := range m.Votes {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintActor(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x22
	}
	if m.Status != 0 {
		i = encodeVarintActor(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Roles) > 0 {
		dAtA9 := make([]byte, len(m.Roles)*10)
		var j8 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintActor(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWhitelistPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWhitelistPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWhitelistPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintActor(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlacklistPermissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlacklistPermissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlacklistPermissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintActor(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintActor(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintActor(dAtA []byte, offset int, v uint64) int {
	offset -= sovActor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Permissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Blacklist) > 0 {
		l = 0
		for _, e := range m.Blacklist {
			l += sovActor(uint64(e))
		}
		n += 1 + sovActor(uint64(l)) + l
	}
	if len(m.Whitelist) > 0 {
		l = 0
		for _, e := range m.Whitelist {
			l += sovActor(uint64(e))
		}
		n += 1 + sovActor(uint64(l)) + l
	}
	return n
}

func (m *NetworkActor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovActor(uint64(e))
		}
		n += 1 + sovActor(uint64(l)) + l
	}
	if m.Status != 0 {
		n += 1 + sovActor(uint64(m.Status))
	}
	if len(m.Votes) > 0 {
		l = 0
		for _, e := range m.Votes {
			l += sovActor(uint64(e))
		}
		n += 1 + sovActor(uint64(l)) + l
	}
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovActor(uint64(l))
	}
	if m.Skin != 0 {
		n += 1 + sovActor(uint64(m.Skin))
	}
	return n
}

func (m *MsgWhitelistPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovActor(uint64(m.Permission))
	}
	return n
}

func (m *MsgBlacklistPermissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovActor(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovActor(uint64(m.Permission))
	}
	return n
}

func sovActor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozActor(x uint64) (n int) {
	return sovActor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Permissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Permissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Permissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Blacklist = append(m.Blacklist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Blacklist) == 0 {
					m.Blacklist = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Blacklist = append(m.Blacklist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Blacklist", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Whitelist = append(m.Whitelist, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Whitelist) == 0 {
					m.Whitelist = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Whitelist = append(m.Whitelist, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Whitelist", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkActor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkActor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkActor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ActorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Votes = append(m.Votes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowActor
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthActor
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthActor
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Votes) == 0 {
					m.Votes = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowActor
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Votes = append(m.Votes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Permissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Skin", wireType)
			}
			m.Skin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Skin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWhitelistPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWhitelistPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWhitelistPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlacklistPermissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowActor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlacklistPermissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlacklistPermissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthActor
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthActor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowActor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipActor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthActor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipActor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowActor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowActor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthActor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupActor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthActor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthActor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowActor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupActor = fmt.Errorf("proto: unexpected end of group")
)
