package types

import (
	"github.com/cosmos/cosmos-sdk/types/errors"
)

// errors
var (
	ErrSetPermissions                         = errors.Register(ModuleName, 2, "error setting permissions")
	ErrEmptyProposerAccAddress                = errors.Register(ModuleName, 3, "empty proposer key")
	ErrEmptyPermissionsAccAddress             = errors.Register(ModuleName, 4, "empty address to set the permissions")
	ErrNotEnoughPermissions                   = errors.Register(ModuleName, 5, "not enough permissions")
	ErrCouncilorEmptyAddress                  = errors.Register(ModuleName, 6, "empty councilor address")
	ErrRoleDoesNotExist                       = errors.Register(ModuleName, 7, "role does not exist")
	ErrWhitelisting                           = errors.Register(ModuleName, 8, "error adding to whitelist")
	ErrEmptyPermissions                       = errors.Register(ModuleName, 9, "empty permissions")
	ErrRoleExist                              = errors.Register(ModuleName, 12, "role already exist")
	ErrRoleAlreadyAssigned                    = errors.Register(ModuleName, 13, "role already assigned")
	ErrRoleNotAssigned                        = errors.Register(ModuleName, 14, "role not assigned")
	ErrCouncilorNotFound                      = errors.Register(ModuleName, 15, "councilor not found")
	ErrCouncilorNotPaused                     = errors.Register(ModuleName, 16, "councilor not paused")
	ErrCouncilorNotInactivated                = errors.Register(ModuleName, 17, "councilor not paused")
	ErrCouncilorJailed                        = errors.Register(ModuleName, 18, "councilor jailed")
	ErrCouncilorInactivated                   = errors.Register(ModuleName, 19, "councilor inactivated")
	ErrCouncilorPaused                        = errors.Register(ModuleName, 20, "councilor paused")
	ErrProposalDoesNotExist                   = errors.Register(ModuleName, 21, "proposal does not exist")
	ErrActorIsNotActive                       = errors.Register(ModuleName, 22, "actor is not active")
	ErrInvalidNetworkProperty                 = errors.Register(ModuleName, 23, "invalid network property")
	ErrFeeNotExist                            = errors.Register(ModuleName, 24, "fee does not exist")
	ErrPoorNetworkMessagesNotSet              = errors.Register(ModuleName, 25, "poor network messages not set")
	ErrGettingProposals                       = errors.Register(ModuleName, 26, "error getting proposals")
	ErrGettingProposalVotes                   = errors.Register(ModuleName, 27, "error getting votes for proposal")
	ErrVotingTimeEnded                        = errors.Register(ModuleName, 28, "voting time has ended")
	ErrInvalidDate                            = errors.Register(ModuleName, 29, "invalid date")
	ErrEmptyVerifierAccAddress                = errors.Register(ModuleName, 30, "empty verifier account address")
	ErrInvalidRecordId                        = errors.Register(ModuleName, 31, "invalid record id")
	ErrInvalidVerifyRequestId                 = errors.Register(ModuleName, 32, "invalid verify request id")
	ErrInvalidTip                             = errors.Register(ModuleName, 33, "invalid tip")
	ErrInvalidRecordIds                       = errors.Register(ModuleName, 34, "invalid record ids")
	ErrEmptyInfos                             = errors.Register(ModuleName, 35, "invalid record ids")
	ErrUnknownProposal                        = errors.Register(ModuleName, 36, "unknown proposal")
	ErrInactiveProposal                       = errors.Register(ModuleName, 37, "inactive proposal")
	ErrAlreadyActiveProposal                  = errors.Register(ModuleName, 38, "proposal already active")
	ErrInvalidProposalContent                 = errors.Register(ModuleName, 39, "invalid proposal content")
	ErrInvalidProposalType                    = errors.Register(ModuleName, 40, "invalid proposal type")
	ErrInvalidVote                            = errors.Register(ModuleName, 41, "invalid vote option")
	ErrInvalidGenesis                         = errors.Register(ModuleName, 42, "invalid genesis state")
	ErrNoProposalHandlerExists                = errors.Register(ModuleName, 43, "no handler exists for proposal type")
	ErrInvalidIdentityRecordKey               = errors.Register(ModuleName, 44, "invalid identity record key")
	ErrMonikerDeletionNotAllowed              = errors.Register(ModuleName, 45, "moniker field is not allowed to delete")
	ErrInvalidIdentityRecordId                = errors.Register(ModuleName, 46, "invalid identity record id")
	ErrInvalidApprovalTip                     = errors.Register(ModuleName, 47, "invalid approval tip")
	ErrKeyShouldBeUnique                      = errors.Register(ModuleName, 48, "key should be unique")
	ErrInvalidRoleSid                         = errors.Register(ModuleName, 49, "invalid role sid")
	ErrInvalidRoleIdentifier                  = errors.Register(ModuleName, 50, "invalid role identifier")
	ErrCouncilorMonikerNotAllowedToBeChanged  = errors.Register(ModuleName, 51, "councilor moniker is not allowed to be changed")
	ErrCouncilorUsernameNotAllowedToBeChanged = errors.Register(ModuleName, 52, "councilor username is not allowed to be changed")
	ErrProposalTitleSizeExceeds               = errors.Register(ModuleName, 53, "proposal title size exceeds")
	ErrProposalDescriptionSizeExceeds         = errors.Register(ModuleName, 54, "proposal description size exceeds")
	ErrProposalReferenceSizeExceeds           = errors.Register(ModuleName, 55, "proposal reference size exceeds")
	ErrProposalChecksumSizeExceeds            = errors.Register(ModuleName, 56, "proposal checksum size exceeds")
	ErrProposalOptionCountExceeds             = errors.Register(ModuleName, 57, "proposal option count exceeds")
	ErrProposalOptionSizeExceeds              = errors.Register(ModuleName, 58, "proposal option size exceeds")
	ErrProposalTypeNotAllowed                 = errors.Register(ModuleName, 59, "proposal type not allowed")
	ErrProposalOptionOnlyAscii                = errors.Register(ModuleName, 60, "only ascii symbols allowed")
	ErrPollsNotFount                          = errors.Register(ModuleName, 61, "empty polls")
	ErrPollWrongValue                         = errors.Register(ModuleName, 62, "wrong poll value")
)
