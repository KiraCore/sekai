// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/proposal.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VoteOption enumerates the valid vote options for a given governance proposal.
type VoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	OptionEmpty VoteOption = 0
	// VOTE_OPTION_YES defines a yes vote option.
	OptionYes VoteOption = 1
	// VOTE_OPTION_ABSTAIN defines an abstain vote option.
	OptionAbstain VoteOption = 2
	// VOTE_OPTION_NO defines a no vote option.
	OptionNo VoteOption = 3
	// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	OptionNoWithVeto VoteOption = 4
)

var VoteOption_name = map[int32]string{
	0: "VOTE_OPTION_UNSPECIFIED",
	1: "VOTE_OPTION_YES",
	2: "VOTE_OPTION_ABSTAIN",
	3: "VOTE_OPTION_NO",
	4: "VOTE_OPTION_NO_WITH_VETO",
}

var VoteOption_value = map[string]int32{
	"VOTE_OPTION_UNSPECIFIED":  0,
	"VOTE_OPTION_YES":          1,
	"VOTE_OPTION_ABSTAIN":      2,
	"VOTE_OPTION_NO":           3,
	"VOTE_OPTION_NO_WITH_VETO": 4,
}

func (x VoteOption) String() string {
	return proto.EnumName(VoteOption_name, int32(x))
}

func (VoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{0}
}

type VoteResult int32

const (
	Unknown            VoteResult = 0
	Passed             VoteResult = 1
	Rejected           VoteResult = 2
	RejectedWithVeto   VoteResult = 3
	Pending            VoteResult = 4
	QuorumNotReached   VoteResult = 5
	Enactment          VoteResult = 6
	PassedWithExecFail VoteResult = 7
)

var VoteResult_name = map[int32]string{
	0: "VOTE_RESULT_UNKNOWN",
	1: "VOTE_RESULT_PASSED",
	2: "VOTE_RESULT_REJECTED",
	3: "VOTE_RESULT_REJECTED_WITH_VETO",
	4: "VOTE_PENDING",
	5: "VOTE_RESULT_QUORUM_NOT_REACHED",
	6: "VOTE_RESULT_ENACTMENT",
	7: "VOTE_RESULT_PASSED_WITH_EXEC_FAIL",
}

var VoteResult_value = map[string]int32{
	"VOTE_RESULT_UNKNOWN":               0,
	"VOTE_RESULT_PASSED":                1,
	"VOTE_RESULT_REJECTED":              2,
	"VOTE_RESULT_REJECTED_WITH_VETO":    3,
	"VOTE_PENDING":                      4,
	"VOTE_RESULT_QUORUM_NOT_REACHED":    5,
	"VOTE_RESULT_ENACTMENT":             6,
	"VOTE_RESULT_PASSED_WITH_EXEC_FAIL": 7,
}

func (x VoteResult) String() string {
	return proto.EnumName(VoteResult_name, int32(x))
}

func (VoteResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{1}
}

type Vote struct {
	ProposalId uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option     VoteOption                                    `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.VoteOption" json:"option,omitempty"`
	Slash      uint64                                        `protobuf:"varint,4,opt,name=slash,proto3" json:"slash,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *Vote) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *Vote) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return OptionEmpty
}

func (m *Vote) GetSlash() uint64 {
	if m != nil {
		return m.Slash
	}
	return 0
}

type MsgVoteProposal struct {
	ProposalId uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter      github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option     VoteOption                                    `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.VoteOption" json:"option,omitempty"`
	Slash      uint64                                        `protobuf:"varint,4,opt,name=slash,proto3" json:"slash,omitempty"`
}

func (m *MsgVoteProposal) Reset()         { *m = MsgVoteProposal{} }
func (m *MsgVoteProposal) String() string { return proto.CompactTextString(m) }
func (*MsgVoteProposal) ProtoMessage()    {}
func (*MsgVoteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{1}
}
func (m *MsgVoteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteProposal.Merge(m, src)
}
func (m *MsgVoteProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteProposal proto.InternalMessageInfo

func (m *MsgVoteProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *MsgVoteProposal) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *MsgVoteProposal) GetOption() VoteOption {
	if m != nil {
		return m.Option
	}
	return OptionEmpty
}

func (m *MsgVoteProposal) GetSlash() uint64 {
	if m != nil {
		return m.Slash
	}
	return 0
}

type Proposal struct {
	ProposalId                 uint64     `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Title                      string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description                string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Content                    *types.Any `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	SubmitTime                 time.Time  `protobuf:"bytes,5,opt,name=submit_time,json=submitTime,proto3,stdtime" json:"submit_time" yaml:"submit_time"`
	VotingEndTime              time.Time  `protobuf:"bytes,6,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
	EnactmentEndTime           time.Time  `protobuf:"bytes,7,opt,name=enactment_end_time,json=enactmentEndTime,proto3,stdtime" json:"enactment_end_time" yaml:"enactment_end_time"`
	MinVotingEndBlockHeight    int64      `protobuf:"varint,8,opt,name=min_voting_end_block_height,json=minVotingEndBlockHeight,proto3" json:"min_voting_end_block_height,omitempty"`
	MinEnactmentEndBlockHeight int64      `protobuf:"varint,9,opt,name=min_enactment_end_block_height,json=minEnactmentEndBlockHeight,proto3" json:"min_enactment_end_block_height,omitempty"`
	Result                     VoteResult `protobuf:"varint,10,opt,name=result,proto3,enum=kira.gov.VoteResult" json:"result,omitempty"`
	ExecResult                 string     `protobuf:"bytes,11,opt,name=exec_result,json=execResult,proto3" json:"exec_result,omitempty"`
}

func (m *Proposal) Reset()         { *m = Proposal{} }
func (m *Proposal) String() string { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()    {}
func (*Proposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{2}
}
func (m *Proposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proposal.Merge(m, src)
}
func (m *Proposal) XXX_Size() int {
	return m.Size()
}
func (m *Proposal) XXX_DiscardUnknown() {
	xxx_messageInfo_Proposal.DiscardUnknown(m)
}

var xxx_messageInfo_Proposal proto.InternalMessageInfo

type WhitelistAccountPermissionProposal struct {
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission PermValue                                     `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *WhitelistAccountPermissionProposal) Reset()         { *m = WhitelistAccountPermissionProposal{} }
func (m *WhitelistAccountPermissionProposal) String() string { return proto.CompactTextString(m) }
func (*WhitelistAccountPermissionProposal) ProtoMessage()    {}
func (*WhitelistAccountPermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{3}
}
func (m *WhitelistAccountPermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistAccountPermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistAccountPermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistAccountPermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistAccountPermissionProposal.Merge(m, src)
}
func (m *WhitelistAccountPermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistAccountPermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistAccountPermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistAccountPermissionProposal proto.InternalMessageInfo

func (m *WhitelistAccountPermissionProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WhitelistAccountPermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type BlacklistAccountPermissionProposal struct {
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission PermValue                                     `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *BlacklistAccountPermissionProposal) Reset()         { *m = BlacklistAccountPermissionProposal{} }
func (m *BlacklistAccountPermissionProposal) String() string { return proto.CompactTextString(m) }
func (*BlacklistAccountPermissionProposal) ProtoMessage()    {}
func (*BlacklistAccountPermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{4}
}
func (m *BlacklistAccountPermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistAccountPermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistAccountPermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistAccountPermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistAccountPermissionProposal.Merge(m, src)
}
func (m *BlacklistAccountPermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistAccountPermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistAccountPermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistAccountPermissionProposal proto.InternalMessageInfo

func (m *BlacklistAccountPermissionProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *BlacklistAccountPermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type RemoveWhitelistedAccountPermissionProposal struct {
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission PermValue                                     `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *RemoveWhitelistedAccountPermissionProposal) Reset() {
	*m = RemoveWhitelistedAccountPermissionProposal{}
}
func (m *RemoveWhitelistedAccountPermissionProposal) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveWhitelistedAccountPermissionProposal) ProtoMessage() {}
func (*RemoveWhitelistedAccountPermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{5}
}
func (m *RemoveWhitelistedAccountPermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWhitelistedAccountPermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWhitelistedAccountPermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWhitelistedAccountPermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWhitelistedAccountPermissionProposal.Merge(m, src)
}
func (m *RemoveWhitelistedAccountPermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWhitelistedAccountPermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWhitelistedAccountPermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWhitelistedAccountPermissionProposal proto.InternalMessageInfo

func (m *RemoveWhitelistedAccountPermissionProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *RemoveWhitelistedAccountPermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type RemoveBlacklistedAccountPermissionProposal struct {
	Address    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Permission PermValue                                     `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *RemoveBlacklistedAccountPermissionProposal) Reset() {
	*m = RemoveBlacklistedAccountPermissionProposal{}
}
func (m *RemoveBlacklistedAccountPermissionProposal) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveBlacklistedAccountPermissionProposal) ProtoMessage() {}
func (*RemoveBlacklistedAccountPermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{6}
}
func (m *RemoveBlacklistedAccountPermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBlacklistedAccountPermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBlacklistedAccountPermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBlacklistedAccountPermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBlacklistedAccountPermissionProposal.Merge(m, src)
}
func (m *RemoveBlacklistedAccountPermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBlacklistedAccountPermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBlacklistedAccountPermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBlacklistedAccountPermissionProposal proto.InternalMessageInfo

func (m *RemoveBlacklistedAccountPermissionProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *RemoveBlacklistedAccountPermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type AssignRoleToAccountProposal struct {
	Address        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	RoleIdentifier string                                        `protobuf:"bytes,2,opt,name=role_identifier,json=roleIdentifier,proto3" json:"role_identifier,omitempty"`
}

func (m *AssignRoleToAccountProposal) Reset()         { *m = AssignRoleToAccountProposal{} }
func (m *AssignRoleToAccountProposal) String() string { return proto.CompactTextString(m) }
func (*AssignRoleToAccountProposal) ProtoMessage()    {}
func (*AssignRoleToAccountProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{7}
}
func (m *AssignRoleToAccountProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssignRoleToAccountProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssignRoleToAccountProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssignRoleToAccountProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignRoleToAccountProposal.Merge(m, src)
}
func (m *AssignRoleToAccountProposal) XXX_Size() int {
	return m.Size()
}
func (m *AssignRoleToAccountProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignRoleToAccountProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AssignRoleToAccountProposal proto.InternalMessageInfo

func (m *AssignRoleToAccountProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AssignRoleToAccountProposal) GetRoleIdentifier() string {
	if m != nil {
		return m.RoleIdentifier
	}
	return ""
}

type UnassignRoleFromAccountProposal struct {
	Address        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	RoleIdentifier string                                        `protobuf:"bytes,2,opt,name=role_identifier,json=roleIdentifier,proto3" json:"role_identifier,omitempty"`
}

func (m *UnassignRoleFromAccountProposal) Reset()         { *m = UnassignRoleFromAccountProposal{} }
func (m *UnassignRoleFromAccountProposal) String() string { return proto.CompactTextString(m) }
func (*UnassignRoleFromAccountProposal) ProtoMessage()    {}
func (*UnassignRoleFromAccountProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{8}
}
func (m *UnassignRoleFromAccountProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnassignRoleFromAccountProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnassignRoleFromAccountProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnassignRoleFromAccountProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnassignRoleFromAccountProposal.Merge(m, src)
}
func (m *UnassignRoleFromAccountProposal) XXX_Size() int {
	return m.Size()
}
func (m *UnassignRoleFromAccountProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UnassignRoleFromAccountProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UnassignRoleFromAccountProposal proto.InternalMessageInfo

func (m *UnassignRoleFromAccountProposal) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *UnassignRoleFromAccountProposal) GetRoleIdentifier() string {
	if m != nil {
		return m.RoleIdentifier
	}
	return ""
}

type WhitelistRolePermissionProposal struct {
	RoleIdentifier string    `protobuf:"bytes,1,opt,name=role_identifier,json=roleIdentifier,proto3" json:"role_identifier,omitempty"`
	Permission     PermValue `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *WhitelistRolePermissionProposal) Reset()         { *m = WhitelistRolePermissionProposal{} }
func (m *WhitelistRolePermissionProposal) String() string { return proto.CompactTextString(m) }
func (*WhitelistRolePermissionProposal) ProtoMessage()    {}
func (*WhitelistRolePermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{9}
}
func (m *WhitelistRolePermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistRolePermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistRolePermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistRolePermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistRolePermissionProposal.Merge(m, src)
}
func (m *WhitelistRolePermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistRolePermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistRolePermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistRolePermissionProposal proto.InternalMessageInfo

func (m *WhitelistRolePermissionProposal) GetRoleIdentifier() string {
	if m != nil {
		return m.RoleIdentifier
	}
	return ""
}

func (m *WhitelistRolePermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type BlacklistRolePermissionProposal struct {
	RoleIdentifier string    `protobuf:"bytes,1,opt,name=role_identifier,json=roleIdentifier,proto3" json:"role_identifier,omitempty"`
	Permission     PermValue `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *BlacklistRolePermissionProposal) Reset()         { *m = BlacklistRolePermissionProposal{} }
func (m *BlacklistRolePermissionProposal) String() string { return proto.CompactTextString(m) }
func (*BlacklistRolePermissionProposal) ProtoMessage()    {}
func (*BlacklistRolePermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{10}
}
func (m *BlacklistRolePermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlacklistRolePermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlacklistRolePermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlacklistRolePermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlacklistRolePermissionProposal.Merge(m, src)
}
func (m *BlacklistRolePermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *BlacklistRolePermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BlacklistRolePermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BlacklistRolePermissionProposal proto.InternalMessageInfo

func (m *BlacklistRolePermissionProposal) GetRoleIdentifier() string {
	if m != nil {
		return m.RoleIdentifier
	}
	return ""
}

func (m *BlacklistRolePermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type RemoveWhitelistedRolePermissionProposal struct {
	RoleSid    string    `protobuf:"bytes,1,opt,name=role_sid,json=roleSid,proto3" json:"role_sid,omitempty"`
	Permission PermValue `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *RemoveWhitelistedRolePermissionProposal) Reset() {
	*m = RemoveWhitelistedRolePermissionProposal{}
}
func (m *RemoveWhitelistedRolePermissionProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveWhitelistedRolePermissionProposal) ProtoMessage()    {}
func (*RemoveWhitelistedRolePermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{11}
}
func (m *RemoveWhitelistedRolePermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveWhitelistedRolePermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveWhitelistedRolePermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveWhitelistedRolePermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveWhitelistedRolePermissionProposal.Merge(m, src)
}
func (m *RemoveWhitelistedRolePermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveWhitelistedRolePermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveWhitelistedRolePermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveWhitelistedRolePermissionProposal proto.InternalMessageInfo

func (m *RemoveWhitelistedRolePermissionProposal) GetRoleSid() string {
	if m != nil {
		return m.RoleSid
	}
	return ""
}

func (m *RemoveWhitelistedRolePermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type RemoveBlacklistedRolePermissionProposal struct {
	RoleSid    string    `protobuf:"bytes,1,opt,name=role_sid,json=roleSid,proto3" json:"role_sid,omitempty"`
	Permission PermValue `protobuf:"varint,2,opt,name=permission,proto3,enum=kira.gov.PermValue" json:"permission,omitempty"`
}

func (m *RemoveBlacklistedRolePermissionProposal) Reset() {
	*m = RemoveBlacklistedRolePermissionProposal{}
}
func (m *RemoveBlacklistedRolePermissionProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveBlacklistedRolePermissionProposal) ProtoMessage()    {}
func (*RemoveBlacklistedRolePermissionProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{12}
}
func (m *RemoveBlacklistedRolePermissionProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveBlacklistedRolePermissionProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveBlacklistedRolePermissionProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveBlacklistedRolePermissionProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBlacklistedRolePermissionProposal.Merge(m, src)
}
func (m *RemoveBlacklistedRolePermissionProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveBlacklistedRolePermissionProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBlacklistedRolePermissionProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBlacklistedRolePermissionProposal proto.InternalMessageInfo

func (m *RemoveBlacklistedRolePermissionProposal) GetRoleSid() string {
	if m != nil {
		return m.RoleSid
	}
	return ""
}

func (m *RemoveBlacklistedRolePermissionProposal) GetPermission() PermValue {
	if m != nil {
		return m.Permission
	}
	return PermZero
}

type SetNetworkPropertyProposal struct {
	NetworkProperty NetworkProperty      `protobuf:"varint,1,opt,name=network_property,json=networkProperty,proto3,enum=kira.gov.NetworkProperty" json:"network_property,omitempty"`
	Value           NetworkPropertyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (m *SetNetworkPropertyProposal) Reset()         { *m = SetNetworkPropertyProposal{} }
func (m *SetNetworkPropertyProposal) String() string { return proto.CompactTextString(m) }
func (*SetNetworkPropertyProposal) ProtoMessage()    {}
func (*SetNetworkPropertyProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{13}
}
func (m *SetNetworkPropertyProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetNetworkPropertyProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetNetworkPropertyProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetNetworkPropertyProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetNetworkPropertyProposal.Merge(m, src)
}
func (m *SetNetworkPropertyProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetNetworkPropertyProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetNetworkPropertyProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetNetworkPropertyProposal proto.InternalMessageInfo

func (m *SetNetworkPropertyProposal) GetNetworkProperty() NetworkProperty {
	if m != nil {
		return m.NetworkProperty
	}
	return MinTxFee
}

func (m *SetNetworkPropertyProposal) GetValue() NetworkPropertyValue {
	if m != nil {
		return m.Value
	}
	return NetworkPropertyValue{}
}

type UpsertDataRegistryProposal struct {
	Key       string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Hash      string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Reference string `protobuf:"bytes,3,opt,name=reference,proto3" json:"reference,omitempty"`
	Encoding  string `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Size_     uint64 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *UpsertDataRegistryProposal) Reset()         { *m = UpsertDataRegistryProposal{} }
func (m *UpsertDataRegistryProposal) String() string { return proto.CompactTextString(m) }
func (*UpsertDataRegistryProposal) ProtoMessage()    {}
func (*UpsertDataRegistryProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{14}
}
func (m *UpsertDataRegistryProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpsertDataRegistryProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpsertDataRegistryProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpsertDataRegistryProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpsertDataRegistryProposal.Merge(m, src)
}
func (m *UpsertDataRegistryProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpsertDataRegistryProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpsertDataRegistryProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpsertDataRegistryProposal proto.InternalMessageInfo

func (m *UpsertDataRegistryProposal) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UpsertDataRegistryProposal) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *UpsertDataRegistryProposal) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *UpsertDataRegistryProposal) GetEncoding() string {
	if m != nil {
		return m.Encoding
	}
	return ""
}

func (m *UpsertDataRegistryProposal) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type SetPoorNetworkMessagesProposal struct {
	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *SetPoorNetworkMessagesProposal) Reset()         { *m = SetPoorNetworkMessagesProposal{} }
func (m *SetPoorNetworkMessagesProposal) String() string { return proto.CompactTextString(m) }
func (*SetPoorNetworkMessagesProposal) ProtoMessage()    {}
func (*SetPoorNetworkMessagesProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{15}
}
func (m *SetPoorNetworkMessagesProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetPoorNetworkMessagesProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetPoorNetworkMessagesProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetPoorNetworkMessagesProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPoorNetworkMessagesProposal.Merge(m, src)
}
func (m *SetPoorNetworkMessagesProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetPoorNetworkMessagesProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPoorNetworkMessagesProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetPoorNetworkMessagesProposal proto.InternalMessageInfo

func (m *SetPoorNetworkMessagesProposal) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type CreateRoleProposal struct {
	RoleSid                string      `protobuf:"bytes,1,opt,name=role_sid,json=roleSid,proto3" json:"role_sid,omitempty"`
	RoleDescription        string      `protobuf:"bytes,2,opt,name=role_description,json=roleDescription,proto3" json:"role_description,omitempty"`
	WhitelistedPermissions []PermValue `protobuf:"varint,3,rep,packed,name=whitelisted_permissions,json=whitelistedPermissions,proto3,enum=kira.gov.PermValue" json:"whitelisted_permissions,omitempty"`
	BlacklistedPermissions []PermValue `protobuf:"varint,4,rep,packed,name=blacklisted_permissions,json=blacklistedPermissions,proto3,enum=kira.gov.PermValue" json:"blacklisted_permissions,omitempty"`
}

func (m *CreateRoleProposal) Reset()         { *m = CreateRoleProposal{} }
func (m *CreateRoleProposal) String() string { return proto.CompactTextString(m) }
func (*CreateRoleProposal) ProtoMessage()    {}
func (*CreateRoleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{16}
}
func (m *CreateRoleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRoleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRoleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRoleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRoleProposal.Merge(m, src)
}
func (m *CreateRoleProposal) XXX_Size() int {
	return m.Size()
}
func (m *CreateRoleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRoleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRoleProposal proto.InternalMessageInfo

func (m *CreateRoleProposal) GetRoleSid() string {
	if m != nil {
		return m.RoleSid
	}
	return ""
}

func (m *CreateRoleProposal) GetRoleDescription() string {
	if m != nil {
		return m.RoleDescription
	}
	return ""
}

func (m *CreateRoleProposal) GetWhitelistedPermissions() []PermValue {
	if m != nil {
		return m.WhitelistedPermissions
	}
	return nil
}

func (m *CreateRoleProposal) GetBlacklistedPermissions() []PermValue {
	if m != nil {
		return m.BlacklistedPermissions
	}
	return nil
}

type RemoveRoleProposal struct {
	RoleSid string `protobuf:"bytes,1,opt,name=role_sid,json=roleSid,proto3" json:"role_sid,omitempty"`
}

func (m *RemoveRoleProposal) Reset()         { *m = RemoveRoleProposal{} }
func (m *RemoveRoleProposal) String() string { return proto.CompactTextString(m) }
func (*RemoveRoleProposal) ProtoMessage()    {}
func (*RemoveRoleProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{17}
}
func (m *RemoveRoleProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveRoleProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveRoleProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveRoleProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveRoleProposal.Merge(m, src)
}
func (m *RemoveRoleProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveRoleProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveRoleProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveRoleProposal proto.InternalMessageInfo

func (m *RemoveRoleProposal) GetRoleSid() string {
	if m != nil {
		return m.RoleSid
	}
	return ""
}

type SetProposalDurationsProposal struct {
	TypeofProposals   []string `protobuf:"bytes,1,rep,name=typeof_proposals,json=typeofProposals,proto3" json:"typeof_proposals,omitempty"`
	ProposalDurations []uint64 `protobuf:"varint,2,rep,packed,name=proposal_durations,json=proposalDurations,proto3" json:"proposal_durations,omitempty"`
}

func (m *SetProposalDurationsProposal) Reset()         { *m = SetProposalDurationsProposal{} }
func (m *SetProposalDurationsProposal) String() string { return proto.CompactTextString(m) }
func (*SetProposalDurationsProposal) ProtoMessage()    {}
func (*SetProposalDurationsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{18}
}
func (m *SetProposalDurationsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetProposalDurationsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetProposalDurationsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetProposalDurationsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProposalDurationsProposal.Merge(m, src)
}
func (m *SetProposalDurationsProposal) XXX_Size() int {
	return m.Size()
}
func (m *SetProposalDurationsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProposalDurationsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SetProposalDurationsProposal proto.InternalMessageInfo

func (m *SetProposalDurationsProposal) GetTypeofProposals() []string {
	if m != nil {
		return m.TypeofProposals
	}
	return nil
}

func (m *SetProposalDurationsProposal) GetProposalDurations() []uint64 {
	if m != nil {
		return m.ProposalDurations
	}
	return nil
}

type ProposalResetWholeCouncilorRank struct {
	Proposer    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty"`
	Description string                                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (m *ProposalResetWholeCouncilorRank) Reset()         { *m = ProposalResetWholeCouncilorRank{} }
func (m *ProposalResetWholeCouncilorRank) String() string { return proto.CompactTextString(m) }
func (*ProposalResetWholeCouncilorRank) ProtoMessage()    {}
func (*ProposalResetWholeCouncilorRank) Descriptor() ([]byte, []int) {
	return fileDescriptor_e108f9b9b2d46b19, []int{19}
}
func (m *ProposalResetWholeCouncilorRank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalResetWholeCouncilorRank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalResetWholeCouncilorRank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalResetWholeCouncilorRank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalResetWholeCouncilorRank.Merge(m, src)
}
func (m *ProposalResetWholeCouncilorRank) XXX_Size() int {
	return m.Size()
}
func (m *ProposalResetWholeCouncilorRank) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalResetWholeCouncilorRank.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalResetWholeCouncilorRank proto.InternalMessageInfo

func (m *ProposalResetWholeCouncilorRank) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *ProposalResetWholeCouncilorRank) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterEnum("kira.gov.VoteOption", VoteOption_name, VoteOption_value)
	proto.RegisterEnum("kira.gov.VoteResult", VoteResult_name, VoteResult_value)
	proto.RegisterType((*Vote)(nil), "kira.gov.Vote")
	proto.RegisterType((*MsgVoteProposal)(nil), "kira.gov.MsgVoteProposal")
	proto.RegisterType((*Proposal)(nil), "kira.gov.Proposal")
	proto.RegisterType((*WhitelistAccountPermissionProposal)(nil), "kira.gov.WhitelistAccountPermissionProposal")
	proto.RegisterType((*BlacklistAccountPermissionProposal)(nil), "kira.gov.BlacklistAccountPermissionProposal")
	proto.RegisterType((*RemoveWhitelistedAccountPermissionProposal)(nil), "kira.gov.RemoveWhitelistedAccountPermissionProposal")
	proto.RegisterType((*RemoveBlacklistedAccountPermissionProposal)(nil), "kira.gov.RemoveBlacklistedAccountPermissionProposal")
	proto.RegisterType((*AssignRoleToAccountProposal)(nil), "kira.gov.AssignRoleToAccountProposal")
	proto.RegisterType((*UnassignRoleFromAccountProposal)(nil), "kira.gov.UnassignRoleFromAccountProposal")
	proto.RegisterType((*WhitelistRolePermissionProposal)(nil), "kira.gov.WhitelistRolePermissionProposal")
	proto.RegisterType((*BlacklistRolePermissionProposal)(nil), "kira.gov.BlacklistRolePermissionProposal")
	proto.RegisterType((*RemoveWhitelistedRolePermissionProposal)(nil), "kira.gov.RemoveWhitelistedRolePermissionProposal")
	proto.RegisterType((*RemoveBlacklistedRolePermissionProposal)(nil), "kira.gov.RemoveBlacklistedRolePermissionProposal")
	proto.RegisterType((*SetNetworkPropertyProposal)(nil), "kira.gov.SetNetworkPropertyProposal")
	proto.RegisterType((*UpsertDataRegistryProposal)(nil), "kira.gov.UpsertDataRegistryProposal")
	proto.RegisterType((*SetPoorNetworkMessagesProposal)(nil), "kira.gov.SetPoorNetworkMessagesProposal")
	proto.RegisterType((*CreateRoleProposal)(nil), "kira.gov.CreateRoleProposal")
	proto.RegisterType((*RemoveRoleProposal)(nil), "kira.gov.RemoveRoleProposal")
	proto.RegisterType((*SetProposalDurationsProposal)(nil), "kira.gov.SetProposalDurationsProposal")
	proto.RegisterType((*ProposalResetWholeCouncilorRank)(nil), "kira.gov.ProposalResetWholeCouncilorRank")
}

func init() { proto.RegisterFile("kira/gov/proposal.proto", fileDescriptor_e108f9b9b2d46b19) }

var fileDescriptor_e108f9b9b2d46b19 = []byte{
	// 1570 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x58, 0x4d, 0x8c, 0x23, 0x47,
	0x15, 0x9e, 0x1e, 0x7b, 0x66, 0xec, 0xe7, 0xdd, 0x71, 0xa7, 0x76, 0xd8, 0xf5, 0x76, 0x82, 0xdd,
	0xb1, 0x08, 0x99, 0xac, 0x76, 0x6d, 0x31, 0xb9, 0xa0, 0x25, 0x08, 0xfc, 0xd3, 0x9b, 0x35, 0xd9,
	0xb1, 0x9d, 0xb6, 0x3d, 0x43, 0x40, 0xa8, 0xd5, 0xd3, 0x5d, 0x63, 0x17, 0x76, 0x77, 0x59, 0x5d,
	0xe5, 0xd9, 0x35, 0x27, 0x6e, 0x44, 0x3e, 0xad, 0xb8, 0x5b, 0x0a, 0xe2, 0x8c, 0xb8, 0x44, 0x1c,
	0xb8, 0x70, 0x0d, 0x9c, 0x02, 0x27, 0x4e, 0x0b, 0xda, 0x95, 0x10, 0xe7, 0x1c, 0x39, 0xa1, 0xee,
	0xea, 0x6e, 0xf7, 0x8c, 0x67, 0xc9, 0x82, 0x22, 0x60, 0x73, 0x9a, 0xae, 0x7a, 0xdf, 0xfb, 0xde,
	0xf7, 0xaa, 0x5e, 0xd5, 0xbc, 0x32, 0xdc, 0x18, 0x13, 0xcf, 0xac, 0x0e, 0xe9, 0x59, 0x75, 0xea,
	0xd1, 0x29, 0x65, 0xe6, 0xa4, 0x32, 0xf5, 0x28, 0xa7, 0x28, 0xe3, 0x1b, 0x2a, 0x43, 0x7a, 0xa6,
	0xec, 0x0d, 0xe9, 0x90, 0x06, 0x93, 0x55, 0xff, 0x4b, 0xd8, 0x95, 0xd2, 0x90, 0xd2, 0xe1, 0x04,
	0x57, 0x83, 0xd1, 0xc9, 0xec, 0xb4, 0xca, 0x89, 0x83, 0x19, 0x37, 0x9d, 0x69, 0x08, 0xb8, 0x79,
	0x11, 0x60, 0xba, 0xf3, 0xc8, 0x64, 0x51, 0xe6, 0x50, 0x66, 0x08, 0x52, 0x31, 0x08, 0x4d, 0xd7,
	0x62, 0x3d, 0x1e, 0x9d, 0xe0, 0x08, 0xbf, 0x12, 0x89, 0x3d, 0x87, 0x30, 0x46, 0xa8, 0x1b, 0x9a,
	0x5e, 0x8f, 0x4d, 0x2e, 0xe6, 0x0f, 0xa9, 0x37, 0xf6, 0x49, 0xa7, 0xd8, 0xe3, 0x04, 0x87, 0x94,
	0xe5, 0x8f, 0x25, 0x48, 0x1f, 0x51, 0x8e, 0x51, 0x09, 0x72, 0x51, 0x92, 0x06, 0xb1, 0x0b, 0x92,
	0x2a, 0xed, 0xa7, 0x75, 0x88, 0xa6, 0x5a, 0x36, 0x7a, 0x17, 0xb6, 0xce, 0x28, 0xc7, 0x5e, 0x61,
	0x53, 0x95, 0xf6, 0xaf, 0xd4, 0xbf, 0xf1, 0x8f, 0x27, 0xa5, 0x3b, 0x43, 0xc2, 0x47, 0xb3, 0x93,
	0x8a, 0x45, 0x9d, 0x50, 0x68, 0xf8, 0xe7, 0x0e, 0xb3, 0xc7, 0x55, 0x3e, 0x9f, 0x62, 0x56, 0xa9,
	0x59, 0x56, 0xcd, 0xb6, 0x3d, 0xcc, 0x98, 0x2e, 0xfc, 0xd1, 0x6d, 0xd8, 0xa6, 0x53, 0x4e, 0xa8,
	0x5b, 0x48, 0xa9, 0xd2, 0xfe, 0xee, 0xc1, 0x5e, 0x25, 0x5a, 0xcd, 0x8a, 0xaf, 0xa4, 0x13, 0xd8,
	0xf4, 0x10, 0x83, 0xf6, 0x60, 0x8b, 0x4d, 0x4c, 0x36, 0x2a, 0xa4, 0x03, 0x45, 0x62, 0x50, 0xfe,
	0x9d, 0x04, 0xf9, 0x43, 0x36, 0xf4, 0xf1, 0xdd, 0x50, 0xe2, 0x4b, 0x96, 0xc1, 0xaf, 0xb6, 0x20,
	0xf3, 0xe2, 0xd2, 0xf7, 0x60, 0x8b, 0x13, 0x3e, 0xc1, 0x81, 0xf4, 0xac, 0x2e, 0x06, 0x48, 0x85,
	0x9c, 0x8d, 0x99, 0xe5, 0x91, 0x95, 0x98, 0xac, 0x9e, 0x9c, 0x42, 0xdf, 0x82, 0x1d, 0x8b, 0xba,
	0x1c, 0xbb, 0x3c, 0x88, 0x9e, 0x3b, 0xd8, 0xab, 0x88, 0xca, 0xab, 0x44, 0x95, 0x57, 0xa9, 0xb9,
	0xf3, 0x7a, 0xee, 0x0f, 0x1f, 0xdf, 0xd9, 0x69, 0x08, 0xa0, 0x1e, 0x79, 0xa0, 0x1f, 0x42, 0x8e,
	0xcd, 0x4e, 0x1c, 0xc2, 0x0d, 0xbf, 0x7c, 0x0b, 0x5b, 0x01, 0x81, 0xb2, 0x46, 0xd0, 0x8f, 0x6a,
	0xbb, 0x5e, 0xfc, 0xe4, 0x49, 0x69, 0xe3, 0xb3, 0x27, 0x25, 0x34, 0x37, 0x9d, 0xc9, 0xdd, 0x72,
	0xc2, 0xb9, 0xfc, 0xf8, 0x2f, 0x25, 0x49, 0x07, 0x31, 0xe3, 0x3b, 0xa0, 0x53, 0xc8, 0x9f, 0x51,
	0x4e, 0xdc, 0xa1, 0x81, 0x5d, 0x5b, 0x04, 0xd8, 0xfe, 0xdc, 0x00, 0xe5, 0x30, 0xc0, 0x75, 0x11,
	0xe0, 0x02, 0x81, 0x08, 0x72, 0x55, 0xcc, 0x6a, 0xae, 0x1d, 0xc4, 0xa1, 0x80, 0xb0, 0x6b, 0x5a,
	0xdc, 0xc1, 0x2e, 0x5f, 0x85, 0xda, 0xf9, 0xdc, 0x50, 0x6f, 0x84, 0xa1, 0x6e, 0x8a, 0x50, 0xeb,
	0x1c, 0x22, 0x9a, 0x1c, 0x1b, 0xa2, 0x80, 0xef, 0xc0, 0xab, 0x0e, 0x71, 0x8d, 0x84, 0xb6, 0x93,
	0x09, 0xb5, 0xc6, 0xc6, 0x08, 0x93, 0xe1, 0x88, 0x17, 0x32, 0xaa, 0xb4, 0x9f, 0xd2, 0x6f, 0x38,
	0xc4, 0x3d, 0x8a, 0x74, 0xd6, 0x7d, 0xfb, 0xfd, 0xc0, 0x8c, 0xea, 0x50, 0xf4, 0xbd, 0xcf, 0x87,
	0x3b, 0x47, 0x90, 0x0d, 0x08, 0x14, 0x87, 0xb8, 0x5a, 0x22, 0x74, 0x92, 0xe3, 0x36, 0x6c, 0x7b,
	0x98, 0xcd, 0x26, 0xbc, 0x00, 0x97, 0x95, 0xa7, 0x1e, 0xd8, 0xf4, 0x10, 0xe3, 0xd7, 0x1e, 0x7e,
	0x84, 0x2d, 0x23, 0x74, 0xc9, 0x05, 0x45, 0x04, 0xfe, 0x94, 0x00, 0xde, 0x4d, 0x7f, 0xf8, 0x51,
	0x69, 0xa3, 0xfc, 0x7b, 0x09, 0xca, 0xc7, 0x23, 0xc2, 0xf1, 0x84, 0x30, 0x5e, 0xb3, 0x2c, 0x3a,
	0x73, 0x79, 0x37, 0xbe, 0x70, 0xe2, 0x4a, 0xfe, 0x11, 0xec, 0x98, 0xe2, 0xb0, 0x04, 0x55, 0x7c,
	0xa5, 0xde, 0xf8, 0xec, 0x49, 0x69, 0x57, 0xac, 0x61, 0x68, 0x28, 0xff, 0xfb, 0xe7, 0x2e, 0xe2,
	0x44, 0x6f, 0x03, 0xac, 0x6e, 0xb9, 0xe0, 0x30, 0xec, 0x1e, 0x5c, 0x5b, 0xa5, 0xe7, 0x0b, 0x3a,
	0x32, 0x27, 0x33, 0xac, 0x27, 0x60, 0x77, 0xf3, 0x7f, 0xff, 0xa8, 0x24, 0xfd, 0x69, 0x55, 0xe1,
	0x41, 0x2e, 0xf5, 0x89, 0x69, 0x8d, 0xbf, 0x04, 0xb9, 0xfc, 0x51, 0x82, 0x5b, 0x3a, 0x76, 0xe8,
	0x19, 0x8e, 0x77, 0x07, 0xdb, 0x5f, 0x9a, 0x9c, 0xe2, 0x5d, 0x7a, 0xe9, 0x73, 0xfa, 0x8d, 0x04,
	0xaf, 0xd6, 0x18, 0x23, 0x43, 0x57, 0xa7, 0x13, 0xdc, 0xa7, 0x51, 0x3a, 0xff, 0xa5, 0x24, 0xde,
	0x84, 0xbc, 0xdf, 0x33, 0x18, 0xc4, 0xc6, 0x2e, 0x27, 0xa7, 0x24, 0xfc, 0x2f, 0x98, 0xd5, 0x77,
	0xfd, 0xe9, 0x56, 0x3c, 0xbb, 0x2e, 0xfc, 0xb7, 0x12, 0x94, 0x06, 0xae, 0x19, 0x4b, 0xbf, 0xe7,
	0x51, 0xe7, 0xa5, 0x11, 0xff, 0x58, 0x82, 0x52, 0x7c, 0x2e, 0x7c, 0xf5, 0x97, 0x94, 0xcf, 0x25,
	0xec, 0xd2, 0x65, 0xec, 0x5f, 0x50, 0x21, 0xf8, 0x92, 0xe2, 0xb2, 0xfe, 0xff, 0x90, 0xb4, 0x90,
	0xe0, 0xcd, 0xb5, 0x3b, 0xe4, 0x39, 0xd2, 0x6e, 0x42, 0x26, 0x90, 0xc6, 0xc2, 0x3e, 0x25, 0xab,
	0xef, 0xf8, 0xe3, 0x1e, 0xb1, 0xbf, 0x70, 0x31, 0x89, 0xc3, 0xff, 0xbf, 0x12, 0xf3, 0x6b, 0x09,
	0x94, 0x1e, 0xe6, 0x6d, 0xd1, 0x3e, 0x77, 0x45, 0xf7, 0x3c, 0x8f, 0xe3, 0x37, 0x41, 0xbe, 0xd0,
	0x59, 0xcf, 0x03, 0x1d, 0xbb, 0x07, 0x37, 0x57, 0xa1, 0x2e, 0x38, 0xeb, 0x79, 0xf7, 0xfc, 0x04,
	0xba, 0x0b, 0x5b, 0x67, 0xbe, 0x94, 0x40, 0x65, 0xee, 0xa0, 0xf8, 0x5c, 0xd7, 0x40, 0x70, 0x3d,
	0xed, 0x77, 0x26, 0xba, 0x70, 0x59, 0x57, 0xfc, 0x0b, 0x09, 0x94, 0xc1, 0x94, 0x61, 0x8f, 0x37,
	0x4d, 0x6e, 0xea, 0x78, 0x48, 0x18, 0xf7, 0x56, 0x8a, 0x65, 0x48, 0x8d, 0xf1, 0x3c, 0x5c, 0x2c,
	0xff, 0x13, 0x21, 0x48, 0x8f, 0xfc, 0xee, 0x54, 0x9c, 0xa8, 0xe0, 0x1b, 0xbd, 0x06, 0x59, 0x0f,
	0x9f, 0x62, 0x0f, 0xbb, 0x16, 0x0e, 0xdb, 0xca, 0xd5, 0x04, 0x52, 0x20, 0x83, 0x5d, 0x8b, 0xda,
	0xc4, 0x1d, 0x06, 0x5d, 0x65, 0x56, 0x8f, 0xc7, 0x3e, 0x1b, 0x23, 0x3f, 0x11, 0xcd, 0x62, 0x5a,
	0x0f, 0xbe, 0xd7, 0x35, 0xbe, 0x03, 0xc5, 0x1e, 0xe6, 0x5d, 0x4a, 0xbd, 0x30, 0xc1, 0x43, 0xcc,
	0x98, 0x39, 0xc4, 0x2c, 0x96, 0xa9, 0x40, 0xc6, 0x09, 0xe7, 0x0a, 0x92, 0x9a, 0xf2, 0x43, 0x44,
	0xe3, 0xf2, 0xcf, 0x36, 0x01, 0x35, 0x3c, 0x6c, 0x72, 0x1c, 0x54, 0xc5, 0x0b, 0xd4, 0xc2, 0x5b,
	0x20, 0x07, 0xa6, 0x64, 0xb3, 0x2c, 0xd2, 0x0d, 0x8e, 0x59, 0x33, 0xd1, 0x30, 0x3f, 0x80, 0x1b,
	0x0f, 0x57, 0x67, 0xc0, 0x58, 0xd5, 0x06, 0x2b, 0xa4, 0xd4, 0xd4, 0xf3, 0x6a, 0xe8, 0x7a, 0xc2,
	0x67, 0x55, 0xa6, 0xcc, 0x67, 0x3b, 0x59, 0x15, 0xf1, 0x39, 0xb6, 0xf4, 0xbf, 0x60, 0x4b, 0xf8,
	0x24, 0xd8, 0xd6, 0xd7, 0xf1, 0xbb, 0x80, 0xc4, 0x49, 0x79, 0xc1, 0x85, 0x58, 0x67, 0x78, 0x04,
	0xaf, 0xf9, 0x3b, 0x11, 0xba, 0x36, 0x67, 0x9e, 0xe9, 0xaf, 0xc2, 0x6a, 0x1f, 0xde, 0x02, 0xd9,
	0xbf, 0x96, 0xe9, 0xa9, 0x11, 0x3d, 0x46, 0xa2, 0xfd, 0xc8, 0x8b, 0xf9, 0x08, 0xc9, 0xd0, 0x1d,
	0x40, 0xf1, 0x1b, 0xc6, 0x8e, 0x88, 0x0a, 0x9b, 0x6a, 0x6a, 0x3f, 0xad, 0xbf, 0x32, 0xbd, 0x18,
	0xa1, 0xfc, 0x73, 0x09, 0x4a, 0x91, 0xb3, 0x8e, 0x19, 0xe6, 0xc7, 0x23, 0x3a, 0xc1, 0x0d, 0x3a,
	0x73, 0x2d, 0x32, 0xa1, 0x9e, 0x6e, 0xba, 0x63, 0x74, 0x08, 0x19, 0xe1, 0x18, 0xde, 0x7f, 0xff,
	0xd1, 0x9b, 0x2d, 0xa6, 0xb8, 0xf8, 0x5c, 0xda, 0x5c, 0x7b, 0x2e, 0xdd, 0xfa, 0x9b, 0x04, 0xb0,
	0x7a, 0xc1, 0xa1, 0xdb, 0x70, 0xe3, 0xa8, 0xd3, 0xd7, 0x8c, 0x4e, 0xb7, 0xdf, 0xea, 0xb4, 0x8d,
	0x41, 0xbb, 0xd7, 0xd5, 0x1a, 0xad, 0x7b, 0x2d, 0xad, 0x29, 0x6f, 0x28, 0xf9, 0xc5, 0x52, 0xcd,
	0x09, 0xa0, 0xe6, 0x4c, 0xf9, 0x1c, 0x95, 0x21, 0x9f, 0x44, 0x7f, 0xa0, 0xf5, 0x64, 0x49, 0xb9,
	0xba, 0x58, 0xaa, 0x59, 0x81, 0xfa, 0x00, 0x33, 0x74, 0x0b, 0xae, 0x25, 0x31, 0xb5, 0x7a, 0xaf,
	0x5f, 0x6b, 0xb5, 0xe5, 0x4d, 0xe5, 0x95, 0xc5, 0x52, 0xbd, 0x2a, 0x70, 0xb5, 0x13, 0xc6, 0x4d,
	0xe2, 0x22, 0x15, 0x76, 0x93, 0xd8, 0x76, 0x47, 0x4e, 0x29, 0x57, 0x16, 0x4b, 0x35, 0x23, 0x60,
	0x6d, 0x8a, 0x0e, 0xa0, 0x70, 0x1e, 0x61, 0x1c, 0xb7, 0xfa, 0xf7, 0x8d, 0x23, 0xad, 0xdf, 0x91,
	0xd3, 0xca, 0xde, 0x62, 0xa9, 0xca, 0x11, 0xf6, 0x98, 0xf0, 0xd1, 0x11, 0xe6, 0x54, 0x49, 0x7f,
	0xf8, 0xcb, 0xe2, 0xc6, 0xad, 0x9f, 0xa6, 0x44, 0xa2, 0xa2, 0xc5, 0x47, 0x5f, 0x0b, 0x65, 0xe9,
	0x5a, 0x6f, 0xf0, 0xa0, 0x6f, 0x0c, 0xda, 0xef, 0xb5, 0x3b, 0xc7, 0x6d, 0x79, 0x43, 0xc9, 0x2d,
	0x96, 0xea, 0xce, 0xc0, 0x1d, 0xbb, 0xf4, 0xa1, 0x8b, 0xca, 0x80, 0x92, 0xa8, 0x6e, 0xad, 0xd7,
	0xd3, 0x9a, 0xb2, 0xa4, 0xc0, 0x62, 0xa9, 0x6e, 0x77, 0x4d, 0xc6, 0xb0, 0x8d, 0xbe, 0x0e, 0x7b,
	0x49, 0x8c, 0xae, 0x7d, 0x4f, 0x6b, 0xf4, 0xb5, 0xa6, 0xbc, 0x29, 0xa4, 0xeb, 0xf8, 0xc7, 0xd8,
	0xe2, 0xd8, 0x46, 0xdf, 0x84, 0xe2, 0x65, 0xb8, 0x44, 0x02, 0x29, 0x91, 0x40, 0xe4, 0x11, 0x25,
	0x80, 0xbe, 0x0a, 0x57, 0x02, 0xcf, 0xae, 0xd6, 0x6e, 0xb6, 0xda, 0xef, 0xca, 0x69, 0x21, 0xb2,
	0x8b, 0xdd, 0xe0, 0x02, 0xba, 0x40, 0xfc, 0xfe, 0xa0, 0xa3, 0x0f, 0x0e, 0x8d, 0x76, 0xc7, 0x8f,
	0x51, 0x6b, 0xdc, 0xd7, 0x9a, 0xf2, 0x96, 0x20, 0x7e, 0x7f, 0x46, 0xbd, 0x99, 0xd3, 0xa6, 0x5c,
	0xc7, 0xa6, 0x35, 0xc2, 0x36, 0xda, 0x87, 0xaf, 0x24, 0x3d, 0xb5, 0x76, 0xad, 0xd1, 0x3f, 0xd4,
	0xda, 0x7d, 0x79, 0x5b, 0xec, 0x62, 0xfc, 0xdc, 0x42, 0xdf, 0x86, 0xd7, 0xd7, 0x17, 0x42, 0x48,
	0xd7, 0xbe, 0xaf, 0x35, 0x8c, 0x7b, 0xb5, 0xd6, 0x03, 0x79, 0x47, 0xb9, 0xbe, 0x58, 0xaa, 0x48,
	0xac, 0x8b, 0xaf, 0x5e, 0x7b, 0x84, 0xad, 0x7b, 0x26, 0x99, 0x88, 0x2d, 0xa8, 0x7f, 0xe7, 0x93,
	0xa7, 0x45, 0xe9, 0xd3, 0xa7, 0x45, 0xe9, 0xaf, 0x4f, 0x8b, 0xd2, 0xe3, 0x67, 0xc5, 0x8d, 0x4f,
	0x9f, 0x15, 0x37, 0xfe, 0xfc, 0xac, 0xb8, 0xf1, 0x83, 0x37, 0x12, 0x05, 0xfe, 0x1e, 0xf1, 0xcc,
	0x06, 0xf5, 0x70, 0x95, 0xe1, 0xb1, 0x49, 0xaa, 0x8f, 0x82, 0x5f, 0x73, 0x82, 0x1a, 0x3f, 0xd9,
	0x0e, 0x5e, 0xad, 0x6f, 0xff, 0x33, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xe1, 0x8b, 0xb7, 0xa6, 0x12,
	0x00, 0x00,
}

func (this *WhitelistAccountPermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhitelistAccountPermissionProposal)
	if !ok {
		that2, ok := that.(WhitelistAccountPermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *BlacklistAccountPermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlacklistAccountPermissionProposal)
	if !ok {
		that2, ok := that.(BlacklistAccountPermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *RemoveWhitelistedAccountPermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveWhitelistedAccountPermissionProposal)
	if !ok {
		that2, ok := that.(RemoveWhitelistedAccountPermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *RemoveBlacklistedAccountPermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveBlacklistedAccountPermissionProposal)
	if !ok {
		that2, ok := that.(RemoveBlacklistedAccountPermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *AssignRoleToAccountProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AssignRoleToAccountProposal)
	if !ok {
		that2, ok := that.(AssignRoleToAccountProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.RoleIdentifier != that1.RoleIdentifier {
		return false
	}
	return true
}
func (this *UnassignRoleFromAccountProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnassignRoleFromAccountProposal)
	if !ok {
		that2, ok := that.(UnassignRoleFromAccountProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Address, that1.Address) {
		return false
	}
	if this.RoleIdentifier != that1.RoleIdentifier {
		return false
	}
	return true
}
func (this *WhitelistRolePermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WhitelistRolePermissionProposal)
	if !ok {
		that2, ok := that.(WhitelistRolePermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleIdentifier != that1.RoleIdentifier {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *BlacklistRolePermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BlacklistRolePermissionProposal)
	if !ok {
		that2, ok := that.(BlacklistRolePermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleIdentifier != that1.RoleIdentifier {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *RemoveWhitelistedRolePermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveWhitelistedRolePermissionProposal)
	if !ok {
		that2, ok := that.(RemoveWhitelistedRolePermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleSid != that1.RoleSid {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *RemoveBlacklistedRolePermissionProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveBlacklistedRolePermissionProposal)
	if !ok {
		that2, ok := that.(RemoveBlacklistedRolePermissionProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleSid != that1.RoleSid {
		return false
	}
	if this.Permission != that1.Permission {
		return false
	}
	return true
}
func (this *SetNetworkPropertyProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetNetworkPropertyProposal)
	if !ok {
		that2, ok := that.(SetNetworkPropertyProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NetworkProperty != that1.NetworkProperty {
		return false
	}
	if !this.Value.Equal(&that1.Value) {
		return false
	}
	return true
}
func (this *UpsertDataRegistryProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpsertDataRegistryProposal)
	if !ok {
		that2, ok := that.(UpsertDataRegistryProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Key != that1.Key {
		return false
	}
	if this.Hash != that1.Hash {
		return false
	}
	if this.Reference != that1.Reference {
		return false
	}
	if this.Encoding != that1.Encoding {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	return true
}
func (this *CreateRoleProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRoleProposal)
	if !ok {
		that2, ok := that.(CreateRoleProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleSid != that1.RoleSid {
		return false
	}
	if this.RoleDescription != that1.RoleDescription {
		return false
	}
	if len(this.WhitelistedPermissions) != len(that1.WhitelistedPermissions) {
		return false
	}
	for i := range this.WhitelistedPermissions {
		if this.WhitelistedPermissions[i] != that1.WhitelistedPermissions[i] {
			return false
		}
	}
	if len(this.BlacklistedPermissions) != len(that1.BlacklistedPermissions) {
		return false
	}
	for i := range this.BlacklistedPermissions {
		if this.BlacklistedPermissions[i] != that1.BlacklistedPermissions[i] {
			return false
		}
	}
	return true
}
func (this *RemoveRoleProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveRoleProposal)
	if !ok {
		that2, ok := that.(RemoveRoleProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RoleSid != that1.RoleSid {
		return false
	}
	return true
}
func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slash != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Slash))
		i--
		dAtA[i] = 0x20
	}
	if m.Option != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Slash != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Slash))
		i--
		dAtA[i] = 0x20
	}
	if m.Option != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Proposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExecResult) > 0 {
		i -= len(m.ExecResult)
		copy(dAtA[i:], m.ExecResult)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ExecResult)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Result != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x50
	}
	if m.MinEnactmentEndBlockHeight != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.MinEnactmentEndBlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.MinVotingEndBlockHeight != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.MinVotingEndBlockHeight))
		i--
		dAtA[i] = 0x40
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EnactmentEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EnactmentEndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintProposal(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintProposal(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x32
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.SubmitTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintProposal(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x2a
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistAccountPermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistAccountPermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistAccountPermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistAccountPermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistAccountPermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistAccountPermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWhitelistedAccountPermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWhitelistedAccountPermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWhitelistedAccountPermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBlacklistedAccountPermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBlacklistedAccountPermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBlacklistedAccountPermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssignRoleToAccountProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssignRoleToAccountProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssignRoleToAccountProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIdentifier) > 0 {
		i -= len(m.RoleIdentifier)
		copy(dAtA[i:], m.RoleIdentifier)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnassignRoleFromAccountProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnassignRoleFromAccountProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnassignRoleFromAccountProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleIdentifier) > 0 {
		i -= len(m.RoleIdentifier)
		copy(dAtA[i:], m.RoleIdentifier)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistRolePermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistRolePermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistRolePermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleIdentifier) > 0 {
		i -= len(m.RoleIdentifier)
		copy(dAtA[i:], m.RoleIdentifier)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlacklistRolePermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlacklistRolePermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlacklistRolePermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleIdentifier) > 0 {
		i -= len(m.RoleIdentifier)
		copy(dAtA[i:], m.RoleIdentifier)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveWhitelistedRolePermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveWhitelistedRolePermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveWhitelistedRolePermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleSid) > 0 {
		i -= len(m.RoleSid)
		copy(dAtA[i:], m.RoleSid)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleSid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveBlacklistedRolePermissionProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveBlacklistedRolePermissionProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveBlacklistedRolePermissionProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permission != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Permission))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleSid) > 0 {
		i -= len(m.RoleSid)
		copy(dAtA[i:], m.RoleSid)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleSid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetNetworkPropertyProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetNetworkPropertyProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetNetworkPropertyProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NetworkProperty != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.NetworkProperty))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpsertDataRegistryProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpsertDataRegistryProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpsertDataRegistryProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Encoding) > 0 {
		i -= len(m.Encoding)
		copy(dAtA[i:], m.Encoding)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Encoding)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetPoorNetworkMessagesProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetPoorNetworkMessagesProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetPoorNetworkMessagesProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CreateRoleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRoleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateRoleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlacklistedPermissions) > 0 {
		dAtA7 := make([]byte, len(m.BlacklistedPermissions)*10)
		var j6 int
		for _, num := range m.BlacklistedPermissions {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintProposal(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WhitelistedPermissions) > 0 {
		dAtA9 := make([]byte, len(m.WhitelistedPermissions)*10)
		var j8 int
		for _, num := range m.WhitelistedPermissions {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintProposal(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RoleDescription) > 0 {
		i -= len(m.RoleDescription)
		copy(dAtA[i:], m.RoleDescription)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleDescription)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleSid) > 0 {
		i -= len(m.RoleSid)
		copy(dAtA[i:], m.RoleSid)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleSid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveRoleProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveRoleProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveRoleProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleSid) > 0 {
		i -= len(m.RoleSid)
		copy(dAtA[i:], m.RoleSid)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.RoleSid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetProposalDurationsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetProposalDurationsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetProposalDurationsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposalDurations) > 0 {
		dAtA11 := make([]byte, len(m.ProposalDurations)*10)
		var j10 int
		for _, num := range m.ProposalDurations {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintProposal(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TypeofProposals) > 0 {
		for iNdEx := len(m.TypeofProposals) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TypeofProposals[iNdEx])
			copy(dAtA[i:], m.TypeofProposals[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.TypeofProposals[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ProposalResetWholeCouncilorRank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalResetWholeCouncilorRank) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalResetWholeCouncilorRank) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovProposal(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovProposal(uint64(m.Option))
	}
	if m.Slash != 0 {
		n += 1 + sovProposal(uint64(m.Slash))
	}
	return n
}

func (m *MsgVoteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovProposal(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovProposal(uint64(m.Option))
	}
	if m.Slash != 0 {
		n += 1 + sovProposal(uint64(m.Slash))
	}
	return n
}

func (m *Proposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovProposal(uint64(m.ProposalId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.SubmitTime)
	n += 1 + l + sovProposal(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovProposal(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EnactmentEndTime)
	n += 1 + l + sovProposal(uint64(l))
	if m.MinVotingEndBlockHeight != 0 {
		n += 1 + sovProposal(uint64(m.MinVotingEndBlockHeight))
	}
	if m.MinEnactmentEndBlockHeight != 0 {
		n += 1 + sovProposal(uint64(m.MinEnactmentEndBlockHeight))
	}
	if m.Result != 0 {
		n += 1 + sovProposal(uint64(m.Result))
	}
	l = len(m.ExecResult)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *WhitelistAccountPermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *BlacklistAccountPermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *RemoveWhitelistedAccountPermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *RemoveBlacklistedAccountPermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *AssignRoleToAccountProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RoleIdentifier)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *UnassignRoleFromAccountProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RoleIdentifier)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *WhitelistRolePermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleIdentifier)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *BlacklistRolePermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleIdentifier)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *RemoveWhitelistedRolePermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleSid)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *RemoveBlacklistedRolePermissionProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleSid)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Permission != 0 {
		n += 1 + sovProposal(uint64(m.Permission))
	}
	return n
}

func (m *SetNetworkPropertyProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkProperty != 0 {
		n += 1 + sovProposal(uint64(m.NetworkProperty))
	}
	l = m.Value.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *UpsertDataRegistryProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Encoding)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovProposal(uint64(m.Size_))
	}
	return n
}

func (m *SetPoorNetworkMessagesProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *CreateRoleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleSid)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.RoleDescription)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.WhitelistedPermissions) > 0 {
		l = 0
		for _, e := range m.WhitelistedPermissions {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	if len(m.BlacklistedPermissions) > 0 {
		l = 0
		for _, e := range m.BlacklistedPermissions {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	return n
}

func (m *RemoveRoleProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleSid)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *SetProposalDurationsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TypeofProposals) > 0 {
		for _, s := range m.TypeofProposals {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	if len(m.ProposalDurations) > 0 {
		l = 0
		for _, e := range m.ProposalDurations {
			l += sovProposal(uint64(e))
		}
		n += 1 + sovProposal(uint64(l)) + l
	}
	return n
}

func (m *ProposalResetWholeCouncilorRank) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slash", wireType)
			}
			m.Slash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slash", wireType)
			}
			m.Slash = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slash |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.SubmitTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnactmentEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EnactmentEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinVotingEndBlockHeight", wireType)
			}
			m.MinVotingEndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinVotingEndBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinEnactmentEndBlockHeight", wireType)
			}
			m.MinEnactmentEndBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinEnactmentEndBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecResult", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecResult = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistAccountPermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistAccountPermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistAccountPermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistAccountPermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistAccountPermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistAccountPermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWhitelistedAccountPermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWhitelistedAccountPermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWhitelistedAccountPermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBlacklistedAccountPermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlacklistedAccountPermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlacklistedAccountPermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssignRoleToAccountProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssignRoleToAccountProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssignRoleToAccountProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnassignRoleFromAccountProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnassignRoleFromAccountProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnassignRoleFromAccountProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistRolePermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistRolePermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistRolePermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlacklistRolePermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlacklistRolePermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlacklistRolePermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveWhitelistedRolePermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveWhitelistedRolePermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveWhitelistedRolePermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleSid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveBlacklistedRolePermissionProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveBlacklistedRolePermissionProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveBlacklistedRolePermissionProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleSid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permission", wireType)
			}
			m.Permission = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Permission |= PermValue(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetNetworkPropertyProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetNetworkPropertyProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetNetworkPropertyProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkProperty", wireType)
			}
			m.NetworkProperty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkProperty |= NetworkProperty(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpsertDataRegistryProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpsertDataRegistryProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpsertDataRegistryProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Encoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Encoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetPoorNetworkMessagesProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetPoorNetworkMessagesProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetPoorNetworkMessagesProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRoleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRoleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRoleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleSid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v PermValue
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PermValue(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedPermissions = append(m.WhitelistedPermissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.WhitelistedPermissions) == 0 {
					m.WhitelistedPermissions = make([]PermValue, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PermValue
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PermValue(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedPermissions = append(m.WhitelistedPermissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedPermissions", wireType)
			}
		case 4:
			if wireType == 0 {
				var v PermValue
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= PermValue(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlacklistedPermissions = append(m.BlacklistedPermissions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.BlacklistedPermissions) == 0 {
					m.BlacklistedPermissions = make([]PermValue, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v PermValue
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= PermValue(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlacklistedPermissions = append(m.BlacklistedPermissions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlacklistedPermissions", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveRoleProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveRoleProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveRoleProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleSid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleSid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetProposalDurationsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetProposalDurationsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetProposalDurationsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeofProposals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeofProposals = append(m.TypeofProposals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ProposalDurations = append(m.ProposalDurations, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProposal
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProposal
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProposal
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ProposalDurations) == 0 {
					m.ProposalDurations = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProposal
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ProposalDurations = append(m.ProposalDurations, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDurations", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalResetWholeCouncilorRank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalResetWholeCouncilorRank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalResetWholeCouncilorRank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
