// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	github_com_cosmos_cosmos_sdk_types_query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkPropertiesRequest struct {
}

func (m *NetworkPropertiesRequest) Reset()         { *m = NetworkPropertiesRequest{} }
func (m *NetworkPropertiesRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertiesRequest) ProtoMessage()    {}
func (*NetworkPropertiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{0}
}
func (m *NetworkPropertiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPropertiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPropertiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPropertiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertiesRequest.Merge(m, src)
}
func (m *NetworkPropertiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPropertiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertiesRequest proto.InternalMessageInfo

type NetworkPropertiesResponse struct {
	Properties *NetworkProperties `protobuf:"bytes,1,opt,name=properties,proto3" json:"properties,omitempty"`
}

func (m *NetworkPropertiesResponse) Reset()         { *m = NetworkPropertiesResponse{} }
func (m *NetworkPropertiesResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertiesResponse) ProtoMessage()    {}
func (*NetworkPropertiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{1}
}
func (m *NetworkPropertiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPropertiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPropertiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPropertiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertiesResponse.Merge(m, src)
}
func (m *NetworkPropertiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPropertiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertiesResponse proto.InternalMessageInfo

func (m *NetworkPropertiesResponse) GetProperties() *NetworkProperties {
	if m != nil {
		return m.Properties
	}
	return nil
}

type PermissionsByAddressRequest struct {
	ValAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"val_addr,omitempty" yaml:"val_addr"`
}

func (m *PermissionsByAddressRequest) Reset()         { *m = PermissionsByAddressRequest{} }
func (m *PermissionsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*PermissionsByAddressRequest) ProtoMessage()    {}
func (*PermissionsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{2}
}
func (m *PermissionsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionsByAddressRequest.Merge(m, src)
}
func (m *PermissionsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *PermissionsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionsByAddressRequest proto.InternalMessageInfo

func (m *PermissionsByAddressRequest) GetValAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ValAddr
	}
	return nil
}

type PermissionsResponse struct {
	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *PermissionsResponse) Reset()         { *m = PermissionsResponse{} }
func (m *PermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*PermissionsResponse) ProtoMessage()    {}
func (*PermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{3}
}
func (m *PermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionsResponse.Merge(m, src)
}
func (m *PermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionsResponse proto.InternalMessageInfo

func (m *PermissionsResponse) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type RolesByAddressRequest struct {
	ValAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"val_addr,omitempty" yaml:"val_addr"`
}

func (m *RolesByAddressRequest) Reset()         { *m = RolesByAddressRequest{} }
func (m *RolesByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*RolesByAddressRequest) ProtoMessage()    {}
func (*RolesByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{4}
}
func (m *RolesByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolesByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolesByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolesByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolesByAddressRequest.Merge(m, src)
}
func (m *RolesByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *RolesByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RolesByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RolesByAddressRequest proto.InternalMessageInfo

func (m *RolesByAddressRequest) GetValAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ValAddr
	}
	return nil
}

type RolesByAddressResponse struct {
	Roles []uint64 `protobuf:"varint,1,rep,packed,name=roles,proto3" json:"roles,omitempty"`
}

func (m *RolesByAddressResponse) Reset()         { *m = RolesByAddressResponse{} }
func (m *RolesByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*RolesByAddressResponse) ProtoMessage()    {}
func (*RolesByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{5}
}
func (m *RolesByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolesByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolesByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolesByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolesByAddressResponse.Merge(m, src)
}
func (m *RolesByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *RolesByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RolesByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RolesByAddressResponse proto.InternalMessageInfo

func (m *RolesByAddressResponse) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

type RolePermissionsRequest struct {
	Role uint64 `protobuf:"varint,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *RolePermissionsRequest) Reset()         { *m = RolePermissionsRequest{} }
func (m *RolePermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*RolePermissionsRequest) ProtoMessage()    {}
func (*RolePermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{6}
}
func (m *RolePermissionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolePermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolePermissionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolePermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolePermissionsRequest.Merge(m, src)
}
func (m *RolePermissionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *RolePermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RolePermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RolePermissionsRequest proto.InternalMessageInfo

func (m *RolePermissionsRequest) GetRole() uint64 {
	if m != nil {
		return m.Role
	}
	return 0
}

type RolePermissionsResponse struct {
	Permissions *Permissions `protobuf:"bytes,1,opt,name=permissions,proto3" json:"permissions,omitempty"`
}

func (m *RolePermissionsResponse) Reset()         { *m = RolePermissionsResponse{} }
func (m *RolePermissionsResponse) String() string { return proto.CompactTextString(m) }
func (*RolePermissionsResponse) ProtoMessage()    {}
func (*RolePermissionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{7}
}
func (m *RolePermissionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RolePermissionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RolePermissionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RolePermissionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolePermissionsResponse.Merge(m, src)
}
func (m *RolePermissionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *RolePermissionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RolePermissionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RolePermissionsResponse proto.InternalMessageInfo

func (m *RolePermissionsResponse) GetPermissions() *Permissions {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type ExecutionFeeRequest struct {
	TransactionType string `protobuf:"bytes,1,opt,name=transaction_type,json=transactionType,proto3" json:"transaction_type,omitempty"`
}

func (m *ExecutionFeeRequest) Reset()         { *m = ExecutionFeeRequest{} }
func (m *ExecutionFeeRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutionFeeRequest) ProtoMessage()    {}
func (*ExecutionFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{8}
}
func (m *ExecutionFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionFeeRequest.Merge(m, src)
}
func (m *ExecutionFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionFeeRequest proto.InternalMessageInfo

func (m *ExecutionFeeRequest) GetTransactionType() string {
	if m != nil {
		return m.TransactionType
	}
	return ""
}

type ExecutionFeeResponse struct {
	Fee *ExecutionFee `protobuf:"bytes,1,opt,name=fee,proto3" json:"fee,omitempty"`
}

func (m *ExecutionFeeResponse) Reset()         { *m = ExecutionFeeResponse{} }
func (m *ExecutionFeeResponse) String() string { return proto.CompactTextString(m) }
func (*ExecutionFeeResponse) ProtoMessage()    {}
func (*ExecutionFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{9}
}
func (m *ExecutionFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExecutionFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExecutionFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExecutionFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecutionFeeResponse.Merge(m, src)
}
func (m *ExecutionFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExecutionFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecutionFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecutionFeeResponse proto.InternalMessageInfo

func (m *ExecutionFeeResponse) GetFee() *ExecutionFee {
	if m != nil {
		return m.Fee
	}
	return nil
}

type PoorNetworkMessagesRequest struct {
}

func (m *PoorNetworkMessagesRequest) Reset()         { *m = PoorNetworkMessagesRequest{} }
func (m *PoorNetworkMessagesRequest) String() string { return proto.CompactTextString(m) }
func (*PoorNetworkMessagesRequest) ProtoMessage()    {}
func (*PoorNetworkMessagesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{10}
}
func (m *PoorNetworkMessagesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoorNetworkMessagesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoorNetworkMessagesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoorNetworkMessagesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoorNetworkMessagesRequest.Merge(m, src)
}
func (m *PoorNetworkMessagesRequest) XXX_Size() int {
	return m.Size()
}
func (m *PoorNetworkMessagesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PoorNetworkMessagesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PoorNetworkMessagesRequest proto.InternalMessageInfo

type PoorNetworkMessagesResponse struct {
	Messages []string `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (m *PoorNetworkMessagesResponse) Reset()         { *m = PoorNetworkMessagesResponse{} }
func (m *PoorNetworkMessagesResponse) String() string { return proto.CompactTextString(m) }
func (*PoorNetworkMessagesResponse) ProtoMessage()    {}
func (*PoorNetworkMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{11}
}
func (m *PoorNetworkMessagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoorNetworkMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoorNetworkMessagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoorNetworkMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoorNetworkMessagesResponse.Merge(m, src)
}
func (m *PoorNetworkMessagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *PoorNetworkMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PoorNetworkMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PoorNetworkMessagesResponse proto.InternalMessageInfo

func (m *PoorNetworkMessagesResponse) GetMessages() []string {
	if m != nil {
		return m.Messages
	}
	return nil
}

type CouncilorByAddressRequest struct {
	ValAddr github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"val_addr,omitempty" yaml:"val_addr"`
}

func (m *CouncilorByAddressRequest) Reset()         { *m = CouncilorByAddressRequest{} }
func (m *CouncilorByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*CouncilorByAddressRequest) ProtoMessage()    {}
func (*CouncilorByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{12}
}
func (m *CouncilorByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouncilorByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouncilorByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouncilorByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouncilorByAddressRequest.Merge(m, src)
}
func (m *CouncilorByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *CouncilorByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CouncilorByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CouncilorByAddressRequest proto.InternalMessageInfo

func (m *CouncilorByAddressRequest) GetValAddr() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ValAddr
	}
	return nil
}

type CouncilorByMonikerRequest struct {
	Moniker string `protobuf:"bytes,1,opt,name=moniker,proto3" json:"moniker,omitempty"`
}

func (m *CouncilorByMonikerRequest) Reset()         { *m = CouncilorByMonikerRequest{} }
func (m *CouncilorByMonikerRequest) String() string { return proto.CompactTextString(m) }
func (*CouncilorByMonikerRequest) ProtoMessage()    {}
func (*CouncilorByMonikerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{13}
}
func (m *CouncilorByMonikerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouncilorByMonikerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouncilorByMonikerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouncilorByMonikerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouncilorByMonikerRequest.Merge(m, src)
}
func (m *CouncilorByMonikerRequest) XXX_Size() int {
	return m.Size()
}
func (m *CouncilorByMonikerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CouncilorByMonikerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CouncilorByMonikerRequest proto.InternalMessageInfo

func (m *CouncilorByMonikerRequest) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

type CouncilorResponse struct {
	Councilor Councilor `protobuf:"bytes,1,opt,name=councilor,proto3" json:"councilor"`
}

func (m *CouncilorResponse) Reset()         { *m = CouncilorResponse{} }
func (m *CouncilorResponse) String() string { return proto.CompactTextString(m) }
func (*CouncilorResponse) ProtoMessage()    {}
func (*CouncilorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{14}
}
func (m *CouncilorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CouncilorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CouncilorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CouncilorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CouncilorResponse.Merge(m, src)
}
func (m *CouncilorResponse) XXX_Size() int {
	return m.Size()
}
func (m *CouncilorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CouncilorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CouncilorResponse proto.InternalMessageInfo

func (m *CouncilorResponse) GetCouncilor() Councilor {
	if m != nil {
		return m.Councilor
	}
	return Councilor{}
}

// QueryProposalRequest is the request type for the Query/Proposal RPC method.
type QueryProposalRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryProposalRequest) Reset()         { *m = QueryProposalRequest{} }
func (m *QueryProposalRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalRequest) ProtoMessage()    {}
func (*QueryProposalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{15}
}
func (m *QueryProposalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalRequest.Merge(m, src)
}
func (m *QueryProposalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalRequest proto.InternalMessageInfo

func (m *QueryProposalRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// QueryProposalResponse is the response type for the Query/Proposal RPC method.
type QueryProposalResponse struct {
	Proposal Proposal `protobuf:"bytes,1,opt,name=proposal,proto3" json:"proposal"`
	Votes    []Vote   `protobuf:"bytes,2,rep,name=votes,proto3" json:"votes"`
}

func (m *QueryProposalResponse) Reset()         { *m = QueryProposalResponse{} }
func (m *QueryProposalResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalResponse) ProtoMessage()    {}
func (*QueryProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{16}
}
func (m *QueryProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalResponse.Merge(m, src)
}
func (m *QueryProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalResponse proto.InternalMessageInfo

func (m *QueryProposalResponse) GetProposal() Proposal {
	if m != nil {
		return m.Proposal
	}
	return Proposal{}
}

func (m *QueryProposalResponse) GetVotes() []Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

// QueryProposalsRequest is the request type for the Query/Proposals RPC method.
type QueryProposalsRequest struct {
	// voter defines the voter address for the proposals.
	Voter      string                                                `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryProposalsRequest) Reset()         { *m = QueryProposalsRequest{} }
func (m *QueryProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposalsRequest) ProtoMessage()    {}
func (*QueryProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{17}
}
func (m *QueryProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalsRequest.Merge(m, src)
}
func (m *QueryProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalsRequest proto.InternalMessageInfo

// QueryProposalsResponse is the response type for the Query/Proposals RPC
// method.
type QueryProposalsResponse struct {
	Proposals  []Proposal                                             `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryProposalsResponse) Reset()         { *m = QueryProposalsResponse{} }
func (m *QueryProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposalsResponse) ProtoMessage()    {}
func (*QueryProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{18}
}
func (m *QueryProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposalsResponse.Merge(m, src)
}
func (m *QueryProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposalsResponse proto.InternalMessageInfo

func (m *QueryProposalsResponse) GetProposals() []Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

func (m *QueryProposalsResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryWhitelistedProposalVotersRequest is the request type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryWhitelistedProposalVotersRequest) Reset()         { *m = QueryWhitelistedProposalVotersRequest{} }
func (m *QueryWhitelistedProposalVotersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedProposalVotersRequest) ProtoMessage()    {}
func (*QueryWhitelistedProposalVotersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{19}
}
func (m *QueryWhitelistedProposalVotersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedProposalVotersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedProposalVotersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedProposalVotersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedProposalVotersRequest.Merge(m, src)
}
func (m *QueryWhitelistedProposalVotersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedProposalVotersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedProposalVotersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedProposalVotersRequest proto.InternalMessageInfo

func (m *QueryWhitelistedProposalVotersRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// QueryWhitelistedProposalVotersResponse is the response type for Query/WhitelistedProposalVoters RPC method.
type QueryWhitelistedProposalVotersResponse struct {
	Voters []NetworkActor `protobuf:"bytes,1,rep,name=voters,proto3" json:"voters"`
}

func (m *QueryWhitelistedProposalVotersResponse) Reset() {
	*m = QueryWhitelistedProposalVotersResponse{}
}
func (m *QueryWhitelistedProposalVotersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryWhitelistedProposalVotersResponse) ProtoMessage()    {}
func (*QueryWhitelistedProposalVotersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{20}
}
func (m *QueryWhitelistedProposalVotersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryWhitelistedProposalVotersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryWhitelistedProposalVotersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryWhitelistedProposalVotersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryWhitelistedProposalVotersResponse.Merge(m, src)
}
func (m *QueryWhitelistedProposalVotersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryWhitelistedProposalVotersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryWhitelistedProposalVotersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryWhitelistedProposalVotersResponse proto.InternalMessageInfo

func (m *QueryWhitelistedProposalVotersResponse) GetVoters() []NetworkActor {
	if m != nil {
		return m.Voters
	}
	return nil
}

// QueryVoteRequest is the request type for the Query/Vote RPC method.
type QueryVoteRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// voter defines the oter address for the proposals.
	Voter github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
}

func (m *QueryVoteRequest) Reset()         { *m = QueryVoteRequest{} }
func (m *QueryVoteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVoteRequest) ProtoMessage()    {}
func (*QueryVoteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{21}
}
func (m *QueryVoteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteRequest.Merge(m, src)
}
func (m *QueryVoteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteRequest proto.InternalMessageInfo

// QueryVoteResponse is the response type for the Query/Vote RPC method.
type QueryVoteResponse struct {
	// vote defined the queried vote.
	Vote Vote `protobuf:"bytes,1,opt,name=vote,proto3" json:"vote"`
}

func (m *QueryVoteResponse) Reset()         { *m = QueryVoteResponse{} }
func (m *QueryVoteResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVoteResponse) ProtoMessage()    {}
func (*QueryVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{22}
}
func (m *QueryVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVoteResponse.Merge(m, src)
}
func (m *QueryVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVoteResponse proto.InternalMessageInfo

func (m *QueryVoteResponse) GetVote() Vote {
	if m != nil {
		return m.Vote
	}
	return Vote{}
}

// QueryVotesRequest is the request type for the Query/Votes RPC method.
type QueryVotesRequest struct {
	// proposal_id defines the unique id of the proposal.
	ProposalId uint64 `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
}

func (m *QueryVotesRequest) Reset()         { *m = QueryVotesRequest{} }
func (m *QueryVotesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVotesRequest) ProtoMessage()    {}
func (*QueryVotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{23}
}
func (m *QueryVotesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotesRequest.Merge(m, src)
}
func (m *QueryVotesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotesRequest proto.InternalMessageInfo

func (m *QueryVotesRequest) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

// QueryVotesResponse is the response type for the Query/Votes RPC method.
type QueryVotesResponse struct {
	// votes defined the queried votes.
	Votes []Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes"`
}

func (m *QueryVotesResponse) Reset()         { *m = QueryVotesResponse{} }
func (m *QueryVotesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVotesResponse) ProtoMessage()    {}
func (*QueryVotesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{24}
}
func (m *QueryVotesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVotesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVotesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVotesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVotesResponse.Merge(m, src)
}
func (m *QueryVotesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVotesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVotesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVotesResponse proto.InternalMessageInfo

func (m *QueryVotesResponse) GetVotes() []Vote {
	if m != nil {
		return m.Votes
	}
	return nil
}

// QueryDataReferenceKeysRequest is the request type for data reference keys query.
type QueryDataReferenceKeysRequest struct {
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryDataReferenceKeysRequest) Reset()         { *m = QueryDataReferenceKeysRequest{} }
func (m *QueryDataReferenceKeysRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataReferenceKeysRequest) ProtoMessage()    {}
func (*QueryDataReferenceKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{25}
}
func (m *QueryDataReferenceKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataReferenceKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataReferenceKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataReferenceKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataReferenceKeysRequest.Merge(m, src)
}
func (m *QueryDataReferenceKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataReferenceKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataReferenceKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataReferenceKeysRequest proto.InternalMessageInfo

func (m *QueryDataReferenceKeysRequest) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataReferenceKeysResponse is the response type for data reference keys query.
type QueryDataReferenceKeysResponse struct {
	Keys       []string                                               `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryDataReferenceKeysResponse) Reset()         { *m = QueryDataReferenceKeysResponse{} }
func (m *QueryDataReferenceKeysResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataReferenceKeysResponse) ProtoMessage()    {}
func (*QueryDataReferenceKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{26}
}
func (m *QueryDataReferenceKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataReferenceKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataReferenceKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataReferenceKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataReferenceKeysResponse.Merge(m, src)
}
func (m *QueryDataReferenceKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataReferenceKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataReferenceKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataReferenceKeysResponse proto.InternalMessageInfo

func (m *QueryDataReferenceKeysResponse) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *QueryDataReferenceKeysResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDataReferenceRequest is the response type for data reference query.
type QueryDataReferenceRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *QueryDataReferenceRequest) Reset()         { *m = QueryDataReferenceRequest{} }
func (m *QueryDataReferenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDataReferenceRequest) ProtoMessage()    {}
func (*QueryDataReferenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{27}
}
func (m *QueryDataReferenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataReferenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataReferenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataReferenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataReferenceRequest.Merge(m, src)
}
func (m *QueryDataReferenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataReferenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataReferenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataReferenceRequest proto.InternalMessageInfo

func (m *QueryDataReferenceRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// QueryDataReferenceResponse is the response type for data referencequery.
type QueryDataReferenceResponse struct {
	Data *DataRegistryEntry `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryDataReferenceResponse) Reset()         { *m = QueryDataReferenceResponse{} }
func (m *QueryDataReferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDataReferenceResponse) ProtoMessage()    {}
func (*QueryDataReferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{28}
}
func (m *QueryDataReferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDataReferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDataReferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDataReferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDataReferenceResponse.Merge(m, src)
}
func (m *QueryDataReferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDataReferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDataReferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDataReferenceResponse proto.InternalMessageInfo

func (m *QueryDataReferenceResponse) GetData() *DataRegistryEntry {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryIdentityRecordRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryIdentityRecordRequest) Reset()         { *m = QueryIdentityRecordRequest{} }
func (m *QueryIdentityRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityRecordRequest) ProtoMessage()    {}
func (*QueryIdentityRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{29}
}
func (m *QueryIdentityRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordRequest.Merge(m, src)
}
func (m *QueryIdentityRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordRequest proto.InternalMessageInfo

func (m *QueryIdentityRecordRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryIdentityRecordResponse struct {
	Record *IdentityRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
}

func (m *QueryIdentityRecordResponse) Reset()         { *m = QueryIdentityRecordResponse{} }
func (m *QueryIdentityRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityRecordResponse) ProtoMessage()    {}
func (*QueryIdentityRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{30}
}
func (m *QueryIdentityRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordResponse.Merge(m, src)
}
func (m *QueryIdentityRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordResponse proto.InternalMessageInfo

func (m *QueryIdentityRecordResponse) GetRecord() *IdentityRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

type QueryIdentityRecordsByAddressRequest struct {
	Creator github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty" yaml:"creator"`
	Keys    []string                                      `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (m *QueryIdentityRecordsByAddressRequest) Reset()         { *m = QueryIdentityRecordsByAddressRequest{} }
func (m *QueryIdentityRecordsByAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityRecordsByAddressRequest) ProtoMessage()    {}
func (*QueryIdentityRecordsByAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{31}
}
func (m *QueryIdentityRecordsByAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordsByAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordsByAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordsByAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordsByAddressRequest.Merge(m, src)
}
func (m *QueryIdentityRecordsByAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordsByAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordsByAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordsByAddressRequest proto.InternalMessageInfo

func (m *QueryIdentityRecordsByAddressRequest) GetCreator() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *QueryIdentityRecordsByAddressRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type QueryIdentityRecordsByAddressResponse struct {
	Records []IdentityRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
}

func (m *QueryIdentityRecordsByAddressResponse) Reset()         { *m = QueryIdentityRecordsByAddressResponse{} }
func (m *QueryIdentityRecordsByAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityRecordsByAddressResponse) ProtoMessage()    {}
func (*QueryIdentityRecordsByAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{32}
}
func (m *QueryIdentityRecordsByAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordsByAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordsByAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordsByAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordsByAddressResponse.Merge(m, src)
}
func (m *QueryIdentityRecordsByAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordsByAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordsByAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordsByAddressResponse proto.InternalMessageInfo

func (m *QueryIdentityRecordsByAddressResponse) GetRecords() []IdentityRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type QueryAllIdentityRecordsRequest struct {
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryAllIdentityRecordsRequest) Reset()         { *m = QueryAllIdentityRecordsRequest{} }
func (m *QueryAllIdentityRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIdentityRecordsRequest) ProtoMessage()    {}
func (*QueryAllIdentityRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{33}
}
func (m *QueryAllIdentityRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentityRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentityRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentityRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentityRecordsRequest.Merge(m, src)
}
func (m *QueryAllIdentityRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentityRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentityRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentityRecordsRequest proto.InternalMessageInfo

func (m *QueryAllIdentityRecordsRequest) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIdentityRecordsResponse struct {
	Records    []IdentityRecord                                       `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryAllIdentityRecordsResponse) Reset()         { *m = QueryAllIdentityRecordsResponse{} }
func (m *QueryAllIdentityRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIdentityRecordsResponse) ProtoMessage()    {}
func (*QueryAllIdentityRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{34}
}
func (m *QueryAllIdentityRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentityRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentityRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentityRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentityRecordsResponse.Merge(m, src)
}
func (m *QueryAllIdentityRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentityRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentityRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentityRecordsResponse proto.InternalMessageInfo

func (m *QueryAllIdentityRecordsResponse) GetRecords() []IdentityRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryAllIdentityRecordsResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIdentityVerifyRecordRequest struct {
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryIdentityVerifyRecordRequest) Reset()         { *m = QueryIdentityVerifyRecordRequest{} }
func (m *QueryIdentityVerifyRecordRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityVerifyRecordRequest) ProtoMessage()    {}
func (*QueryIdentityVerifyRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{35}
}
func (m *QueryIdentityVerifyRecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityVerifyRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityVerifyRecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityVerifyRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityVerifyRecordRequest.Merge(m, src)
}
func (m *QueryIdentityVerifyRecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityVerifyRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityVerifyRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityVerifyRecordRequest proto.InternalMessageInfo

func (m *QueryIdentityVerifyRecordRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryIdentityVerifyRecordResponse struct {
	VerifyRecord *IdentityRecordsVerify `protobuf:"bytes,1,opt,name=verify_record,json=verifyRecord,proto3" json:"verify_record,omitempty"`
}

func (m *QueryIdentityVerifyRecordResponse) Reset()         { *m = QueryIdentityVerifyRecordResponse{} }
func (m *QueryIdentityVerifyRecordResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIdentityVerifyRecordResponse) ProtoMessage()    {}
func (*QueryIdentityVerifyRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{36}
}
func (m *QueryIdentityVerifyRecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityVerifyRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityVerifyRecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityVerifyRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityVerifyRecordResponse.Merge(m, src)
}
func (m *QueryIdentityVerifyRecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityVerifyRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityVerifyRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityVerifyRecordResponse proto.InternalMessageInfo

func (m *QueryIdentityVerifyRecordResponse) GetVerifyRecord() *IdentityRecordsVerify {
	if m != nil {
		return m.VerifyRecord
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApprover struct {
	Approver   github_com_cosmos_cosmos_sdk_types.AccAddress         `protobuf:"bytes,1,opt,name=approver,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"approver,omitempty" yaml:"approver"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) Reset() {
	*m = QueryIdentityRecordVerifyRequestsByApprover{}
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIdentityRecordVerifyRequestsByApprover) ProtoMessage() {}
func (*QueryIdentityRecordVerifyRequestsByApprover) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{37}
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApprover.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApprover.Merge(m, src)
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApprover.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApprover proto.InternalMessageInfo

func (m *QueryIdentityRecordVerifyRequestsByApprover) GetApprover() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Approver
	}
	return nil
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByApproverResponse struct {
	VerifyRecords []IdentityRecordsVerify                                `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records"`
	Pagination    *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) Reset() {
	*m = QueryIdentityRecordVerifyRequestsByApproverResponse{}
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIdentityRecordVerifyRequestsByApproverResponse) ProtoMessage() {}
func (*QueryIdentityRecordVerifyRequestsByApproverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{38}
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApproverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApproverResponse.Merge(m, src)
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApproverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordVerifyRequestsByApproverResponse proto.InternalMessageInfo

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) GetVerifyRecords() []IdentityRecordsVerify {
	if m != nil {
		return m.VerifyRecords
	}
	return nil
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequester struct {
	Requester  github_com_cosmos_cosmos_sdk_types.AccAddress         `protobuf:"bytes,1,opt,name=requester,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"requester,omitempty" yaml:"requester"`
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) Reset() {
	*m = QueryIdentityRecordVerifyRequestsByRequester{}
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIdentityRecordVerifyRequestsByRequester) ProtoMessage() {}
func (*QueryIdentityRecordVerifyRequestsByRequester) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{39}
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequester.Merge(m, src)
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequester.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequester proto.InternalMessageInfo

func (m *QueryIdentityRecordVerifyRequestsByRequester) GetRequester() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Requester
	}
	return nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryIdentityRecordVerifyRequestsByRequesterResponse struct {
	VerifyRecords []IdentityRecordsVerify                                `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records"`
	Pagination    *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) Reset() {
	*m = QueryIdentityRecordVerifyRequestsByRequesterResponse{}
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) ProtoMessage() {}
func (*QueryIdentityRecordVerifyRequestsByRequesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{40}
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequesterResponse.Merge(m, src)
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIdentityRecordVerifyRequestsByRequesterResponse proto.InternalMessageInfo

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetVerifyRecords() []IdentityRecordsVerify {
	if m != nil {
		return m.VerifyRecords
	}
	return nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequests struct {
	Pagination *github_com_cosmos_cosmos_sdk_types_query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageRequest" json:"pagination,omitempty"`
}

func (m *QueryAllIdentityRecordVerifyRequests) Reset()         { *m = QueryAllIdentityRecordVerifyRequests{} }
func (m *QueryAllIdentityRecordVerifyRequests) String() string { return proto.CompactTextString(m) }
func (*QueryAllIdentityRecordVerifyRequests) ProtoMessage()    {}
func (*QueryAllIdentityRecordVerifyRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{41}
}
func (m *QueryAllIdentityRecordVerifyRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentityRecordVerifyRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentityRecordVerifyRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentityRecordVerifyRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentityRecordVerifyRequests.Merge(m, src)
}
func (m *QueryAllIdentityRecordVerifyRequests) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentityRecordVerifyRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentityRecordVerifyRequests.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentityRecordVerifyRequests proto.InternalMessageInfo

func (m *QueryAllIdentityRecordVerifyRequests) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIdentityRecordVerifyRequestsResponse struct {
	VerifyRecords []IdentityRecordsVerify                                `protobuf:"bytes,1,rep,name=verify_records,json=verifyRecords,proto3" json:"verify_records"`
	Pagination    *github_com_cosmos_cosmos_sdk_types_query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3,casttype=github.com/cosmos/cosmos-sdk/types/query.PageResponse" json:"pagination,omitempty"`
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) Reset() {
	*m = QueryAllIdentityRecordVerifyRequestsResponse{}
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryAllIdentityRecordVerifyRequestsResponse) ProtoMessage() {}
func (*QueryAllIdentityRecordVerifyRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcca1063f62efc95, []int{42}
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIdentityRecordVerifyRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIdentityRecordVerifyRequestsResponse.Merge(m, src)
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIdentityRecordVerifyRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIdentityRecordVerifyRequestsResponse proto.InternalMessageInfo

func (m *QueryAllIdentityRecordVerifyRequestsResponse) GetVerifyRecords() []IdentityRecordsVerify {
	if m != nil {
		return m.VerifyRecords
	}
	return nil
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) GetPagination() *github_com_cosmos_cosmos_sdk_types_query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkPropertiesRequest)(nil), "kira.gov.NetworkPropertiesRequest")
	proto.RegisterType((*NetworkPropertiesResponse)(nil), "kira.gov.NetworkPropertiesResponse")
	proto.RegisterType((*PermissionsByAddressRequest)(nil), "kira.gov.PermissionsByAddressRequest")
	proto.RegisterType((*PermissionsResponse)(nil), "kira.gov.PermissionsResponse")
	proto.RegisterType((*RolesByAddressRequest)(nil), "kira.gov.RolesByAddressRequest")
	proto.RegisterType((*RolesByAddressResponse)(nil), "kira.gov.RolesByAddressResponse")
	proto.RegisterType((*RolePermissionsRequest)(nil), "kira.gov.RolePermissionsRequest")
	proto.RegisterType((*RolePermissionsResponse)(nil), "kira.gov.RolePermissionsResponse")
	proto.RegisterType((*ExecutionFeeRequest)(nil), "kira.gov.ExecutionFeeRequest")
	proto.RegisterType((*ExecutionFeeResponse)(nil), "kira.gov.ExecutionFeeResponse")
	proto.RegisterType((*PoorNetworkMessagesRequest)(nil), "kira.gov.PoorNetworkMessagesRequest")
	proto.RegisterType((*PoorNetworkMessagesResponse)(nil), "kira.gov.PoorNetworkMessagesResponse")
	proto.RegisterType((*CouncilorByAddressRequest)(nil), "kira.gov.CouncilorByAddressRequest")
	proto.RegisterType((*CouncilorByMonikerRequest)(nil), "kira.gov.CouncilorByMonikerRequest")
	proto.RegisterType((*CouncilorResponse)(nil), "kira.gov.CouncilorResponse")
	proto.RegisterType((*QueryProposalRequest)(nil), "kira.gov.QueryProposalRequest")
	proto.RegisterType((*QueryProposalResponse)(nil), "kira.gov.QueryProposalResponse")
	proto.RegisterType((*QueryProposalsRequest)(nil), "kira.gov.QueryProposalsRequest")
	proto.RegisterType((*QueryProposalsResponse)(nil), "kira.gov.QueryProposalsResponse")
	proto.RegisterType((*QueryWhitelistedProposalVotersRequest)(nil), "kira.gov.QueryWhitelistedProposalVotersRequest")
	proto.RegisterType((*QueryWhitelistedProposalVotersResponse)(nil), "kira.gov.QueryWhitelistedProposalVotersResponse")
	proto.RegisterType((*QueryVoteRequest)(nil), "kira.gov.QueryVoteRequest")
	proto.RegisterType((*QueryVoteResponse)(nil), "kira.gov.QueryVoteResponse")
	proto.RegisterType((*QueryVotesRequest)(nil), "kira.gov.QueryVotesRequest")
	proto.RegisterType((*QueryVotesResponse)(nil), "kira.gov.QueryVotesResponse")
	proto.RegisterType((*QueryDataReferenceKeysRequest)(nil), "kira.gov.QueryDataReferenceKeysRequest")
	proto.RegisterType((*QueryDataReferenceKeysResponse)(nil), "kira.gov.QueryDataReferenceKeysResponse")
	proto.RegisterType((*QueryDataReferenceRequest)(nil), "kira.gov.QueryDataReferenceRequest")
	proto.RegisterType((*QueryDataReferenceResponse)(nil), "kira.gov.QueryDataReferenceResponse")
	proto.RegisterType((*QueryIdentityRecordRequest)(nil), "kira.gov.QueryIdentityRecordRequest")
	proto.RegisterType((*QueryIdentityRecordResponse)(nil), "kira.gov.QueryIdentityRecordResponse")
	proto.RegisterType((*QueryIdentityRecordsByAddressRequest)(nil), "kira.gov.QueryIdentityRecordsByAddressRequest")
	proto.RegisterType((*QueryIdentityRecordsByAddressResponse)(nil), "kira.gov.QueryIdentityRecordsByAddressResponse")
	proto.RegisterType((*QueryAllIdentityRecordsRequest)(nil), "kira.gov.QueryAllIdentityRecordsRequest")
	proto.RegisterType((*QueryAllIdentityRecordsResponse)(nil), "kira.gov.QueryAllIdentityRecordsResponse")
	proto.RegisterType((*QueryIdentityVerifyRecordRequest)(nil), "kira.gov.QueryIdentityVerifyRecordRequest")
	proto.RegisterType((*QueryIdentityVerifyRecordResponse)(nil), "kira.gov.QueryIdentityVerifyRecordResponse")
	proto.RegisterType((*QueryIdentityRecordVerifyRequestsByApprover)(nil), "kira.gov.QueryIdentityRecordVerifyRequestsByApprover")
	proto.RegisterType((*QueryIdentityRecordVerifyRequestsByApproverResponse)(nil), "kira.gov.QueryIdentityRecordVerifyRequestsByApproverResponse")
	proto.RegisterType((*QueryIdentityRecordVerifyRequestsByRequester)(nil), "kira.gov.QueryIdentityRecordVerifyRequestsByRequester")
	proto.RegisterType((*QueryIdentityRecordVerifyRequestsByRequesterResponse)(nil), "kira.gov.QueryIdentityRecordVerifyRequestsByRequesterResponse")
	proto.RegisterType((*QueryAllIdentityRecordVerifyRequests)(nil), "kira.gov.QueryAllIdentityRecordVerifyRequests")
	proto.RegisterType((*QueryAllIdentityRecordVerifyRequestsResponse)(nil), "kira.gov.QueryAllIdentityRecordVerifyRequestsResponse")
}

func init() { proto.RegisterFile("kira/gov/query.proto", fileDescriptor_bcca1063f62efc95) }

var fileDescriptor_bcca1063f62efc95 = []byte{
	// 1911 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0xdd, 0x4f, 0x1b, 0xd9,
	0x15, 0xf7, 0x18, 0x13, 0xe0, 0x90, 0x25, 0xe4, 0x62, 0x58, 0x33, 0x80, 0x0d, 0x37, 0x40, 0x48,
	0x16, 0x3c, 0x9b, 0x2c, 0x64, 0x37, 0x1b, 0xa5, 0x8d, 0x21, 0x69, 0x1b, 0x65, 0xb3, 0x4b, 0xad,
	0x76, 0xbb, 0xaa, 0xd4, 0xb8, 0x83, 0x7d, 0xf1, 0x8e, 0x6c, 0x3c, 0xce, 0xcc, 0xe0, 0xc6, 0xa2,
	0x54, 0x6d, 0xa4, 0x46, 0xe9, 0x5b, 0x3f, 0xa4, 0x4a, 0x7d, 0x8b, 0x5a, 0xa9, 0x6a, 0x1e, 0xfa,
	0x07, 0xa4, 0x7f, 0x41, 0x1e, 0x23, 0x55, 0x95, 0xfa, 0x84, 0xd2, 0xa4, 0xaa, 0xfa, 0x9c, 0xc7,
	0x3c, 0x55, 0x73, 0xe7, 0xde, 0x3b, 0xdf, 0xb6, 0x21, 0x52, 0x8a, 0xf2, 0xc4, 0xf8, 0xde, 0xdf,
	0x39, 0xe7, 0x77, 0xce, 0x3d, 0xe7, 0x7e, 0x1c, 0x20, 0x5d, 0xd3, 0x0c, 0x55, 0xa9, 0xea, 0x2d,
	0xe5, 0xee, 0x2e, 0x31, 0xda, 0xf9, 0xa6, 0xa1, 0x5b, 0x3a, 0x1a, 0xb4, 0x47, 0xf3, 0x55, 0xbd,
	0x25, 0x9f, 0x2f, 0xeb, 0xe6, 0x8e, 0x6e, 0x2a, 0x5b, 0xaa, 0x49, 0x1c, 0x88, 0xd2, 0xba, 0xb0,
	0x45, 0x2c, 0xf5, 0x82, 0xd2, 0x54, 0xab, 0x5a, 0x43, 0xb5, 0x34, 0xbd, 0xe1, 0x48, 0xc9, 0xae,
	0x2e, 0xb5, 0x6c, 0xe9, 0x06, 0x1b, 0xcd, 0x88, 0xd1, 0xb2, 0xbe, 0xdb, 0x28, 0x6b, 0x75, 0x31,
	0x33, 0x2d, 0x66, 0x2a, 0xaa, 0xa5, 0x96, 0x0c, 0x52, 0xd5, 0x4c, 0x8b, 0x73, 0x90, 0xc7, 0xc4,
	0xac, 0xa1, 0xd7, 0x49, 0x48, 0x84, 0xdc, 0x23, 0xe5, 0x5d, 0xdb, 0x78, 0x69, 0x9b, 0xf0, 0xd9,
	0x39, 0x31, 0xdb, 0x20, 0xd6, 0x4f, 0x74, 0xa3, 0x56, 0x6a, 0x1a, 0x7a, 0x93, 0x18, 0x96, 0x46,
	0x4c, 0x06, 0x79, 0x5f, 0x40, 0xec, 0x29, 0xdd, 0x54, 0xeb, 0x21, 0x59, 0xad, 0x42, 0x1a, 0x96,
	0x66, 0xb5, 0x39, 0x21, 0x95, 0xf3, 0x4d, 0x57, 0xf5, 0xaa, 0x4e, 0x3f, 0x15, 0xfb, 0x8b, 0x53,
	0xaa, 0xea, 0x7a, 0xb5, 0x4e, 0x14, 0xb5, 0xa9, 0x29, 0x6a, 0xa3, 0xa1, 0x5b, 0x34, 0x24, 0xcc,
	0x1e, 0x96, 0x21, 0xf3, 0xb9, 0xc3, 0x65, 0x53, 0x50, 0x29, 0x92, 0xbb, 0xbb, 0xc4, 0xb4, 0xf0,
	0x57, 0x30, 0x19, 0x31, 0x67, 0x36, 0xf5, 0x86, 0x49, 0xd0, 0x15, 0x00, 0x97, 0x7c, 0x46, 0x9a,
	0x95, 0x96, 0x86, 0x2f, 0x4e, 0xe5, 0xf9, 0xba, 0xe4, 0xc3, 0x82, 0x1e, 0x38, 0xfe, 0x19, 0x4c,
	0x6d, 0x12, 0x63, 0x47, 0x33, 0x4d, 0x9b, 0xca, 0x7a, 0xbb, 0x50, 0xa9, 0x18, 0xc4, 0xe4, 0x86,
	0x51, 0x09, 0x06, 0x5b, 0x6a, 0xbd, 0xa4, 0x56, 0x2a, 0x06, 0xd5, 0x7c, 0x72, 0xfd, 0xfa, 0xab,
	0x83, 0xdc, 0xa9, 0xb6, 0xba, 0x53, 0xff, 0x14, 0xf3, 0x19, 0xfc, 0xfa, 0x20, 0xb7, 0x52, 0xd5,
	0xac, 0xaf, 0x77, 0xb7, 0xf2, 0x65, 0x7d, 0x47, 0x61, 0x89, 0xe0, 0xfc, 0x59, 0x31, 0x2b, 0x35,
	0xc5, 0x6a, 0x37, 0x89, 0x99, 0x2f, 0x94, 0xcb, 0x5c, 0xfd, 0x40, 0x4b, 0xad, 0xdb, 0xdf, 0xf8,
	0x73, 0x18, 0xf3, 0xd8, 0x17, 0x3e, 0x7d, 0x0c, 0xc3, 0x4d, 0x77, 0x98, 0x39, 0x35, 0xee, 0x3a,
	0xe5, 0x95, 0xf1, 0x22, 0xf1, 0x3d, 0x18, 0x2f, 0xea, 0x75, 0xf2, 0x7f, 0xf0, 0x24, 0x0f, 0x13,
	0x41, 0xcb, 0xcc, 0x99, 0x34, 0xf4, 0xdb, 0x89, 0x69, 0xbb, 0xd1, 0xb7, 0x94, 0x2a, 0x3a, 0x3f,
	0xf0, 0xb2, 0x83, 0xf7, 0x79, 0xef, 0x50, 0x45, 0x90, 0xb2, 0x21, 0x94, 0x66, 0xaa, 0x48, 0xbf,
	0x71, 0x11, 0xde, 0x0f, 0xa1, 0xdf, 0x34, 0x56, 0xd7, 0x60, 0xec, 0x06, 0xaf, 0x8d, 0x6f, 0x11,
	0xc2, 0xcd, 0x9f, 0x83, 0x51, 0xcb, 0x50, 0x1b, 0xa6, 0x5a, 0xa6, 0x45, 0x63, 0x7b, 0x4c, 0x95,
	0x0e, 0x15, 0x4f, 0x79, 0xc6, 0xbf, 0xd7, 0x6e, 0x12, 0x7c, 0x0d, 0xd2, 0x7e, 0x0d, 0x8c, 0xd2,
	0x12, 0xf4, 0x6d, 0x13, 0xc2, 0xa8, 0x4c, 0xb8, 0x54, 0x7c, 0x60, 0x1b, 0x82, 0xa7, 0x41, 0xde,
	0xd4, 0x75, 0x83, 0x25, 0xe9, 0x6d, 0x62, 0x9a, 0x6a, 0xd5, 0xcd, 0xfb, 0xcb, 0x30, 0x15, 0x39,
	0xcb, 0xcc, 0xc8, 0x30, 0xb8, 0xc3, 0xc6, 0x68, 0x6c, 0x87, 0x8a, 0xe2, 0x37, 0xfe, 0x29, 0x4c,
	0x6e, 0xf0, 0x5d, 0xe4, 0xed, 0x27, 0xc3, 0x9a, 0xcf, 0xfa, 0x6d, 0xbd, 0xa1, 0xd5, 0x88, 0xc1,
	0xad, 0x67, 0x60, 0x60, 0xc7, 0x19, 0x61, 0x71, 0xe5, 0x3f, 0xf1, 0x67, 0x70, 0x5a, 0x88, 0x79,
	0xd6, 0x77, 0x48, 0xec, 0x87, 0x2c, 0xa4, 0x63, 0x6e, 0x48, 0x5d, 0x33, 0xa9, 0xa7, 0x07, 0xb9,
	0x44, 0xd1, 0xc5, 0xe2, 0x8f, 0x21, 0xfd, 0x5d, 0x7b, 0x1f, 0xde, 0x64, 0xfb, 0x17, 0xb7, 0x9f,
	0x83, 0x61, 0xbe, 0xa5, 0x95, 0xb4, 0x0a, 0x4b, 0x33, 0xe0, 0x43, 0x37, 0x2b, 0xb8, 0x0d, 0xe3,
	0x01, 0x41, 0x46, 0x65, 0x15, 0x06, 0x39, 0x8c, 0x31, 0x41, 0x9e, 0x3c, 0x63, 0x33, 0x8c, 0x88,
	0x40, 0xa2, 0xf3, 0xd0, 0xdf, 0xd2, 0x2d, 0x62, 0x66, 0x92, 0xb3, 0x7d, 0x4b, 0xc3, 0x17, 0x47,
	0x5c, 0x91, 0x2f, 0x75, 0x8b, 0x30, 0xb8, 0x03, 0xc1, 0x7f, 0x93, 0x02, 0xb6, 0xc5, 0x9a, 0xa5,
	0x1d, 0x2d, 0x3c, 0x66, 0xce, 0x0f, 0xf4, 0x73, 0x09, 0xc0, 0x3d, 0x5e, 0x32, 0x49, 0x4a, 0x6a,
	0x31, 0xef, 0x2c, 0x52, 0xde, 0x3e, 0x8b, 0xf2, 0xce, 0x71, 0xc5, 0xce, 0xa2, 0xfc, 0xa6, 0x5a,
	0xe5, 0x99, 0xbe, 0xfe, 0xc9, 0xeb, 0x83, 0xdc, 0x6a, 0xf7, 0x15, 0x66, 0x07, 0x9e, 0x47, 0xb2,
	0xe8, 0xb1, 0xf9, 0xe9, 0xe0, 0xc3, 0x47, 0xb9, 0xc4, 0x7f, 0x1f, 0xe5, 0x12, 0xf8, 0x1f, 0x12,
	0x4c, 0x04, 0xc9, 0xb3, 0xc8, 0x5d, 0x82, 0x21, 0x1e, 0x0f, 0x27, 0x57, 0x3b, 0x85, 0xce, 0x85,
	0xa2, 0xfb, 0x51, 0xfe, 0x9d, 0xed, 0xea, 0x9f, 0x63, 0x75, 0xfd, 0xf2, 0xeb, 0x83, 0xdc, 0xda,
	0x21, 0x1d, 0x74, 0x44, 0xbd, 0x1e, 0xe2, 0xef, 0xc0, 0x02, 0x75, 0xeb, 0x07, 0x5f, 0x6b, 0x16,
	0xa9, 0x6b, 0xa6, 0x45, 0x2a, 0x9c, 0xb1, 0xbd, 0x82, 0x86, 0xd9, 0x73, 0x66, 0xdd, 0x81, 0xc5,
	0x6e, 0x9a, 0x44, 0xaa, 0x9d, 0xa0, 0x2b, 0xcc, 0xa3, 0x35, 0x11, 0x3a, 0xd1, 0x0a, 0xf6, 0xd5,
	0x81, 0x45, 0x8c, 0x61, 0xf1, 0x03, 0x09, 0x46, 0xa9, 0x01, 0x5b, 0x5b, 0xaf, 0xac, 0xd0, 0xb7,
	0x79, 0x6a, 0x25, 0xe9, 0x5e, 0x70, 0xe1, 0xf0, 0x85, 0xef, 0xc8, 0x7b, 0x52, 0xe1, 0x2a, 0x9c,
	0xf6, 0xf0, 0x10, 0xdb, 0x62, 0xca, 0xc6, 0xb1, 0xd2, 0x89, 0xae, 0x03, 0x8a, 0xc0, 0xab, 0x1e,
	0xf1, 0xde, 0xa3, 0x7b, 0x0d, 0x90, 0x57, 0x8a, 0x59, 0x15, 0xe5, 0x27, 0x75, 0x2f, 0xbf, 0x3f,
	0x4a, 0x30, 0x43, 0x55, 0x5c, 0x57, 0x2d, 0xb5, 0x48, 0xb6, 0x89, 0x41, 0x1a, 0x65, 0x72, 0x8b,
	0xb4, 0x05, 0x89, 0x40, 0xc1, 0x49, 0x6f, 0xbf, 0xe0, 0xf0, 0x13, 0x09, 0xb2, 0x71, 0x24, 0x99,
	0xcf, 0x08, 0x52, 0x35, 0xd2, 0xe6, 0xa7, 0x02, 0xfd, 0x3e, 0x1e, 0xa5, 0xb4, 0x02, 0x93, 0x61,
	0xea, 0x3c, 0xb6, 0xa3, 0xd0, 0x57, 0x23, 0x6d, 0xb6, 0xc1, 0xd9, 0x9f, 0xf8, 0x36, 0xc8, 0x51,
	0x70, 0xe6, 0xa5, 0x02, 0x29, 0xfb, 0x3e, 0x1c, 0xbe, 0xf3, 0x39, 0x70, 0xe7, 0x92, 0x7c, 0xa3,
	0x61, 0x19, 0xed, 0x22, 0x05, 0xe2, 0x65, 0xa6, 0xee, 0x26, 0xbb, 0xb8, 0x16, 0x49, 0x59, 0x37,
	0x2a, 0xdc, 0xfc, 0x08, 0x24, 0x45, 0x5a, 0x25, 0xb5, 0x0a, 0xfe, 0x02, 0xa6, 0x22, 0xd1, 0xcc,
	0xfa, 0x87, 0x70, 0xc2, 0xa0, 0x23, 0xcc, 0x7e, 0xc6, 0xb5, 0x1f, 0x90, 0x60, 0x38, 0xfc, 0x07,
	0x09, 0xe6, 0x23, 0x34, 0x86, 0x2f, 0x6b, 0x3f, 0x82, 0x81, 0xb2, 0x41, 0x54, 0x4b, 0xe7, 0xc7,
	0xf3, 0xc6, 0xab, 0x83, 0xdc, 0x88, 0x73, 0x3c, 0xb3, 0x89, 0xa3, 0x9c, 0xce, 0x4c, 0x54, 0x64,
	0x47, 0xd2, 0xcd, 0x0e, 0xac, 0xb2, 0x3d, 0x2e, 0x9e, 0x1a, 0x73, 0xfb, 0x13, 0x18, 0x70, 0xdc,
	0xe1, 0x05, 0x15, 0xeb, 0x37, 0x2b, 0x2d, 0x0e, 0xc7, 0x7f, 0xe2, 0x79, 0x5b, 0xa8, 0xd7, 0x03,
	0x66, 0x8e, 0x51, 0x75, 0x3d, 0x97, 0x20, 0x17, 0xcb, 0xf2, 0x4d, 0x63, 0x70, 0x3c, 0x8a, 0xb0,
	0x00, 0xb3, 0xbe, 0xb5, 0xfe, 0x92, 0x18, 0xda, 0x76, 0xa0, 0x18, 0x66, 0x00, 0x0c, 0xe7, 0xd3,
	0xdd, 0x6b, 0x87, 0xd8, 0xc8, 0xcd, 0x0a, 0xd6, 0x60, 0xae, 0x83, 0x0a, 0x16, 0xa6, 0xeb, 0xf0,
	0x5e, 0x8b, 0x8e, 0x97, 0x7c, 0x85, 0x92, 0x8b, 0x0b, 0x96, 0xc9, 0xb4, 0x9c, 0x6c, 0x79, 0xb4,
	0xe1, 0xdf, 0x26, 0xe1, 0x83, 0x88, 0xd4, 0xe4, 0x16, 0x29, 0x23, 0x3b, 0x4f, 0x9b, 0x4d, 0x43,
	0x6f, 0x11, 0x03, 0xfd, 0x18, 0x06, 0x55, 0xf6, 0x1d, 0xbe, 0xdc, 0xf2, 0x99, 0x23, 0x94, 0x8f,
	0xd0, 0x7a, 0x0c, 0x2e, 0x5d, 0xf8, 0x61, 0x12, 0x3e, 0x3a, 0x44, 0x50, 0xc4, 0x92, 0x7c, 0x06,
	0x23, 0xbe, 0x25, 0xe1, 0x09, 0xdc, 0x6d, 0x4d, 0x58, 0x1e, 0xbf, 0xe7, 0x5d, 0x99, 0x63, 0x92,
	0xcd, 0xbf, 0x4f, 0xc2, 0x72, 0x0f, 0xa1, 0x60, 0x5f, 0xc4, 0x40, 0x65, 0xe0, 0x89, 0x2c, 0x32,
	0xe4, 0xc6, 0xab, 0x83, 0xdc, 0xa8, 0x93, 0x21, 0x62, 0xea, 0x08, 0x29, 0xe2, 0xea, 0x3d, 0x0e,
	0x39, 0xf2, 0xab, 0x24, 0xac, 0x1e, 0x26, 0x30, 0xef, 0x72, 0x92, 0x3c, 0xe6, 0x47, 0x6f, 0x68,
	0x57, 0xf7, 0x87, 0xe3, 0x38, 0x9c, 0x40, 0xbf, 0xe0, 0x09, 0xdd, 0x85, 0xeb, 0x3b, 0xbc, 0x5e,
	0x17, 0xff, 0x32, 0x01, 0xfd, 0x34, 0x06, 0xe8, 0x0e, 0xa4, 0xa3, 0x3a, 0x74, 0x68, 0x21, 0xb2,
	0xc3, 0x13, 0xbc, 0x4a, 0xc9, 0x33, 0xd1, 0x8d, 0x20, 0x66, 0x13, 0x27, 0xd0, 0xf7, 0x61, 0xc4,
	0xdf, 0xb7, 0x42, 0x9e, 0xb0, 0x45, 0xf6, 0xd2, 0xe4, 0xd9, 0x78, 0x80, 0x50, 0xfb, 0x15, 0x9c,
	0x0a, 0x34, 0xac, 0x50, 0x40, 0x2c, 0xdc, 0xf9, 0x92, 0xe7, 0x3a, 0x20, 0x3c, 0x9a, 0x51, 0xb8,
	0xb3, 0x83, 0xce, 0x44, 0xb5, 0x44, 0x82, 0xc4, 0xa7, 0x22, 0x40, 0xb1, 0x9a, 0x59, 0xd7, 0x26,
	0x46, 0xb3, 0xbf, 0xa7, 0xd3, 0x4d, 0xf3, 0x1d, 0x38, 0x1d, 0xea, 0xc3, 0x22, 0xdc, 0xa9, 0x49,
	0xcb, 0xf4, 0x9e, 0xe9, 0x88, 0x11, 0xfa, 0xbf, 0x80, 0x93, 0xde, 0xde, 0x1a, 0x9a, 0x89, 0xe9,
	0xb9, 0x31, 0xad, 0xd9, 0xb8, 0x69, 0xa1, 0xb0, 0x02, 0x63, 0x11, 0x9d, 0x37, 0x34, 0xef, 0xc9,
	0xa6, 0xd8, 0xb6, 0x9d, 0xbc, 0xd0, 0x05, 0x25, 0xac, 0xb4, 0x60, 0x90, 0x3f, 0xff, 0x91, 0x87,
	0x53, 0x54, 0xd7, 0x4a, 0xce, 0xc5, 0xce, 0x33, 0x75, 0xe7, 0xee, 0xff, 0xfd, 0xdf, 0xbf, 0x4b,
	0x9e, 0x41, 0x73, 0x4a, 0xa8, 0x73, 0x6f, 0x2a, 0x7b, 0x9e, 0x97, 0xf3, 0x3e, 0xaa, 0xc1, 0x90,
	0x68, 0xd1, 0xa0, 0x38, 0xc5, 0x51, 0xe9, 0x1e, 0xdd, 0xdd, 0xc1, 0x53, 0xd4, 0xf4, 0x38, 0x1a,
	0x8b, 0x30, 0x8d, 0xfe, 0x2c, 0xc1, 0x64, 0x6c, 0xbf, 0x03, 0x29, 0x01, 0xe5, 0xdd, 0x7a, 0x2c,
	0xf2, 0x87, 0xbd, 0x0b, 0x30, 0x76, 0x8b, 0x94, 0xdd, 0x2c, 0xca, 0xba, 0xec, 0x9c, 0x76, 0x49,
	0x20, 0x2a, 0x05, 0x48, 0xd9, 0x92, 0x48, 0x0e, 0x58, 0xf0, 0xf4, 0x52, 0xbc, 0x79, 0x1e, 0xea,
	0x6f, 0xe0, 0x04, 0xd2, 0xa0, 0x9f, 0x36, 0x1f, 0x50, 0x14, 0x4e, 0xb8, 0x30, 0x1d, 0x3d, 0xc9,
	0xb4, 0x2c, 0x50, 0xba, 0x39, 0x34, 0xe3, 0xa7, 0x1b, 0x64, 0xfb, 0x40, 0x82, 0x74, 0xa1, 0x5e,
	0x0f, 0xf5, 0x00, 0xd0, 0xd9, 0x80, 0xf6, 0xb8, 0x56, 0x86, 0xbc, 0xd4, 0x1d, 0x18, 0xbf, 0xbe,
	0xf4, 0x1f, 0x51, 0xb4, 0xaf, 0xb0, 0x0f, 0xc8, 0x27, 0xb9, 0xde, 0xbe, 0x45, 0xda, 0xde, 0x5d,
	0x23, 0xf6, 0xc1, 0x2f, 0xcf, 0x77, 0x06, 0x31, 0xeb, 0xd3, 0xd4, 0xfa, 0x04, 0x4a, 0xfb, 0xad,
	0x2b, 0x7b, 0x35, 0xd2, 0xde, 0x47, 0xbf, 0x94, 0x60, 0xc4, 0x7f, 0xba, 0xa1, 0xa0, 0xda, 0xc8,
	0xe7, 0xbe, 0xb7, 0x4a, 0x3b, 0x3c, 0xf3, 0xa3, 0xb2, 0xc7, 0xf3, 0x7f, 0x2f, 0x1b, 0xaa, 0xec,
	0xd9, 0xeb, 0xf1, 0x58, 0x82, 0x4c, 0xdc, 0xe3, 0x19, 0xe5, 0x3b, 0xda, 0x0a, 0x9f, 0x30, 0x4a,
	0xcf, 0x78, 0xc6, 0x72, 0x99, 0xb2, 0x5c, 0x44, 0xf3, 0xb1, 0x2c, 0x4d, 0x65, 0x8f, 0xbd, 0xff,
	0xf7, 0xd1, 0x6f, 0x24, 0x40, 0xe1, 0xe7, 0x2d, 0x0a, 0x26, 0x44, 0xec, 0x3b, 0x5d, 0x3e, 0xd7,
	0x03, 0x32, 0x3e, 0x7e, 0x6a, 0xdd, 0x4e, 0x61, 0x3f, 0x3b, 0xf4, 0x57, 0x09, 0xa6, 0x3a, 0xdc,
	0x76, 0xd0, 0xf9, 0x98, 0x90, 0x44, 0x3c, 0x5e, 0xe5, 0x0f, 0x7a, 0xc2, 0x32, 0x82, 0x6b, 0x94,
	0xa0, 0x82, 0x56, 0x22, 0x42, 0xe7, 0xbb, 0x56, 0x29, 0x7b, 0xee, 0x8b, 0x78, 0x1f, 0xfd, 0x47,
	0x82, 0xb3, 0xbd, 0xbe, 0x38, 0x2e, 0x75, 0x5c, 0xce, 0x58, 0x39, 0xf9, 0x1b, 0x47, 0x93, 0x13,
	0xae, 0x6d, 0x50, 0xd7, 0xae, 0xa2, 0x2b, 0x9d, 0x5c, 0x73, 0xc4, 0x4b, 0x5b, 0xe2, 0x9b, 0x18,
	0xc2, 0x53, 0x62, 0xec, 0xa3, 0x7f, 0x49, 0xb0, 0xd8, 0xe3, 0xd3, 0x7b, 0xed, 0x50, 0x7c, 0xb9,
	0x98, 0x7c, 0xf5, 0x48, 0x62, 0xc2, 0xcb, 0x02, 0xf5, 0xf2, 0x0a, 0xba, 0xdc, 0x9b, 0x97, 0xfc,
	0x19, 0xaf, 0xec, 0xf1, 0xaf, 0x7d, 0xf4, 0x44, 0x82, 0x5c, 0xb7, 0x97, 0x41, 0xbe, 0x5b, 0xce,
	0xfb, 0xf1, 0xf2, 0xa5, 0xc3, 0xe1, 0x85, 0x3b, 0x79, 0xea, 0xce, 0x12, 0x5a, 0x8c, 0x29, 0x98,
	0x80, 0x4b, 0xeb, 0xdf, 0x7c, 0xfa, 0x22, 0x2b, 0x3d, 0x7b, 0x91, 0x95, 0x9e, 0xbf, 0xc8, 0x4a,
	0xbf, 0x7e, 0x99, 0x4d, 0x3c, 0x7b, 0x99, 0x4d, 0xfc, 0xf3, 0x65, 0x36, 0xf1, 0xc3, 0x05, 0xcf,
	0x3d, 0xfc, 0x96, 0x66, 0xa8, 0x1b, 0xba, 0x41, 0x14, 0x93, 0xd4, 0x54, 0x4d, 0xb9, 0x47, 0xf5,
	0xd2, 0xab, 0xf8, 0xd6, 0x09, 0xfa, 0x0f, 0xf8, 0x8f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xee,
	0x96, 0x1e, 0x7a, 0xe2, 0x20, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns the permissions an actor has by address.
	PermissionsByAddress(ctx context.Context, in *PermissionsByAddressRequest, opts ...grpc.CallOption) (*PermissionsResponse, error)
	// Returns the roles that are assigned to an address.
	RolesByAddress(ctx context.Context, in *RolesByAddressRequest, opts ...grpc.CallOption) (*RolesByAddressResponse, error)
	// RolePermissions returns the permissions of the roles available in the registry.
	RolePermissions(ctx context.Context, in *RolePermissionsRequest, opts ...grpc.CallOption) (*RolePermissionsResponse, error)
	// CouncilorByAddress returns the councilor object from its address
	CouncilorByAddress(ctx context.Context, in *CouncilorByAddressRequest, opts ...grpc.CallOption) (*CouncilorResponse, error)
	// CouncilorByMoniker returns the councilor object from its moniker
	CouncilorByMoniker(ctx context.Context, in *CouncilorByMonikerRequest, opts ...grpc.CallOption) (*CouncilorResponse, error)
	// NetworkProperties returns network properties
	NetworkProperties(ctx context.Context, in *NetworkPropertiesRequest, opts ...grpc.CallOption) (*NetworkPropertiesResponse, error)
	// ExecutionFee returns execution fee from msg type
	ExecutionFee(ctx context.Context, in *ExecutionFeeRequest, opts ...grpc.CallOption) (*ExecutionFeeResponse, error)
	// PoorNetworkMessages returns poor network messages
	PoorNetworkMessages(ctx context.Context, in *PoorNetworkMessagesRequest, opts ...grpc.CallOption) (*PoorNetworkMessagesResponse, error)
	// Proposal queries proposal details based on ProposalID.
	Proposal(ctx context.Context, in *QueryProposalRequest, opts ...grpc.CallOption) (*QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(ctx context.Context, in *QueryProposalsRequest, opts ...grpc.CallOption) (*QueryProposalsResponse, error)
	// WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
	WhitelistedProposalVoters(ctx context.Context, in *QueryWhitelistedProposalVotersRequest, opts ...grpc.CallOption) (*QueryWhitelistedProposalVotersResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(ctx context.Context, in *QueryVoteRequest, opts ...grpc.CallOption) (*QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(ctx context.Context, in *QueryVotesRequest, opts ...grpc.CallOption) (*QueryVotesResponse, error)
	// Query all data reference keys with pagination.
	AllDataReferenceKeys(ctx context.Context, in *QueryDataReferenceKeysRequest, opts ...grpc.CallOption) (*QueryDataReferenceKeysResponse, error)
	// Query data reference by key.
	DataReferenceByKey(ctx context.Context, in *QueryDataReferenceRequest, opts ...grpc.CallOption) (*QueryDataReferenceResponse, error)
	// Query identity record by id
	IdentityRecord(ctx context.Context, in *QueryIdentityRecordRequest, opts ...grpc.CallOption) (*QueryIdentityRecordResponse, error)
	// Query identity records by records creator
	IdentityRecordsByAddress(ctx context.Context, in *QueryIdentityRecordsByAddressRequest, opts ...grpc.CallOption) (*QueryIdentityRecordsByAddressResponse, error)
	// Query all identity records
	AllIdentityRecords(ctx context.Context, in *QueryAllIdentityRecordsRequest, opts ...grpc.CallOption) (*QueryAllIdentityRecordsResponse, error)
	// Query identity record verify request by id
	IdentityRecordVerifyRequest(ctx context.Context, in *QueryIdentityVerifyRecordRequest, opts ...grpc.CallOption) (*QueryIdentityVerifyRecordResponse, error)
	// Query identity records verify requests by requester
	IdentityRecordVerifyRequestsByRequester(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByRequester, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error)
	// Query identity records verify requests by approver
	IdentityRecordVerifyRequestsByApprover(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByApprover, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error)
	// Query all identity records verify requests
	AllIdentityRecordVerifyRequests(ctx context.Context, in *QueryAllIdentityRecordVerifyRequests, opts ...grpc.CallOption) (*QueryAllIdentityRecordVerifyRequestsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) PermissionsByAddress(ctx context.Context, in *PermissionsByAddressRequest, opts ...grpc.CallOption) (*PermissionsResponse, error) {
	out := new(PermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/PermissionsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RolesByAddress(ctx context.Context, in *RolesByAddressRequest, opts ...grpc.CallOption) (*RolesByAddressResponse, error) {
	out := new(RolesByAddressResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/RolesByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RolePermissions(ctx context.Context, in *RolePermissionsRequest, opts ...grpc.CallOption) (*RolePermissionsResponse, error) {
	out := new(RolePermissionsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/RolePermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CouncilorByAddress(ctx context.Context, in *CouncilorByAddressRequest, opts ...grpc.CallOption) (*CouncilorResponse, error) {
	out := new(CouncilorResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/CouncilorByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CouncilorByMoniker(ctx context.Context, in *CouncilorByMonikerRequest, opts ...grpc.CallOption) (*CouncilorResponse, error) {
	out := new(CouncilorResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/CouncilorByMoniker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NetworkProperties(ctx context.Context, in *NetworkPropertiesRequest, opts ...grpc.CallOption) (*NetworkPropertiesResponse, error) {
	out := new(NetworkPropertiesResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/NetworkProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ExecutionFee(ctx context.Context, in *ExecutionFeeRequest, opts ...grpc.CallOption) (*ExecutionFeeResponse, error) {
	out := new(ExecutionFeeResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/ExecutionFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoorNetworkMessages(ctx context.Context, in *PoorNetworkMessagesRequest, opts ...grpc.CallOption) (*PoorNetworkMessagesResponse, error) {
	out := new(PoorNetworkMessagesResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/PoorNetworkMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposal(ctx context.Context, in *QueryProposalRequest, opts ...grpc.CallOption) (*QueryProposalResponse, error) {
	out := new(QueryProposalResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/Proposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposals(ctx context.Context, in *QueryProposalsRequest, opts ...grpc.CallOption) (*QueryProposalsResponse, error) {
	out := new(QueryProposalsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/Proposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WhitelistedProposalVoters(ctx context.Context, in *QueryWhitelistedProposalVotersRequest, opts ...grpc.CallOption) (*QueryWhitelistedProposalVotersResponse, error) {
	out := new(QueryWhitelistedProposalVotersResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/WhitelistedProposalVoters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vote(ctx context.Context, in *QueryVoteRequest, opts ...grpc.CallOption) (*QueryVoteResponse, error) {
	out := new(QueryVoteResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Votes(ctx context.Context, in *QueryVotesRequest, opts ...grpc.CallOption) (*QueryVotesResponse, error) {
	out := new(QueryVotesResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/Votes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllDataReferenceKeys(ctx context.Context, in *QueryDataReferenceKeysRequest, opts ...grpc.CallOption) (*QueryDataReferenceKeysResponse, error) {
	out := new(QueryDataReferenceKeysResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/AllDataReferenceKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataReferenceByKey(ctx context.Context, in *QueryDataReferenceRequest, opts ...grpc.CallOption) (*QueryDataReferenceResponse, error) {
	out := new(QueryDataReferenceResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/DataReferenceByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecord(ctx context.Context, in *QueryIdentityRecordRequest, opts ...grpc.CallOption) (*QueryIdentityRecordResponse, error) {
	out := new(QueryIdentityRecordResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/IdentityRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordsByAddress(ctx context.Context, in *QueryIdentityRecordsByAddressRequest, opts ...grpc.CallOption) (*QueryIdentityRecordsByAddressResponse, error) {
	out := new(QueryIdentityRecordsByAddressResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/IdentityRecordsByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIdentityRecords(ctx context.Context, in *QueryAllIdentityRecordsRequest, opts ...grpc.CallOption) (*QueryAllIdentityRecordsResponse, error) {
	out := new(QueryAllIdentityRecordsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/AllIdentityRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequest(ctx context.Context, in *QueryIdentityVerifyRecordRequest, opts ...grpc.CallOption) (*QueryIdentityVerifyRecordResponse, error) {
	out := new(QueryIdentityVerifyRecordResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/IdentityRecordVerifyRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequestsByRequester(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByRequester, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error) {
	out := new(QueryIdentityRecordVerifyRequestsByRequesterResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/IdentityRecordVerifyRequestsByRequester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdentityRecordVerifyRequestsByApprover(ctx context.Context, in *QueryIdentityRecordVerifyRequestsByApprover, opts ...grpc.CallOption) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error) {
	out := new(QueryIdentityRecordVerifyRequestsByApproverResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/IdentityRecordVerifyRequestsByApprover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIdentityRecordVerifyRequests(ctx context.Context, in *QueryAllIdentityRecordVerifyRequests, opts ...grpc.CallOption) (*QueryAllIdentityRecordVerifyRequestsResponse, error) {
	out := new(QueryAllIdentityRecordVerifyRequestsResponse)
	err := c.cc.Invoke(ctx, "/kira.gov.Query/AllIdentityRecordVerifyRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns the permissions an actor has by address.
	PermissionsByAddress(context.Context, *PermissionsByAddressRequest) (*PermissionsResponse, error)
	// Returns the roles that are assigned to an address.
	RolesByAddress(context.Context, *RolesByAddressRequest) (*RolesByAddressResponse, error)
	// RolePermissions returns the permissions of the roles available in the registry.
	RolePermissions(context.Context, *RolePermissionsRequest) (*RolePermissionsResponse, error)
	// CouncilorByAddress returns the councilor object from its address
	CouncilorByAddress(context.Context, *CouncilorByAddressRequest) (*CouncilorResponse, error)
	// CouncilorByMoniker returns the councilor object from its moniker
	CouncilorByMoniker(context.Context, *CouncilorByMonikerRequest) (*CouncilorResponse, error)
	// NetworkProperties returns network properties
	NetworkProperties(context.Context, *NetworkPropertiesRequest) (*NetworkPropertiesResponse, error)
	// ExecutionFee returns execution fee from msg type
	ExecutionFee(context.Context, *ExecutionFeeRequest) (*ExecutionFeeResponse, error)
	// PoorNetworkMessages returns poor network messages
	PoorNetworkMessages(context.Context, *PoorNetworkMessagesRequest) (*PoorNetworkMessagesResponse, error)
	// Proposal queries proposal details based on ProposalID.
	Proposal(context.Context, *QueryProposalRequest) (*QueryProposalResponse, error)
	// Proposals queries all proposals based on given status.
	Proposals(context.Context, *QueryProposalsRequest) (*QueryProposalsResponse, error)
	// WhitelistedProposalVoters returns whitelisted voters for a proposal for tracking
	WhitelistedProposalVoters(context.Context, *QueryWhitelistedProposalVotersRequest) (*QueryWhitelistedProposalVotersResponse, error)
	// Vote queries voted information based on proposalID, voterAddr.
	Vote(context.Context, *QueryVoteRequest) (*QueryVoteResponse, error)
	// Votes queries votes of a given proposal.
	Votes(context.Context, *QueryVotesRequest) (*QueryVotesResponse, error)
	// Query all data reference keys with pagination.
	AllDataReferenceKeys(context.Context, *QueryDataReferenceKeysRequest) (*QueryDataReferenceKeysResponse, error)
	// Query data reference by key.
	DataReferenceByKey(context.Context, *QueryDataReferenceRequest) (*QueryDataReferenceResponse, error)
	// Query identity record by id
	IdentityRecord(context.Context, *QueryIdentityRecordRequest) (*QueryIdentityRecordResponse, error)
	// Query identity records by records creator
	IdentityRecordsByAddress(context.Context, *QueryIdentityRecordsByAddressRequest) (*QueryIdentityRecordsByAddressResponse, error)
	// Query all identity records
	AllIdentityRecords(context.Context, *QueryAllIdentityRecordsRequest) (*QueryAllIdentityRecordsResponse, error)
	// Query identity record verify request by id
	IdentityRecordVerifyRequest(context.Context, *QueryIdentityVerifyRecordRequest) (*QueryIdentityVerifyRecordResponse, error)
	// Query identity records verify requests by requester
	IdentityRecordVerifyRequestsByRequester(context.Context, *QueryIdentityRecordVerifyRequestsByRequester) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error)
	// Query identity records verify requests by approver
	IdentityRecordVerifyRequestsByApprover(context.Context, *QueryIdentityRecordVerifyRequestsByApprover) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error)
	// Query all identity records verify requests
	AllIdentityRecordVerifyRequests(context.Context, *QueryAllIdentityRecordVerifyRequests) (*QueryAllIdentityRecordVerifyRequestsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) PermissionsByAddress(ctx context.Context, req *PermissionsByAddressRequest) (*PermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermissionsByAddress not implemented")
}
func (*UnimplementedQueryServer) RolesByAddress(ctx context.Context, req *RolesByAddressRequest) (*RolesByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolesByAddress not implemented")
}
func (*UnimplementedQueryServer) RolePermissions(ctx context.Context, req *RolePermissionsRequest) (*RolePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RolePermissions not implemented")
}
func (*UnimplementedQueryServer) CouncilorByAddress(ctx context.Context, req *CouncilorByAddressRequest) (*CouncilorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilorByAddress not implemented")
}
func (*UnimplementedQueryServer) CouncilorByMoniker(ctx context.Context, req *CouncilorByMonikerRequest) (*CouncilorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CouncilorByMoniker not implemented")
}
func (*UnimplementedQueryServer) NetworkProperties(ctx context.Context, req *NetworkPropertiesRequest) (*NetworkPropertiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NetworkProperties not implemented")
}
func (*UnimplementedQueryServer) ExecutionFee(ctx context.Context, req *ExecutionFeeRequest) (*ExecutionFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutionFee not implemented")
}
func (*UnimplementedQueryServer) PoorNetworkMessages(ctx context.Context, req *PoorNetworkMessagesRequest) (*PoorNetworkMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoorNetworkMessages not implemented")
}
func (*UnimplementedQueryServer) Proposal(ctx context.Context, req *QueryProposalRequest) (*QueryProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposal not implemented")
}
func (*UnimplementedQueryServer) Proposals(ctx context.Context, req *QueryProposalsRequest) (*QueryProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposals not implemented")
}
func (*UnimplementedQueryServer) WhitelistedProposalVoters(ctx context.Context, req *QueryWhitelistedProposalVotersRequest) (*QueryWhitelistedProposalVotersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistedProposalVoters not implemented")
}
func (*UnimplementedQueryServer) Vote(ctx context.Context, req *QueryVoteRequest) (*QueryVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedQueryServer) Votes(ctx context.Context, req *QueryVotesRequest) (*QueryVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Votes not implemented")
}
func (*UnimplementedQueryServer) AllDataReferenceKeys(ctx context.Context, req *QueryDataReferenceKeysRequest) (*QueryDataReferenceKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllDataReferenceKeys not implemented")
}
func (*UnimplementedQueryServer) DataReferenceByKey(ctx context.Context, req *QueryDataReferenceRequest) (*QueryDataReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataReferenceByKey not implemented")
}
func (*UnimplementedQueryServer) IdentityRecord(ctx context.Context, req *QueryIdentityRecordRequest) (*QueryIdentityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecord not implemented")
}
func (*UnimplementedQueryServer) IdentityRecordsByAddress(ctx context.Context, req *QueryIdentityRecordsByAddressRequest) (*QueryIdentityRecordsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordsByAddress not implemented")
}
func (*UnimplementedQueryServer) AllIdentityRecords(ctx context.Context, req *QueryAllIdentityRecordsRequest) (*QueryAllIdentityRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIdentityRecords not implemented")
}
func (*UnimplementedQueryServer) IdentityRecordVerifyRequest(ctx context.Context, req *QueryIdentityVerifyRecordRequest) (*QueryIdentityVerifyRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequest not implemented")
}
func (*UnimplementedQueryServer) IdentityRecordVerifyRequestsByRequester(ctx context.Context, req *QueryIdentityRecordVerifyRequestsByRequester) (*QueryIdentityRecordVerifyRequestsByRequesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequestsByRequester not implemented")
}
func (*UnimplementedQueryServer) IdentityRecordVerifyRequestsByApprover(ctx context.Context, req *QueryIdentityRecordVerifyRequestsByApprover) (*QueryIdentityRecordVerifyRequestsByApproverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdentityRecordVerifyRequestsByApprover not implemented")
}
func (*UnimplementedQueryServer) AllIdentityRecordVerifyRequests(ctx context.Context, req *QueryAllIdentityRecordVerifyRequests) (*QueryAllIdentityRecordVerifyRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIdentityRecordVerifyRequests not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_PermissionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PermissionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/PermissionsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PermissionsByAddress(ctx, req.(*PermissionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RolesByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolesByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RolesByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/RolesByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RolesByAddress(ctx, req.(*RolesByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RolePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RolePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/RolePermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RolePermissions(ctx, req.(*RolePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CouncilorByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouncilorByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CouncilorByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/CouncilorByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CouncilorByAddress(ctx, req.(*CouncilorByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CouncilorByMoniker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CouncilorByMonikerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CouncilorByMoniker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/CouncilorByMoniker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CouncilorByMoniker(ctx, req.(*CouncilorByMonikerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NetworkProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NetworkProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/NetworkProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NetworkProperties(ctx, req.(*NetworkPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ExecutionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ExecutionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/ExecutionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ExecutionFee(ctx, req.(*ExecutionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoorNetworkMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoorNetworkMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoorNetworkMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/PoorNetworkMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoorNetworkMessages(ctx, req.(*PoorNetworkMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/Proposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposal(ctx, req.(*QueryProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/Proposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposals(ctx, req.(*QueryProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WhitelistedProposalVoters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryWhitelistedProposalVotersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WhitelistedProposalVoters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/WhitelistedProposalVoters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WhitelistedProposalVoters(ctx, req.(*QueryWhitelistedProposalVotersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vote(ctx, req.(*QueryVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Votes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Votes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/Votes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Votes(ctx, req.(*QueryVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllDataReferenceKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataReferenceKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllDataReferenceKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/AllDataReferenceKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllDataReferenceKeys(ctx, req.(*QueryDataReferenceKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataReferenceByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataReferenceByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/DataReferenceByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataReferenceByKey(ctx, req.(*QueryDataReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/IdentityRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecord(ctx, req.(*QueryIdentityRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/IdentityRecordsByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordsByAddress(ctx, req.(*QueryIdentityRecordsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIdentityRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIdentityRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIdentityRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/AllIdentityRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIdentityRecords(ctx, req.(*QueryAllIdentityRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityVerifyRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/IdentityRecordVerifyRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequest(ctx, req.(*QueryIdentityVerifyRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequestsByRequester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordVerifyRequestsByRequester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByRequester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/IdentityRecordVerifyRequestsByRequester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByRequester(ctx, req.(*QueryIdentityRecordVerifyRequestsByRequester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdentityRecordVerifyRequestsByApprover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIdentityRecordVerifyRequestsByApprover)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByApprover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/IdentityRecordVerifyRequestsByApprover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdentityRecordVerifyRequestsByApprover(ctx, req.(*QueryIdentityRecordVerifyRequestsByApprover))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIdentityRecordVerifyRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIdentityRecordVerifyRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIdentityRecordVerifyRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.gov.Query/AllIdentityRecordVerifyRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIdentityRecordVerifyRequests(ctx, req.(*QueryAllIdentityRecordVerifyRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.gov.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PermissionsByAddress",
			Handler:    _Query_PermissionsByAddress_Handler,
		},
		{
			MethodName: "RolesByAddress",
			Handler:    _Query_RolesByAddress_Handler,
		},
		{
			MethodName: "RolePermissions",
			Handler:    _Query_RolePermissions_Handler,
		},
		{
			MethodName: "CouncilorByAddress",
			Handler:    _Query_CouncilorByAddress_Handler,
		},
		{
			MethodName: "CouncilorByMoniker",
			Handler:    _Query_CouncilorByMoniker_Handler,
		},
		{
			MethodName: "NetworkProperties",
			Handler:    _Query_NetworkProperties_Handler,
		},
		{
			MethodName: "ExecutionFee",
			Handler:    _Query_ExecutionFee_Handler,
		},
		{
			MethodName: "PoorNetworkMessages",
			Handler:    _Query_PoorNetworkMessages_Handler,
		},
		{
			MethodName: "Proposal",
			Handler:    _Query_Proposal_Handler,
		},
		{
			MethodName: "Proposals",
			Handler:    _Query_Proposals_Handler,
		},
		{
			MethodName: "WhitelistedProposalVoters",
			Handler:    _Query_WhitelistedProposalVoters_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Query_Vote_Handler,
		},
		{
			MethodName: "Votes",
			Handler:    _Query_Votes_Handler,
		},
		{
			MethodName: "AllDataReferenceKeys",
			Handler:    _Query_AllDataReferenceKeys_Handler,
		},
		{
			MethodName: "DataReferenceByKey",
			Handler:    _Query_DataReferenceByKey_Handler,
		},
		{
			MethodName: "IdentityRecord",
			Handler:    _Query_IdentityRecord_Handler,
		},
		{
			MethodName: "IdentityRecordsByAddress",
			Handler:    _Query_IdentityRecordsByAddress_Handler,
		},
		{
			MethodName: "AllIdentityRecords",
			Handler:    _Query_AllIdentityRecords_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequest",
			Handler:    _Query_IdentityRecordVerifyRequest_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequestsByRequester",
			Handler:    _Query_IdentityRecordVerifyRequestsByRequester_Handler,
		},
		{
			MethodName: "IdentityRecordVerifyRequestsByApprover",
			Handler:    _Query_IdentityRecordVerifyRequestsByApprover_Handler,
		},
		{
			MethodName: "AllIdentityRecordVerifyRequests",
			Handler:    _Query_AllIdentityRecordVerifyRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/gov/query.proto",
}

func (m *NetworkPropertiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPropertiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPropertiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NetworkPropertiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPropertiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPropertiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolesByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolesByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolesByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolesByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolesByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolesByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA4 := make([]byte, len(m.Roles)*10)
		var j3 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RolePermissionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolePermissionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolePermissionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Role != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RolePermissionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RolePermissionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RolePermissionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Permissions != nil {
		{
			size, err := m.Permissions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TransactionType) > 0 {
		i -= len(m.TransactionType)
		copy(dAtA[i:], m.TransactionType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TransactionType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecutionFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecutionFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExecutionFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		{
			size, err := m.Fee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoorNetworkMessagesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoorNetworkMessagesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoorNetworkMessagesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoorNetworkMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoorNetworkMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoorNetworkMessagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for iNdEx := len(m.Messages) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Messages[iNdEx])
			copy(dAtA[i:], m.Messages[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Messages[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CouncilorByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouncilorByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouncilorByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CouncilorByMonikerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouncilorByMonikerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouncilorByMonikerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CouncilorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CouncilorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CouncilorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Councilor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProposalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Proposal.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedProposalVotersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedProposalVotersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedProposalVotersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryWhitelistedProposalVotersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWhitelistedProposalVotersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryWhitelistedProposalVotersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vote.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryVotesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryVotesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVotesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVotesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for iNdEx := len(m.Votes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Votes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataReferenceKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataReferenceKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataReferenceKeysRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataReferenceKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataReferenceKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataReferenceKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataReferenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataReferenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataReferenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDataReferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDataReferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDataReferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		{
			size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordsByAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordsByAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordsByAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for iNdEx := len(m.Keys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Keys[iNdEx])
			copy(dAtA[i:], m.Keys[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Keys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordsByAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordsByAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordsByAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentityRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentityRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentityRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentityRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentityRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentityRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityVerifyRecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityVerifyRecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityVerifyRecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityVerifyRecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityVerifyRecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityVerifyRecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyRecord != nil {
		{
			size, err := m.VerifyRecord.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Approver) > 0 {
		i -= len(m.Approver)
		copy(dAtA[i:], m.Approver)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Approver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifyRecords) > 0 {
		for iNdEx := len(m.VerifyRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerifyRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Requester) > 0 {
		i -= len(m.Requester)
		copy(dAtA[i:], m.Requester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Requester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifyRecords) > 0 {
		for iNdEx := len(m.VerifyRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerifyRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentityRecordVerifyRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentityRecordVerifyRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentityRecordVerifyRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.VerifyRecords) > 0 {
		for iNdEx := len(m.VerifyRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VerifyRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetworkPropertiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NetworkPropertiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PermissionsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RolesByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *RolesByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *RolePermissionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovQuery(uint64(m.Role))
	}
	return n
}

func (m *RolePermissionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Permissions != nil {
		l = m.Permissions.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExecutionFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TransactionType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ExecutionFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PoorNetworkMessagesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoorNetworkMessagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Messages) > 0 {
		for _, s := range m.Messages {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CouncilorByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CouncilorByMonikerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CouncilorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Councilor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProposalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Proposal.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryWhitelistedProposalVotersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryWhitelistedProposalVotersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryVoteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vote.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryVotesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovQuery(uint64(m.ProposalId))
	}
	return n
}

func (m *QueryVotesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Votes) > 0 {
		for _, e := range m.Votes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDataReferenceKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataReferenceKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataReferenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDataReferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryIdentityRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordsByAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryIdentityRecordsByAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllIdentityRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIdentityRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityVerifyRecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryIdentityVerifyRecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifyRecord != nil {
		l = m.VerifyRecord.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordVerifyRequestsByApprover) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Approver)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VerifyRecords) > 0 {
		for _, e := range m.VerifyRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordVerifyRequestsByRequester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Requester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VerifyRecords) > 0 {
		for _, e := range m.VerifyRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIdentityRecordVerifyRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIdentityRecordVerifyRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.VerifyRecords) > 0 {
		for _, e := range m.VerifyRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetworkPropertiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPropertiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPropertiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPropertiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPropertiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPropertiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = &NetworkProperties{}
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = append(m.ValAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddr == nil {
				m.ValAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Permissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolesByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolesByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolesByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = append(m.ValAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddr == nil {
				m.ValAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolesByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolesByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolesByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolePermissionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolePermissionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolePermissionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RolePermissionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RolePermissionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RolePermissionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Permissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Permissions == nil {
				m.Permissions = &Permissions{}
			}
			if err := m.Permissions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransactionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecutionFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecutionFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecutionFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &ExecutionFee{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoorNetworkMessagesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoorNetworkMessagesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoorNetworkMessagesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoorNetworkMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoorNetworkMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoorNetworkMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Messages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Messages = append(m.Messages, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouncilorByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouncilorByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouncilorByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = append(m.ValAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ValAddr == nil {
				m.ValAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouncilorByMonikerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouncilorByMonikerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouncilorByMonikerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CouncilorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CouncilorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CouncilorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Councilor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Councilor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, Vote{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedProposalVotersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedProposalVotersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedProposalVotersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWhitelistedProposalVotersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWhitelistedProposalVotersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWhitelistedProposalVotersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, NetworkActor{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVotesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVotesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVotesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Votes = append(m.Votes, Vote{})
			if err := m.Votes[len(m.Votes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataReferenceKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataReferenceKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataReferenceKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataReferenceKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataReferenceKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataReferenceKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataReferenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataReferenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataReferenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDataReferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDataReferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDataReferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &DataRegistryEntry{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &IdentityRecord{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordsByAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordsByAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordsByAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordsByAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordsByAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordsByAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, IdentityRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentityRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentityRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentityRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentityRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentityRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentityRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, IdentityRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityVerifyRecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityVerifyRecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityVerifyRecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityVerifyRecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityVerifyRecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityVerifyRecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifyRecord == nil {
				m.VerifyRecord = &IdentityRecordsVerify{}
			}
			if err := m.VerifyRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordVerifyRequestsByApprover) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByApprover: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByApprover: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Approver", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Approver = append(m.Approver[:0], dAtA[iNdEx:postIndex]...)
			if m.Approver == nil {
				m.Approver = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordVerifyRequestsByApproverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByApproverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByApproverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyRecords = append(m.VerifyRecords, IdentityRecordsVerify{})
			if err := m.VerifyRecords[len(m.VerifyRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordVerifyRequestsByRequester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByRequester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByRequester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requester", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requester = append(m.Requester[:0], dAtA[iNdEx:postIndex]...)
			if m.Requester == nil {
				m.Requester = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIdentityRecordVerifyRequestsByRequesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByRequesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIdentityRecordVerifyRequestsByRequesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyRecords = append(m.VerifyRecords, IdentityRecordsVerify{})
			if err := m.VerifyRecords[len(m.VerifyRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentityRecordVerifyRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentityRecordVerifyRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentityRecordVerifyRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIdentityRecordVerifyRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIdentityRecordVerifyRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIdentityRecordVerifyRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerifyRecords = append(m.VerifyRecords, IdentityRecordsVerify{})
			if err := m.VerifyRecords[len(m.VerifyRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &github_com_cosmos_cosmos_sdk_types_query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
