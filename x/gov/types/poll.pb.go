// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/poll.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollVoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	PollOptionEmpty PollVoteOption = 0
	// VOTE_OPTION_ABSTAIN defines an abstain vote option.
	PollOptionAbstain PollVoteOption = 1
	// VOTE_OPTION_NO defines a no vote option.
	PollOptionCustom PollVoteOption = 2
	// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	PollOptionNoWithVeto PollVoteOption = 3
)

var PollVoteOption_name = map[int32]string{
	0: "POLL_VOTE_OPTION_UNSPECIFIED",
	1: "POLL_VOTE_OPTION_ABSTAIN",
	2: "POLL_VOTE_OPTION_CUSTOM",
	3: "POLL_VOTE_OPTION_NO_WITH_VETO",
}

var PollVoteOption_value = map[string]int32{
	"POLL_VOTE_OPTION_UNSPECIFIED":  0,
	"POLL_VOTE_OPTION_ABSTAIN":      1,
	"POLL_VOTE_OPTION_CUSTOM":       2,
	"POLL_VOTE_OPTION_NO_WITH_VETO": 3,
}

func (x PollVoteOption) String() string {
	return proto.EnumName(PollVoteOption_name, int32(x))
}

func (PollVoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{0}
}

type PollResult int32

const (
	PollUnknown          PollResult = 0
	PollPassed           PollResult = 1
	PollRejected         PollResult = 2
	PollRejectedWithVeto PollResult = 3
	PollPending          PollResult = 4
	PollQuorumNotReached PollResult = 5
)

var PollResult_name = map[int32]string{
	0: "POLL_RESULT_UNKNOWN",
	1: "POLL_RESULT_PASSED",
	2: "POLL_RESULT_REJECTED",
	3: "POLL_RESULT_REJECTED_WITH_VETO",
	4: "POLL_PENDING",
	5: "POLL_RESULT_QUORUM_NOT_REACHED",
}

var PollResult_value = map[string]int32{
	"POLL_RESULT_UNKNOWN":            0,
	"POLL_RESULT_PASSED":             1,
	"POLL_RESULT_REJECTED":           2,
	"POLL_RESULT_REJECTED_WITH_VETO": 3,
	"POLL_PENDING":                   4,
	"POLL_RESULT_QUORUM_NOT_REACHED": 5,
}

func (x PollResult) String() string {
	return proto.EnumName(PollResult_name, int32(x))
}

func (PollResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{1}
}

type PollVote struct {
	PollId      uint64                                        `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Voter       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option      PollVoteOption                                `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	CustomValue string                                        `protobuf:"bytes,5,opt,name=custom_value,json=customValue,proto3" json:"custom_value,omitempty"`
}

func (m *PollVote) Reset()         { *m = PollVote{} }
func (m *PollVote) String() string { return proto.CompactTextString(m) }
func (*PollVote) ProtoMessage()    {}
func (*PollVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{0}
}
func (m *PollVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVote.Merge(m, src)
}
func (m *PollVote) XXX_Size() int {
	return m.Size()
}
func (m *PollVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVote.DiscardUnknown(m)
}

var xxx_messageInfo_PollVote proto.InternalMessageInfo

func (m *PollVote) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *PollVote) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *PollVote) GetOption() PollVoteOption {
	if m != nil {
		return m.Option
	}
	return PollOptionEmpty
}

func (m *PollVote) GetCustomValue() string {
	if m != nil {
		return m.CustomValue
	}
	return ""
}

type PollOptions struct {
	Values  []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Count   uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Choices uint64   `protobuf:"varint,4,opt,name=choices,proto3" json:"choices,omitempty"`
}

func (m *PollOptions) Reset()         { *m = PollOptions{} }
func (m *PollOptions) String() string { return proto.CompactTextString(m) }
func (*PollOptions) ProtoMessage()    {}
func (*PollOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{1}
}
func (m *PollOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptions.Merge(m, src)
}
func (m *PollOptions) XXX_Size() int {
	return m.Size()
}
func (m *PollOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptions proto.InternalMessageInfo

func (m *PollOptions) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *PollOptions) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PollOptions) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PollOptions) GetChoices() uint64 {
	if m != nil {
		return m.Choices
	}
	return 0
}

type AddressPolls struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Ids     []uint64                                      `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *AddressPolls) Reset()         { *m = AddressPolls{} }
func (m *AddressPolls) String() string { return proto.CompactTextString(m) }
func (*AddressPolls) ProtoMessage()    {}
func (*AddressPolls) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{2}
}
func (m *AddressPolls) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddressPolls) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddressPolls.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddressPolls) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressPolls.Merge(m, src)
}
func (m *AddressPolls) XXX_Size() int {
	return m.Size()
}
func (m *AddressPolls) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressPolls.DiscardUnknown(m)
}

var xxx_messageInfo_AddressPolls proto.InternalMessageInfo

func (m *AddressPolls) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressPolls) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Poll struct {
	PollId        uint64                                        `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Creator       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Title         string                                        `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                                        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Reference     string                                        `protobuf:"bytes,5,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum      string                                        `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles         []uint64                                      `protobuf:"varint,7,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Options       *PollOptions                                  `protobuf:"bytes,8,opt,name=options,proto3" json:"options,omitempty"`
	VotingEndTime time.Time                                     `protobuf:"bytes,9,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time" yaml:"voting_end_time"`
	Result        PollResult                                    `protobuf:"varint,10,opt,name=result,proto3,enum=kira.gov.PollResult" json:"result,omitempty"`
}

func (m *Poll) Reset()         { *m = Poll{} }
func (m *Poll) String() string { return proto.CompactTextString(m) }
func (*Poll) ProtoMessage()    {}
func (*Poll) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{3}
}
func (m *Poll) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Poll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Poll.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Poll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Poll.Merge(m, src)
}
func (m *Poll) XXX_Size() int {
	return m.Size()
}
func (m *Poll) XXX_DiscardUnknown() {
	xxx_messageInfo_Poll.DiscardUnknown(m)
}

var xxx_messageInfo_Poll proto.InternalMessageInfo

type MsgPollVote struct {
	PollId uint64                                        `protobuf:"varint,1,opt,name=poll_id,json=pollId,proto3" json:"poll_id,omitempty"`
	Voter  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option PollVoteOption                                `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	Value  string                                        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MsgPollVote) Reset()         { *m = MsgPollVote{} }
func (m *MsgPollVote) String() string { return proto.CompactTextString(m) }
func (*MsgPollVote) ProtoMessage()    {}
func (*MsgPollVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{4}
}
func (m *MsgPollVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPollVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPollVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPollVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPollVote.Merge(m, src)
}
func (m *MsgPollVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgPollVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPollVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPollVote proto.InternalMessageInfo

func (m *MsgPollVote) GetPollId() uint64 {
	if m != nil {
		return m.PollId
	}
	return 0
}

func (m *MsgPollVote) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *MsgPollVote) GetOption() PollVoteOption {
	if m != nil {
		return m.Option
	}
	return PollOptionEmpty
}

func (m *MsgPollVote) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MsgPollCreate struct {
	Creator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Title           string                                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Reference       string                                        `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum        string                                        `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles           []string                                      `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty"`
	PollValues      []string                                      `protobuf:"bytes,7,rep,name=poll_values,json=pollValues,proto3" json:"poll_values,omitempty"`
	ValueCount      uint64                                        `protobuf:"varint,8,opt,name=value_count,json=valueCount,proto3" json:"value_count,omitempty"`
	ValueType       string                                        `protobuf:"bytes,9,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	PossibleChoices uint64                                        `protobuf:"varint,10,opt,name=possible_choices,json=possibleChoices,proto3" json:"possible_choices,omitempty"`
	Duration        string                                        `protobuf:"bytes,11,opt,name=duration,proto3" json:"duration,omitempty"`
}

func (m *MsgPollCreate) Reset()         { *m = MsgPollCreate{} }
func (m *MsgPollCreate) String() string { return proto.CompactTextString(m) }
func (*MsgPollCreate) ProtoMessage()    {}
func (*MsgPollCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3fa5d41f67be42c, []int{5}
}
func (m *MsgPollCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPollCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPollCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPollCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPollCreate.Merge(m, src)
}
func (m *MsgPollCreate) XXX_Size() int {
	return m.Size()
}
func (m *MsgPollCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPollCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPollCreate proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("kira.gov.PollVoteOption", PollVoteOption_name, PollVoteOption_value)
	proto.RegisterEnum("kira.gov.PollResult", PollResult_name, PollResult_value)
	proto.RegisterType((*PollVote)(nil), "kira.gov.PollVote")
	proto.RegisterType((*PollOptions)(nil), "kira.gov.PollOptions")
	proto.RegisterType((*AddressPolls)(nil), "kira.gov.AddressPolls")
	proto.RegisterType((*Poll)(nil), "kira.gov.Poll")
	proto.RegisterType((*MsgPollVote)(nil), "kira.gov.MsgPollVote")
	proto.RegisterType((*MsgPollCreate)(nil), "kira.gov.MsgPollCreate")
}

func init() { proto.RegisterFile("kira/gov/poll.proto", fileDescriptor_c3fa5d41f67be42c) }

var fileDescriptor_c3fa5d41f67be42c = []byte{
	// 1093 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xbb, 0x6f, 0xdb, 0x46,
	0x18, 0x17, 0xf5, 0xb4, 0x4e, 0x8e, 0xcd, 0x9e, 0x95, 0x84, 0x25, 0x12, 0x89, 0x11, 0xd0, 0x42,
	0x35, 0x1a, 0xa9, 0x49, 0xd0, 0x25, 0x2d, 0x50, 0xc8, 0x32, 0x9b, 0xa8, 0xb6, 0x29, 0x85, 0x7a,
	0x18, 0x28, 0x50, 0x10, 0x34, 0x79, 0x96, 0x59, 0x51, 0x3c, 0x81, 0x77, 0x72, 0xea, 0xa9, 0x6b,
	0xa0, 0x29, 0xe8, 0x2e, 0xa0, 0x40, 0xff, 0x80, 0x8e, 0x9d, 0xb3, 0x65, 0xcc, 0xd8, 0xc9, 0x2d,
	0xec, 0xff, 0xc0, 0x63, 0xa7, 0xe2, 0xee, 0xc8, 0xc8, 0x8f, 0x24, 0x45, 0xd1, 0x0e, 0x99, 0xcc,
	0xef, 0xf1, 0xfb, 0x1e, 0xf7, 0xfd, 0xbe, 0x4f, 0x06, 0x6b, 0x23, 0x2f, 0xb4, 0xeb, 0x43, 0x7c,
	0x58, 0x9f, 0x60, 0xdf, 0xaf, 0x4d, 0x42, 0x4c, 0x31, 0x5c, 0x62, 0xca, 0xda, 0x10, 0x1f, 0xaa,
	0xc5, 0x21, 0x1e, 0x62, 0xae, 0xac, 0xb3, 0x2f, 0x61, 0x57, 0xcb, 0x43, 0x8c, 0x87, 0x3e, 0xaa,
	0x73, 0x69, 0x6f, 0xba, 0x5f, 0xa7, 0xde, 0x18, 0x11, 0x6a, 0x8f, 0x27, 0x91, 0xc3, 0x87, 0x97,
	0x1d, 0xec, 0xe0, 0x28, 0x36, 0x39, 0x98, 0x8c, 0x31, 0xb1, 0x44, 0x50, 0x21, 0x44, 0xa6, 0x45,
	0x2d, 0x21, 0xf6, 0x51, 0xec, 0xbf, 0x28, 0x10, 0x85, 0x63, 0x8f, 0x10, 0x0f, 0x07, 0x91, 0xe9,
	0xce, 0x6b, 0x53, 0x80, 0xe8, 0x53, 0x1c, 0x8e, 0x58, 0xd0, 0x09, 0x0a, 0xa9, 0x87, 0xa2, 0x90,
	0x95, 0x17, 0x12, 0x58, 0xea, 0x60, 0xdf, 0x1f, 0x60, 0x8a, 0xe0, 0x4d, 0x90, 0x63, 0x4d, 0x5a,
	0x9e, 0xab, 0x48, 0x9a, 0x54, 0x4d, 0x9b, 0x59, 0x26, 0xb6, 0x5c, 0xf8, 0x08, 0x64, 0x0e, 0x31,
	0x45, 0xa1, 0x92, 0xd4, 0xa4, 0xea, 0xf2, 0xc6, 0xbd, 0xbf, 0x8e, 0xcb, 0x77, 0x87, 0x1e, 0x3d,
	0x98, 0xee, 0xd5, 0x1c, 0x3c, 0x8e, 0x8a, 0x8c, 0xfe, 0xdc, 0x25, 0xee, 0xa8, 0x4e, 0x8f, 0x26,
	0x88, 0xd4, 0x1a, 0x8e, 0xd3, 0x70, 0xdd, 0x10, 0x11, 0x62, 0x0a, 0x3c, 0xfc, 0x0c, 0x64, 0xf1,
	0x84, 0x7a, 0x38, 0x50, 0x52, 0x9a, 0x54, 0x5d, 0xb9, 0xaf, 0xd4, 0xe2, 0x97, 0xac, 0xc5, 0x55,
	0xb4, 0xb9, 0xdd, 0x8c, 0xfc, 0xe0, 0x1d, 0xb0, 0xec, 0x4c, 0x09, 0xc5, 0x63, 0xeb, 0xd0, 0xf6,
	0xa7, 0x48, 0xc9, 0x68, 0x52, 0x35, 0x6f, 0x16, 0x84, 0x6e, 0xc0, 0x54, 0x15, 0x0f, 0x14, 0x18,
	0x58, 0x00, 0x09, 0xbc, 0x01, 0xb2, 0xdc, 0x95, 0x28, 0x92, 0x96, 0xaa, 0xe6, 0xcd, 0x48, 0x82,
	0x45, 0x90, 0x71, 0xf0, 0x34, 0xa0, 0xbc, 0x89, 0xb4, 0x29, 0x04, 0x08, 0x41, 0x9a, 0x15, 0xcb,
	0xeb, 0xc9, 0x9b, 0xfc, 0x1b, 0x2a, 0x20, 0xe7, 0x1c, 0x60, 0xcf, 0x41, 0x44, 0x49, 0x73, 0xdf,
	0x58, 0xac, 0xfc, 0x08, 0x96, 0xa3, 0x8e, 0x58, 0x46, 0x02, 0xbf, 0x03, 0x39, 0x5b, 0xc8, 0xfc,
	0xc5, 0x96, 0x37, 0x9a, 0x67, 0xc7, 0xe5, 0x95, 0x23, 0x7b, 0xec, 0x3f, 0xac, 0x44, 0x86, 0xca,
	0xbf, 0x7f, 0xac, 0x38, 0x26, 0x94, 0x41, 0xca, 0x73, 0x89, 0x92, 0xd4, 0x52, 0xd5, 0xb4, 0xc9,
	0x3e, 0x2b, 0x2f, 0x52, 0x20, 0xcd, 0x52, 0xbf, 0x7d, 0x56, 0x5b, 0x20, 0xe7, 0x84, 0xc8, 0xa6,
	0xf8, 0x3f, 0x4c, 0x2b, 0x8e, 0xc0, 0xde, 0x8c, 0x7a, 0xd4, 0x8f, 0x9f, 0x47, 0x08, 0x50, 0x03,
	0x05, 0x17, 0x11, 0x27, 0xf4, 0xc4, 0x28, 0xd3, 0x62, 0x24, 0xe7, 0x54, 0xf0, 0x16, 0xc8, 0x87,
	0x68, 0x1f, 0x85, 0x28, 0x70, 0xe2, 0x91, 0x2d, 0x14, 0x50, 0x05, 0x4b, 0xce, 0x01, 0x72, 0x46,
	0x64, 0x3a, 0x56, 0xb2, 0xdc, 0xf8, 0x5a, 0x66, 0x19, 0x19, 0xb9, 0x89, 0x92, 0xe3, 0x4d, 0x0b,
	0x01, 0xd6, 0x41, 0x4e, 0xf0, 0x81, 0x28, 0x4b, 0x9a, 0x54, 0x2d, 0xdc, 0xbf, 0x7e, 0x91, 0x38,
	0xd1, 0xec, 0xcd, 0xd8, 0x0b, 0xee, 0x83, 0xd5, 0x43, 0x4c, 0xbd, 0x60, 0x68, 0xa1, 0xc0, 0xb5,
	0xd8, 0xfa, 0x29, 0x79, 0x0e, 0x54, 0x6b, 0x62, 0xf5, 0x6a, 0xf1, 0xea, 0xd5, 0x7a, 0xf1, 0x6e,
	0x6e, 0x54, 0x5e, 0x1e, 0x97, 0x13, 0x67, 0xc7, 0xe5, 0x1b, 0x62, 0x80, 0x97, 0x02, 0x54, 0x9e,
	0xff, 0x51, 0x96, 0xcc, 0x6b, 0x42, 0xab, 0x07, 0x2e, 0xc3, 0xc1, 0x4f, 0x41, 0x36, 0x44, 0x64,
	0xea, 0x53, 0x05, 0x70, 0x42, 0x17, 0x2f, 0xd6, 0x65, 0x72, 0x9b, 0x19, 0xf9, 0x3c, 0x4c, 0x3f,
	0xfb, 0xb9, 0x9c, 0xa8, 0xfc, 0x26, 0x81, 0xc2, 0x0e, 0x19, 0xbe, 0xd7, 0x6b, 0x57, 0x04, 0x19,
	0xb1, 0x6f, 0x62, 0xb8, 0x42, 0xa8, 0xfc, 0x94, 0x02, 0xd7, 0xa2, 0xca, 0x9b, 0x8c, 0x21, 0xe8,
	0x3c, 0xdb, 0xa4, 0xff, 0x8f, 0x6d, 0xc9, 0x77, 0xb0, 0x2d, 0xf5, 0x0f, 0x6c, 0x4b, 0xbf, 0x8b,
	0x6d, 0x99, 0xb7, 0xb1, 0x2d, 0xcb, 0x4f, 0x45, 0xc4, 0xb6, 0x32, 0x28, 0xf0, 0x81, 0x44, 0x67,
	0x24, 0xc7, 0x6d, 0x80, 0xa9, 0x06, 0xe2, 0x94, 0x94, 0x41, 0x81, 0xdb, 0x2c, 0x71, 0x50, 0x96,
	0xf8, 0xd4, 0x00, 0x57, 0x35, 0xf9, 0x55, 0xb9, 0x0d, 0x84, 0x64, 0xf1, 0xdb, 0x92, 0x17, 0x25,
	0x71, 0x4d, 0x8f, 0x1d, 0x98, 0x4f, 0x80, 0x3c, 0xc1, 0x84, 0x78, 0x7b, 0x3e, 0xb2, 0xe2, 0x4b,
	0x03, 0x78, 0x90, 0xd5, 0x58, 0xdf, 0x14, 0x6a, 0x56, 0xbd, 0x3b, 0x0d, 0x6d, 0xde, 0x7a, 0x41,
	0x54, 0x1f, 0xcb, 0x82, 0x4e, 0xeb, 0x67, 0x12, 0x58, 0xb9, 0x38, 0x45, 0xf8, 0x39, 0xb8, 0xd5,
	0x69, 0x6f, 0x6f, 0x5b, 0x83, 0x76, 0x4f, 0xb7, 0xda, 0x9d, 0x5e, 0xab, 0x6d, 0x58, 0x7d, 0xa3,
	0xdb, 0xd1, 0x9b, 0xad, 0xaf, 0x5b, 0xfa, 0xa6, 0x9c, 0x50, 0xd7, 0x66, 0x73, 0x6d, 0x75, 0xb1,
	0x39, 0xfa, 0x78, 0x42, 0x8f, 0xe0, 0x03, 0xa0, 0x5c, 0x81, 0x35, 0x36, 0xba, 0xbd, 0x46, 0xcb,
	0x90, 0x25, 0xf5, 0xfa, 0x6c, 0xae, 0x7d, 0xb0, 0x80, 0x34, 0xf6, 0x08, 0xb5, 0xbd, 0x00, 0xde,
	0x03, 0x37, 0xaf, 0x80, 0x9a, 0xfd, 0x6e, 0xaf, 0xbd, 0x23, 0x27, 0xd5, 0xe2, 0x6c, 0xae, 0xc9,
	0x0b, 0x4c, 0x93, 0x5f, 0x6d, 0xf8, 0x05, 0xb8, 0x7d, 0x05, 0x62, 0xb4, 0xad, 0xdd, 0x56, 0xef,
	0xb1, 0x35, 0xd0, 0x7b, 0x6d, 0x39, 0xa5, 0x2a, 0xb3, 0xb9, 0x56, 0x5c, 0x00, 0x0d, 0xbc, 0xeb,
	0xd1, 0x83, 0x01, 0xa2, 0x58, 0x4d, 0x3f, 0xfb, 0xa5, 0x94, 0x58, 0xff, 0x35, 0x09, 0xc0, 0x62,
	0xc1, 0x60, 0x15, 0xac, 0xf1, 0x88, 0xa6, 0xde, 0xed, 0x6f, 0xf7, 0xac, 0xbe, 0xb1, 0x65, 0xb4,
	0x77, 0x0d, 0x39, 0xa1, 0xae, 0xce, 0xe6, 0x1a, 0xff, 0x75, 0xe8, 0x07, 0xa3, 0x00, 0x3f, 0x0d,
	0xe0, 0xc7, 0x00, 0x9e, 0xf7, 0xec, 0x34, 0xba, 0x5d, 0x7d, 0x53, 0x96, 0xd4, 0x95, 0xd9, 0x5c,
	0xe3, 0x11, 0x3b, 0x36, 0x21, 0xc8, 0x85, 0xeb, 0xa0, 0x78, 0xde, 0xcf, 0xd4, 0xbf, 0xd1, 0x9b,
	0x3d, 0x7d, 0x53, 0x4e, 0xaa, 0xf2, 0x6c, 0xae, 0x2d, 0x8b, 0xdc, 0xdf, 0x23, 0x87, 0x22, 0x17,
	0x7e, 0x09, 0x4a, 0x6f, 0xf2, 0x7d, 0x73, 0x43, 0x31, 0x2a, 0x6e, 0x88, 0xfd, 0xc2, 0x71, 0x74,
	0x47, 0x37, 0x36, 0x5b, 0xc6, 0x23, 0x39, 0xbd, 0x28, 0xba, 0x83, 0x02, 0xd7, 0x0b, 0x86, 0x97,
	0x13, 0x3c, 0xe9, 0xb7, 0xcd, 0xfe, 0x8e, 0x65, 0xb4, 0x59, 0xae, 0x46, 0xf3, 0xb1, 0xbe, 0x29,
	0x67, 0x16, 0x09, 0x9e, 0x4c, 0x71, 0x38, 0x1d, 0x1b, 0x98, 0x9a, 0xc8, 0x76, 0x0e, 0x90, 0x2b,
	0x5e, 0x6c, 0xe3, 0xab, 0x97, 0x27, 0x25, 0xe9, 0xd5, 0x49, 0x49, 0xfa, 0xf3, 0xa4, 0x24, 0x3d,
	0x3f, 0x2d, 0x25, 0x5e, 0x9d, 0x96, 0x12, 0xbf, 0x9f, 0x96, 0x12, 0xdf, 0x7e, 0x74, 0x6e, 0x5d,
	0xb7, 0xbc, 0xd0, 0x6e, 0xe2, 0x10, 0xd5, 0x09, 0x1a, 0xd9, 0x5e, 0xfd, 0x07, 0xfe, 0xdf, 0x03,
	0xdf, 0xd8, 0xbd, 0x2c, 0xbf, 0x98, 0x0f, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x2c, 0x55,
	0x4d, 0x12, 0x09, 0x00, 0x00,
}

func (m *PollVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomValue) > 0 {
		i -= len(m.CustomValue)
		copy(dAtA[i:], m.CustomValue)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.CustomValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Option != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.PollId != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choices != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.Choices))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintPoll(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddressPolls) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddressPolls) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddressPolls) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA2 := make([]byte, len(m.Ids)*10)
		var j1 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintPoll(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Poll) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Poll) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Poll) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x50
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VotingEndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPoll(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x4a
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPoll(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.Roles) > 0 {
		dAtA6 := make([]byte, len(m.Roles)*10)
		var j5 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintPoll(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.PollId != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPollVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPollVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPollVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if m.Option != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.PollId != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.PollId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPollCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPollCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPollCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Duration) > 0 {
		i -= len(m.Duration)
		copy(dAtA[i:], m.Duration)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Duration)))
		i--
		dAtA[i] = 0x5a
	}
	if m.PossibleChoices != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.PossibleChoices))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ValueCount != 0 {
		i = encodeVarintPoll(dAtA, i, uint64(m.ValueCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PollValues) > 0 {
		for iNdEx := len(m.PollValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PollValues[iNdEx])
			copy(dAtA[i:], m.PollValues[iNdEx])
			i = encodeVarintPoll(dAtA, i, uint64(len(m.PollValues[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintPoll(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPoll(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoll(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoll(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovPoll(uint64(m.PollId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovPoll(uint64(m.Option))
	}
	l = len(m.CustomValue)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	return n
}

func (m *PollOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovPoll(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovPoll(uint64(m.Count))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if m.Choices != 0 {
		n += 1 + sovPoll(uint64(m.Choices))
	}
	return n
}

func (m *AddressPolls) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovPoll(uint64(e))
		}
		n += 1 + sovPoll(uint64(l)) + l
	}
	return n
}

func (m *Poll) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovPoll(uint64(m.PollId))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovPoll(uint64(e))
		}
		n += 1 + sovPoll(uint64(l)) + l
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPoll(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovPoll(uint64(l))
	if m.Result != 0 {
		n += 1 + sovPoll(uint64(m.Result))
	}
	return n
}

func (m *MsgPollVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PollId != 0 {
		n += 1 + sovPoll(uint64(m.PollId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovPoll(uint64(m.Option))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	return n
}

func (m *MsgPollCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovPoll(uint64(l))
		}
	}
	if len(m.PollValues) > 0 {
		for _, s := range m.PollValues {
			l = len(s)
			n += 1 + l + sovPoll(uint64(l))
		}
	}
	if m.ValueCount != 0 {
		n += 1 + sovPoll(uint64(m.ValueCount))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	if m.PossibleChoices != 0 {
		n += 1 + sovPoll(uint64(m.PossibleChoices))
	}
	l = len(m.Duration)
	if l > 0 {
		n += 1 + l + sovPoll(uint64(l))
	}
	return n
}

func sovPoll(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoll(x uint64) (n int) {
	return sovPoll(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PollVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= PollVoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choices", wireType)
			}
			m.Choices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Choices |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddressPolls) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddressPolls: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddressPolls: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPoll
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPoll
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Poll) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Poll: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Poll: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoll
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthPoll
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthPoll
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoll
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PollOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= PollResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPollVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPollVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPollVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollId", wireType)
			}
			m.PollId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PollId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= PollVoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPollCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPollCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPollCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollValues = append(m.PollValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueCount", wireType)
			}
			m.ValueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PossibleChoices", wireType)
			}
			m.PossibleChoices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PossibleChoices |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoll
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoll
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Duration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoll(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoll
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoll(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoll
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoll
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoll
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoll
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoll
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoll        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoll          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoll = fmt.Errorf("proto: unexpected end of group")
)
