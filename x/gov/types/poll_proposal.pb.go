// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/poll_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PollVoteOption int32

const (
	// VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
	PollOptionEmpty PollVoteOption = 0
	// VOTE_OPTION_ABSTAIN defines an abstain vote option.
	PollOptionAbstain PollVoteOption = 1
	// VOTE_OPTION_NO defines a no vote option.
	PollOptionCustom PollVoteOption = 2
	// VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
	PollOptionNoWithVeto PollVoteOption = 3
)

var PollVoteOption_name = map[int32]string{
	0: "POLL_VOTE_OPTION_UNSPECIFIED",
	1: "POLL_VOTE_OPTION_ABSTAIN",
	2: "POLL_VOTE_OPTION_CUSTOM",
	3: "POLL_VOTE_OPTION_NO_WITH_VETO",
}

var PollVoteOption_value = map[string]int32{
	"POLL_VOTE_OPTION_UNSPECIFIED":  0,
	"POLL_VOTE_OPTION_ABSTAIN":      1,
	"POLL_VOTE_OPTION_CUSTOM":       2,
	"POLL_VOTE_OPTION_NO_WITH_VETO": 3,
}

func (x PollVoteOption) String() string {
	return proto.EnumName(PollVoteOption_name, int32(x))
}

func (PollVoteOption) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{0}
}

type PollVote struct {
	ProposalId  uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option      PollVoteOption                                `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	ChoiceValue uint64                                        `protobuf:"varint,4,opt,name=choice_value,json=choiceValue,proto3" json:"choice_value,omitempty"`
	CustomValue string                                        `protobuf:"bytes,5,opt,name=custom_value,json=customValue,proto3" json:"custom_value,omitempty"`
}

func (m *PollVote) Reset()         { *m = PollVote{} }
func (m *PollVote) String() string { return proto.CompactTextString(m) }
func (*PollVote) ProtoMessage()    {}
func (*PollVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{0}
}
func (m *PollVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollVote.Merge(m, src)
}
func (m *PollVote) XXX_Size() int {
	return m.Size()
}
func (m *PollVote) XXX_DiscardUnknown() {
	xxx_messageInfo_PollVote.DiscardUnknown(m)
}

var xxx_messageInfo_PollVote proto.InternalMessageInfo

func (m *PollVote) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *PollVote) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *PollVote) GetOption() PollVoteOption {
	if m != nil {
		return m.Option
	}
	return PollOptionEmpty
}

func (m *PollVote) GetChoiceValue() uint64 {
	if m != nil {
		return m.ChoiceValue
	}
	return 0
}

func (m *PollVote) GetCustomValue() string {
	if m != nil {
		return m.CustomValue
	}
	return ""
}

type PollOptions struct {
	Values  []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	Count   uint64   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Type    string   `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Choices uint64   `protobuf:"varint,4,opt,name=choices,proto3" json:"choices,omitempty"`
}

func (m *PollOptions) Reset()         { *m = PollOptions{} }
func (m *PollOptions) String() string { return proto.CompactTextString(m) }
func (*PollOptions) ProtoMessage()    {}
func (*PollOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{1}
}
func (m *PollOptions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollOptions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollOptions.Merge(m, src)
}
func (m *PollOptions) XXX_Size() int {
	return m.Size()
}
func (m *PollOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_PollOptions.DiscardUnknown(m)
}

var xxx_messageInfo_PollOptions proto.InternalMessageInfo

func (m *PollOptions) GetValues() []string {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *PollOptions) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PollOptions) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *PollOptions) GetChoices() uint64 {
	if m != nil {
		return m.Choices
	}
	return 0
}

type PollProposal struct {
	ProposalId  uint64       `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Title       string       `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Reference   string       `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum    string       `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles       []string     `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty"`
	Options     *PollOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
	Result      VoteResult   `protobuf:"varint,8,opt,name=result,proto3,enum=kira.gov.VoteResult" json:"result,omitempty"`
}

func (m *PollProposal) Reset()         { *m = PollProposal{} }
func (m *PollProposal) String() string { return proto.CompactTextString(m) }
func (*PollProposal) ProtoMessage()    {}
func (*PollProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{2}
}
func (m *PollProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PollProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PollProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PollProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PollProposal.Merge(m, src)
}
func (m *PollProposal) XXX_Size() int {
	return m.Size()
}
func (m *PollProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_PollProposal.DiscardUnknown(m)
}

var xxx_messageInfo_PollProposal proto.InternalMessageInfo

type MsgPollVoteProposal struct {
	ProposalId  uint64                                        `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	Voter       github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=voter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"voter,omitempty"`
	Option      PollVoteOption                                `protobuf:"varint,3,opt,name=option,proto3,enum=kira.gov.PollVoteOption" json:"option,omitempty"`
	CustomValue string                                        `protobuf:"bytes,4,opt,name=custom_value,json=customValue,proto3" json:"custom_value,omitempty"`
}

func (m *MsgPollVoteProposal) Reset()         { *m = MsgPollVoteProposal{} }
func (m *MsgPollVoteProposal) String() string { return proto.CompactTextString(m) }
func (*MsgPollVoteProposal) ProtoMessage()    {}
func (*MsgPollVoteProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{3}
}
func (m *MsgPollVoteProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPollVoteProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPollVoteProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPollVoteProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPollVoteProposal.Merge(m, src)
}
func (m *MsgPollVoteProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgPollVoteProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPollVoteProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPollVoteProposal proto.InternalMessageInfo

func (m *MsgPollVoteProposal) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *MsgPollVoteProposal) GetVoter() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Voter
	}
	return nil
}

func (m *MsgPollVoteProposal) GetOption() PollVoteOption {
	if m != nil {
		return m.Option
	}
	return PollOptionEmpty
}

func (m *MsgPollVoteProposal) GetCustomValue() string {
	if m != nil {
		return m.CustomValue
	}
	return ""
}

type MsgPollCreate struct {
	Creator         github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=creator,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"creator,omitempty"`
	Title           string                                        `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     string                                        `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Reference       string                                        `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
	Checksum        string                                        `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Roles           []string                                      `protobuf:"bytes,6,rep,name=roles,proto3" json:"roles,omitempty"`
	PollValues      []string                                      `protobuf:"bytes,7,rep,name=poll_values,json=pollValues,proto3" json:"poll_values,omitempty"`
	ValueCount      uint64                                        `protobuf:"varint,8,opt,name=value_count,json=valueCount,proto3" json:"value_count,omitempty"`
	ValueType       string                                        `protobuf:"bytes,9,opt,name=value_type,json=valueType,proto3" json:"value_type,omitempty"`
	PossibleChoices uint64                                        `protobuf:"varint,10,opt,name=possible_choices,json=possibleChoices,proto3" json:"possible_choices,omitempty"`
	Expiry          time.Time                                     `protobuf:"bytes,11,opt,name=expiry,proto3,stdtime" json:"expiry" yaml:"expiry"`
}

func (m *MsgPollCreate) Reset()         { *m = MsgPollCreate{} }
func (m *MsgPollCreate) String() string { return proto.CompactTextString(m) }
func (*MsgPollCreate) ProtoMessage()    {}
func (*MsgPollCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_880c66761dcb3b2a, []int{4}
}
func (m *MsgPollCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPollCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPollCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPollCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPollCreate.Merge(m, src)
}
func (m *MsgPollCreate) XXX_Size() int {
	return m.Size()
}
func (m *MsgPollCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPollCreate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPollCreate proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("kira.gov.PollVoteOption", PollVoteOption_name, PollVoteOption_value)
	proto.RegisterType((*PollVote)(nil), "kira.gov.PollVote")
	proto.RegisterType((*PollOptions)(nil), "kira.gov.PollOptions")
	proto.RegisterType((*PollProposal)(nil), "kira.gov.PollProposal")
	proto.RegisterType((*MsgPollVoteProposal)(nil), "kira.gov.MsgPollVoteProposal")
	proto.RegisterType((*MsgPollCreate)(nil), "kira.gov.MsgPollCreate")
}

func init() { proto.RegisterFile("kira/gov/poll_proposal.proto", fileDescriptor_880c66761dcb3b2a) }

var fileDescriptor_880c66761dcb3b2a = []byte{
	// 880 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x3f, 0x6f, 0xdb, 0x46,
	0x14, 0x17, 0x6d, 0x59, 0x7f, 0x4e, 0x4e, 0xa2, 0x9e, 0x95, 0x86, 0x26, 0x1c, 0x89, 0x11, 0x50,
	0x40, 0x2d, 0x1a, 0xb2, 0x49, 0xd0, 0x25, 0x1d, 0x0a, 0x59, 0x55, 0x5b, 0x21, 0xb1, 0x24, 0xd0,
	0x8c, 0x02, 0x74, 0x21, 0x28, 0xea, 0x42, 0x1f, 0x44, 0xea, 0x88, 0xbb, 0x93, 0x1b, 0x7d, 0x83,
	0xc0, 0x53, 0x3e, 0x40, 0x0d, 0x14, 0xe8, 0x67, 0x29, 0x90, 0x31, 0x43, 0x87, 0x4e, 0x6e, 0x61,
	0xaf, 0x9d, 0x32, 0x76, 0x2a, 0x78, 0x77, 0x34, 0xed, 0x6a, 0x68, 0xd1, 0xa5, 0x99, 0xc4, 0xf7,
	0xfb, 0xbd, 0xf7, 0xee, 0xbd, 0x77, 0xbf, 0x77, 0x02, 0x7b, 0x73, 0x4c, 0x7d, 0x3b, 0x24, 0xc7,
	0x76, 0x42, 0xa2, 0xc8, 0x4b, 0x28, 0x49, 0x08, 0xf3, 0x23, 0x2b, 0xa1, 0x84, 0x13, 0x58, 0x49,
	0x59, 0x2b, 0x24, 0xc7, 0x46, 0x23, 0x24, 0x21, 0x11, 0xa0, 0x9d, 0x7e, 0x49, 0xde, 0x68, 0x85,
	0x84, 0x84, 0x11, 0xb2, 0x85, 0x35, 0x5d, 0xbe, 0xb0, 0x39, 0x8e, 0x11, 0xe3, 0x7e, 0x9c, 0x28,
	0x87, 0xdd, 0xbf, 0x3b, 0xf8, 0x8b, 0x55, 0x46, 0x05, 0x84, 0xc5, 0x84, 0x79, 0x32, 0xa9, 0x34,
	0x14, 0xb5, 0x73, 0x59, 0x14, 0x25, 0x11, 0x52, 0xe0, 0x9d, 0xbc, 0xd2, 0x6b, 0x45, 0x1a, 0xbb,
	0x39, 0x81, 0x68, 0x8c, 0x19, 0xc3, 0x64, 0xa1, 0xa8, 0x7b, 0x97, 0xd4, 0x02, 0xf1, 0xef, 0x09,
	0x9d, 0x8b, 0x06, 0x11, 0xe5, 0x18, 0xa9, 0xb3, 0xda, 0x7f, 0x68, 0xa0, 0x32, 0x26, 0x51, 0x34,
	0x21, 0x1c, 0xc1, 0x16, 0xa8, 0x65, 0xc9, 0x3d, 0x3c, 0xd3, 0x35, 0x53, 0xeb, 0x14, 0x1d, 0x90,
	0x41, 0x83, 0x19, 0xfc, 0x06, 0x6c, 0x1d, 0x13, 0x8e, 0xa8, 0xbe, 0x61, 0x6a, 0x9d, 0xed, 0xfd,
	0x07, 0x7f, 0x9e, 0xb5, 0xee, 0x87, 0x98, 0x1f, 0x2d, 0xa7, 0x56, 0x40, 0x62, 0xd5, 0x85, 0xfa,
	0xb9, 0xcf, 0x66, 0x73, 0x9b, 0xaf, 0x12, 0xc4, 0xac, 0x6e, 0x10, 0x74, 0x67, 0x33, 0x8a, 0x18,
	0x73, 0x64, 0x3c, 0xfc, 0x0c, 0x94, 0x48, 0xc2, 0x31, 0x59, 0xe8, 0x9b, 0xa6, 0xd6, 0xb9, 0xf9,
	0x50, 0xb7, 0xb2, 0x51, 0x5b, 0x59, 0x35, 0x23, 0xc1, 0x3b, 0xca, 0x0f, 0xde, 0x03, 0xdb, 0xc1,
	0x11, 0xc1, 0x01, 0xf2, 0x8e, 0xfd, 0x68, 0x89, 0xf4, 0xa2, 0x28, 0xae, 0x26, 0xb1, 0x49, 0x0a,
	0x09, 0x97, 0x25, 0xe3, 0x24, 0x56, 0x2e, 0x5b, 0xa6, 0xd6, 0xa9, 0x3a, 0x35, 0x89, 0x09, 0x97,
	0x36, 0x06, 0xb5, 0x34, 0xbf, 0xcc, 0xcd, 0xe0, 0x87, 0xa0, 0x24, 0x5c, 0x99, 0xae, 0x99, 0x9b,
	0x9d, 0xaa, 0xa3, 0x2c, 0xd8, 0x00, 0x5b, 0x01, 0x59, 0x2e, 0xb8, 0xe8, 0xb3, 0xe8, 0x48, 0x03,
	0x42, 0x50, 0x4c, 0xfb, 0x11, 0x25, 0x57, 0x1d, 0xf1, 0x0d, 0x75, 0x50, 0x96, 0x25, 0x30, 0x55,
	0x51, 0x66, 0xb6, 0x7f, 0xd8, 0x00, 0xdb, 0xe9, 0x59, 0x63, 0x35, 0xbe, 0x7f, 0x9e, 0x6e, 0x03,
	0x6c, 0x71, 0xcc, 0x23, 0x24, 0x4e, 0xad, 0x3a, 0xd2, 0x80, 0x26, 0xa8, 0xcd, 0x10, 0x0b, 0x28,
	0xce, 0xe7, 0x55, 0x75, 0xae, 0x42, 0x70, 0x0f, 0x54, 0x29, 0x7a, 0x81, 0x28, 0x5a, 0x04, 0x72,
	0x2e, 0x55, 0x27, 0x07, 0xa0, 0x01, 0x2a, 0xc1, 0x11, 0x0a, 0xe6, 0x6c, 0x19, 0xab, 0x89, 0x5c,
	0xda, 0xe9, 0x89, 0xa9, 0xc4, 0x98, 0x5e, 0x12, 0xed, 0x4b, 0x03, 0xda, 0xa0, 0x2c, 0x87, 0xce,
	0xf4, 0xb2, 0xa9, 0x75, 0x6a, 0x0f, 0x6f, 0x5f, 0xbf, 0x1d, 0x35, 0x3d, 0x27, 0xf3, 0x82, 0x9f,
	0x82, 0x12, 0x45, 0x6c, 0x19, 0x71, 0xbd, 0x22, 0x6e, 0xb3, 0x91, 0xfb, 0xa7, 0x37, 0xe9, 0x08,
	0xce, 0x51, 0x3e, 0x8f, 0x8b, 0xaf, 0x7e, 0x6c, 0x15, 0xda, 0xbf, 0x68, 0x60, 0xe7, 0x80, 0x85,
	0xd9, 0x6d, 0xff, 0xfb, 0x29, 0xfd, 0xcf, 0x1a, 0xbc, 0x2a, 0xb0, 0xe2, 0xba, 0xc0, 0x7e, 0xde,
	0x04, 0x37, 0x54, 0x5b, 0x3d, 0x8a, 0x7c, 0x8e, 0xe0, 0x13, 0x50, 0x0e, 0xd2, 0x2f, 0x42, 0x45,
	0x33, 0xff, 0xa9, 0xe2, 0x2c, 0xc3, 0x7b, 0x23, 0x91, 0xf4, 0x96, 0xd2, 0x07, 0x53, 0x6d, 0x4f,
	0x59, 0x70, 0x20, 0x85, 0x26, 0x72, 0x83, 0x5a, 0xa0, 0x26, 0x38, 0x4f, 0xee, 0x51, 0x45, 0x5e,
	0xa3, 0x80, 0x7a, 0x62, 0x99, 0xee, 0x02, 0x69, 0x79, 0x62, 0xa5, 0xaa, 0xb2, 0x24, 0x81, 0xb8,
	0xe9, 0x5e, 0x7d, 0x0c, 0xea, 0x09, 0x61, 0x0c, 0x4f, 0x23, 0xe4, 0x65, 0x0b, 0x06, 0x44, 0x92,
	0x5b, 0x19, 0xde, 0x93, 0x30, 0x3c, 0x00, 0x25, 0xf4, 0x32, 0xc1, 0x74, 0xa5, 0xd7, 0x84, 0x5a,
	0x0d, 0x4b, 0xbe, 0xba, 0x56, 0xf6, 0xea, 0x5a, 0x6e, 0xf6, 0x2c, 0xef, 0xef, 0xbe, 0x39, 0x6b,
	0x15, 0xde, 0x9d, 0xb5, 0x6e, 0xac, 0xfc, 0x38, 0x7a, 0xdc, 0x96, 0x71, 0xed, 0xd7, 0xbf, 0xb5,
	0x34, 0x47, 0x25, 0x91, 0xf2, 0xfc, 0xe4, 0x9d, 0x06, 0x6e, 0x5e, 0x57, 0x01, 0xfc, 0x1c, 0xec,
	0x8d, 0x47, 0x4f, 0x9f, 0x7a, 0x93, 0x91, 0xdb, 0xf7, 0x46, 0x63, 0x77, 0x30, 0x1a, 0x7a, 0xcf,
	0x86, 0x87, 0xe3, 0x7e, 0x6f, 0xf0, 0xf5, 0xa0, 0xff, 0x55, 0xbd, 0x60, 0xec, 0x9c, 0x9c, 0x9a,
	0xb7, 0xf2, 0x0d, 0xe9, 0xc7, 0x09, 0x5f, 0xc1, 0x47, 0x40, 0x5f, 0x0b, 0xeb, 0xee, 0x1f, 0xba,
	0xdd, 0xc1, 0xb0, 0xae, 0x19, 0xb7, 0x4f, 0x4e, 0xcd, 0x0f, 0xf2, 0x90, 0xee, 0x94, 0x71, 0x1f,
	0x2f, 0xe0, 0x03, 0x70, 0x67, 0x2d, 0xa8, 0xf7, 0xec, 0xd0, 0x1d, 0x1d, 0xd4, 0x37, 0x8c, 0xc6,
	0xc9, 0xa9, 0x59, 0xcf, 0x63, 0x7a, 0x42, 0x7e, 0xf0, 0x0b, 0x70, 0x77, 0x2d, 0x64, 0x38, 0xf2,
	0x9e, 0x0f, 0xdc, 0x6f, 0xbd, 0x49, 0xdf, 0x1d, 0xd5, 0x37, 0x0d, 0xfd, 0xe4, 0xd4, 0x6c, 0xe4,
	0x81, 0x43, 0xf2, 0x1c, 0xf3, 0xa3, 0x09, 0xe2, 0xc4, 0x28, 0xbe, 0xfa, 0xa9, 0x59, 0xd8, 0xff,
	0xf2, 0xcd, 0x79, 0x53, 0x7b, 0x7b, 0xde, 0xd4, 0x7e, 0x3f, 0x6f, 0x6a, 0xaf, 0x2f, 0x9a, 0x85,
	0xb7, 0x17, 0xcd, 0xc2, 0xaf, 0x17, 0xcd, 0xc2, 0x77, 0x1f, 0x5d, 0xd1, 0xeb, 0x13, 0x4c, 0xfd,
	0x1e, 0xa1, 0xc8, 0x66, 0x68, 0xee, 0x63, 0xfb, 0xa5, 0xf8, 0x83, 0x11, 0x92, 0x9d, 0x96, 0xc4,
	0xc8, 0x1f, 0xfd, 0x15, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x5a, 0x0d, 0x30, 0x57, 0x07, 0x00, 0x00,
}

func (m *PollVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomValue) > 0 {
		i -= len(m.CustomValue)
		copy(dAtA[i:], m.CustomValue)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.CustomValue)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ChoiceValue != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.ChoiceValue))
		i--
		dAtA[i] = 0x20
	}
	if m.Option != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PollOptions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollOptions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollOptions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Choices != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.Choices))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PollProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PollProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PollProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x40
	}
	if m.Options != nil {
		{
			size, err := m.Options.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPollProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPollVoteProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPollVoteProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPollVoteProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomValue) > 0 {
		i -= len(m.CustomValue)
		copy(dAtA[i:], m.CustomValue)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.CustomValue)))
		i--
		dAtA[i] = 0x22
	}
	if m.Option != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgPollCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPollCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPollCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Expiry, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPollProposal(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x5a
	if m.PossibleChoices != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.PossibleChoices))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ValueType) > 0 {
		i -= len(m.ValueType)
		copy(dAtA[i:], m.ValueType)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.ValueType)))
		i--
		dAtA[i] = 0x4a
	}
	if m.ValueCount != 0 {
		i = encodeVarintPollProposal(dAtA, i, uint64(m.ValueCount))
		i--
		dAtA[i] = 0x40
	}
	if len(m.PollValues) > 0 {
		for iNdEx := len(m.PollValues) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PollValues[iNdEx])
			copy(dAtA[i:], m.PollValues[iNdEx])
			i = encodeVarintPollProposal(dAtA, i, uint64(len(m.PollValues[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Roles) > 0 {
		for iNdEx := len(m.Roles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Roles[iNdEx])
			copy(dAtA[i:], m.Roles[iNdEx])
			i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Roles[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintPollProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPollProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovPollProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PollVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovPollProposal(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovPollProposal(uint64(m.Option))
	}
	if m.ChoiceValue != 0 {
		n += 1 + sovPollProposal(uint64(m.ChoiceValue))
	}
	l = len(m.CustomValue)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	return n
}

func (m *PollOptions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, s := range m.Values {
			l = len(s)
			n += 1 + l + sovPollProposal(uint64(l))
		}
	}
	if m.Count != 0 {
		n += 1 + sovPollProposal(uint64(m.Count))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if m.Choices != 0 {
		n += 1 + sovPollProposal(uint64(m.Choices))
	}
	return n
}

func (m *PollProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovPollProposal(uint64(m.ProposalId))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovPollProposal(uint64(l))
		}
	}
	if m.Options != nil {
		l = m.Options.Size()
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovPollProposal(uint64(m.Result))
	}
	return n
}

func (m *MsgPollVoteProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovPollProposal(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovPollProposal(uint64(m.Option))
	}
	l = len(m.CustomValue)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	return n
}

func (m *MsgPollCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if len(m.Roles) > 0 {
		for _, s := range m.Roles {
			l = len(s)
			n += 1 + l + sovPollProposal(uint64(l))
		}
	}
	if len(m.PollValues) > 0 {
		for _, s := range m.PollValues {
			l = len(s)
			n += 1 + l + sovPollProposal(uint64(l))
		}
	}
	if m.ValueCount != 0 {
		n += 1 + sovPollProposal(uint64(m.ValueCount))
	}
	l = len(m.ValueType)
	if l > 0 {
		n += 1 + l + sovPollProposal(uint64(l))
	}
	if m.PossibleChoices != 0 {
		n += 1 + sovPollProposal(uint64(m.PossibleChoices))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Expiry)
	n += 1 + l + sovPollProposal(uint64(l))
	return n
}

func sovPollProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPollProposal(x uint64) (n int) {
	return sovPollProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PollVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= PollVoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChoiceValue", wireType)
			}
			m.ChoiceValue = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChoiceValue |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPollProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPollProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollOptions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Choices", wireType)
			}
			m.Choices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Choices |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPollProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPollProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PollProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PollProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PollProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &PollOptions{}
			}
			if err := m.Options.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPollProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPollProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPollVoteProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPollVoteProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPollVoteProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = append(m.Voter[:0], dAtA[iNdEx:postIndex]...)
			if m.Voter == nil {
				m.Voter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= PollVoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPollProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPollProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPollCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPollCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPollCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = append(m.Creator[:0], dAtA[iNdEx:postIndex]...)
			if m.Creator == nil {
				m.Creator = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Roles = append(m.Roles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PollValues", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PollValues = append(m.PollValues, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueCount", wireType)
			}
			m.ValueCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValueCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PossibleChoices", wireType)
			}
			m.PossibleChoices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PossibleChoices |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPollProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPollProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Expiry, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPollProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPollProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPollProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPollProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPollProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPollProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPollProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPollProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPollProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPollProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPollProposal = fmt.Errorf("proto: unexpected end of group")
)
