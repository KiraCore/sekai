// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: identity_registrar.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IdentityRecord struct {
	Id        uint64                                          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address   github_com_cosmos_cosmos_sdk_types.AccAddress   `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Infos     map[string]string                               `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Date      time.Time                                       `protobuf:"bytes,4,opt,name=date,proto3,stdtime" json:"date"`
	Verifiers []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,rep,name=verifiers,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"verifiers,omitempty"`
}

func (m *IdentityRecord) Reset()         { *m = IdentityRecord{} }
func (m *IdentityRecord) String() string { return proto.CompactTextString(m) }
func (*IdentityRecord) ProtoMessage()    {}
func (*IdentityRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{0}
}
func (m *IdentityRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityRecord.Merge(m, src)
}
func (m *IdentityRecord) XXX_Size() int {
	return m.Size()
}
func (m *IdentityRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityRecord.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityRecord proto.InternalMessageInfo

func (m *IdentityRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdentityRecord) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IdentityRecord) GetInfos() map[string]string {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *IdentityRecord) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

func (m *IdentityRecord) GetVerifiers() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Verifiers
	}
	return nil
}

type IdentityInfoEntry struct {
	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Info string `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
}

func (m *IdentityInfoEntry) Reset()         { *m = IdentityInfoEntry{} }
func (m *IdentityInfoEntry) String() string { return proto.CompactTextString(m) }
func (*IdentityInfoEntry) ProtoMessage()    {}
func (*IdentityInfoEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{1}
}
func (m *IdentityInfoEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityInfoEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityInfoEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityInfoEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityInfoEntry.Merge(m, src)
}
func (m *IdentityInfoEntry) XXX_Size() int {
	return m.Size()
}
func (m *IdentityInfoEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityInfoEntry.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityInfoEntry proto.InternalMessageInfo

func (m *IdentityInfoEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *IdentityInfoEntry) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

type MsgCreateIdentityRecord struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Infos   []IdentityInfoEntry                           `protobuf:"bytes,2,rep,name=infos,proto3" json:"infos"`
	Date    time.Time                                     `protobuf:"bytes,3,opt,name=date,proto3,stdtime" json:"date"`
}

func (m *MsgCreateIdentityRecord) Reset()         { *m = MsgCreateIdentityRecord{} }
func (m *MsgCreateIdentityRecord) String() string { return proto.CompactTextString(m) }
func (*MsgCreateIdentityRecord) ProtoMessage()    {}
func (*MsgCreateIdentityRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{2}
}
func (m *MsgCreateIdentityRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateIdentityRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateIdentityRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateIdentityRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateIdentityRecord.Merge(m, src)
}
func (m *MsgCreateIdentityRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateIdentityRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateIdentityRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateIdentityRecord proto.InternalMessageInfo

func (m *MsgCreateIdentityRecord) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgCreateIdentityRecord) GetInfos() []IdentityInfoEntry {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *MsgCreateIdentityRecord) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

type MsgEditIdentityRecord struct {
	RecordId uint64                                        `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Address  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Infos    []IdentityInfoEntry                           `protobuf:"bytes,3,rep,name=infos,proto3" json:"infos"`
	Date     time.Time                                     `protobuf:"bytes,4,opt,name=date,proto3,stdtime" json:"date"`
}

func (m *MsgEditIdentityRecord) Reset()         { *m = MsgEditIdentityRecord{} }
func (m *MsgEditIdentityRecord) String() string { return proto.CompactTextString(m) }
func (*MsgEditIdentityRecord) ProtoMessage()    {}
func (*MsgEditIdentityRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{3}
}
func (m *MsgEditIdentityRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEditIdentityRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEditIdentityRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEditIdentityRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEditIdentityRecord.Merge(m, src)
}
func (m *MsgEditIdentityRecord) XXX_Size() int {
	return m.Size()
}
func (m *MsgEditIdentityRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEditIdentityRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEditIdentityRecord proto.InternalMessageInfo

func (m *MsgEditIdentityRecord) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

func (m *MsgEditIdentityRecord) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgEditIdentityRecord) GetInfos() []IdentityInfoEntry {
	if m != nil {
		return m.Infos
	}
	return nil
}

func (m *MsgEditIdentityRecord) GetDate() time.Time {
	if m != nil {
		return m.Date
	}
	return time.Time{}
}

type IdentityRecordsVerify struct {
	Id        uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Address   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Verifier  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,3,opt,name=verifier,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"verifier,omitempty" yaml:"verifier"`
	RecordIds []uint64                                      `protobuf:"varint,4,rep,packed,name=recordIds,proto3" json:"recordIds,omitempty"`
	Tip       github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,5,opt,name=tip,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"tip"`
}

func (m *IdentityRecordsVerify) Reset()         { *m = IdentityRecordsVerify{} }
func (m *IdentityRecordsVerify) String() string { return proto.CompactTextString(m) }
func (*IdentityRecordsVerify) ProtoMessage()    {}
func (*IdentityRecordsVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{4}
}
func (m *IdentityRecordsVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityRecordsVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityRecordsVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityRecordsVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityRecordsVerify.Merge(m, src)
}
func (m *IdentityRecordsVerify) XXX_Size() int {
	return m.Size()
}
func (m *IdentityRecordsVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityRecordsVerify.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityRecordsVerify proto.InternalMessageInfo

func (m *IdentityRecordsVerify) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdentityRecordsVerify) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *IdentityRecordsVerify) GetVerifier() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Verifier
	}
	return nil
}

func (m *IdentityRecordsVerify) GetRecordIds() []uint64 {
	if m != nil {
		return m.RecordIds
	}
	return nil
}

type MsgRequestIdentityRecordsVerify struct {
	Address   github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty" yaml:"address"`
	Verifier  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=verifier,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"verifier,omitempty" yaml:"verifier"`
	RecordIds []uint64                                      `protobuf:"varint,3,rep,packed,name=recordIds,proto3" json:"recordIds,omitempty"`
	Tip       github_com_cosmos_cosmos_sdk_types.Coin       `protobuf:"bytes,4,opt,name=tip,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"tip"`
}

func (m *MsgRequestIdentityRecordsVerify) Reset()         { *m = MsgRequestIdentityRecordsVerify{} }
func (m *MsgRequestIdentityRecordsVerify) String() string { return proto.CompactTextString(m) }
func (*MsgRequestIdentityRecordsVerify) ProtoMessage()    {}
func (*MsgRequestIdentityRecordsVerify) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{5}
}
func (m *MsgRequestIdentityRecordsVerify) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestIdentityRecordsVerify) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestIdentityRecordsVerify.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestIdentityRecordsVerify) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestIdentityRecordsVerify.Merge(m, src)
}
func (m *MsgRequestIdentityRecordsVerify) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestIdentityRecordsVerify) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestIdentityRecordsVerify.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestIdentityRecordsVerify proto.InternalMessageInfo

func (m *MsgRequestIdentityRecordsVerify) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *MsgRequestIdentityRecordsVerify) GetVerifier() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Verifier
	}
	return nil
}

func (m *MsgRequestIdentityRecordsVerify) GetRecordIds() []uint64 {
	if m != nil {
		return m.RecordIds
	}
	return nil
}

type MsgApproveIdentityRecords struct {
	Proposer        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty" yaml:"proposer"`
	Verifier        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=verifier,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"verifier,omitempty" yaml:"verifier"`
	VerifyRequestId uint64                                        `protobuf:"varint,3,opt,name=verifyRequestId,proto3" json:"verifyRequestId,omitempty"`
}

func (m *MsgApproveIdentityRecords) Reset()         { *m = MsgApproveIdentityRecords{} }
func (m *MsgApproveIdentityRecords) String() string { return proto.CompactTextString(m) }
func (*MsgApproveIdentityRecords) ProtoMessage()    {}
func (*MsgApproveIdentityRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{6}
}
func (m *MsgApproveIdentityRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveIdentityRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveIdentityRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveIdentityRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveIdentityRecords.Merge(m, src)
}
func (m *MsgApproveIdentityRecords) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveIdentityRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveIdentityRecords.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveIdentityRecords proto.InternalMessageInfo

func (m *MsgApproveIdentityRecords) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

func (m *MsgApproveIdentityRecords) GetVerifier() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Verifier
	}
	return nil
}

func (m *MsgApproveIdentityRecords) GetVerifyRequestId() uint64 {
	if m != nil {
		return m.VerifyRequestId
	}
	return 0
}

type MsgCancelIdentityRecordsVerifyRequest struct {
	Executor        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=executor,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"executor,omitempty" yaml:"executor"`
	VerifyRequestId uint64                                        `protobuf:"varint,2,opt,name=verifyRequestId,proto3" json:"verifyRequestId,omitempty"`
}

func (m *MsgCancelIdentityRecordsVerifyRequest) Reset()         { *m = MsgCancelIdentityRecordsVerifyRequest{} }
func (m *MsgCancelIdentityRecordsVerifyRequest) String() string { return proto.CompactTextString(m) }
func (*MsgCancelIdentityRecordsVerifyRequest) ProtoMessage()    {}
func (*MsgCancelIdentityRecordsVerifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b21a5f87db51929, []int{7}
}
func (m *MsgCancelIdentityRecordsVerifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelIdentityRecordsVerifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelIdentityRecordsVerifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelIdentityRecordsVerifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelIdentityRecordsVerifyRequest.Merge(m, src)
}
func (m *MsgCancelIdentityRecordsVerifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelIdentityRecordsVerifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelIdentityRecordsVerifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelIdentityRecordsVerifyRequest proto.InternalMessageInfo

func (m *MsgCancelIdentityRecordsVerifyRequest) GetExecutor() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Executor
	}
	return nil
}

func (m *MsgCancelIdentityRecordsVerifyRequest) GetVerifyRequestId() uint64 {
	if m != nil {
		return m.VerifyRequestId
	}
	return 0
}

func init() {
	proto.RegisterType((*IdentityRecord)(nil), "kira.gov.IdentityRecord")
	proto.RegisterMapType((map[string]string)(nil), "kira.gov.IdentityRecord.InfosEntry")
	proto.RegisterType((*IdentityInfoEntry)(nil), "kira.gov.IdentityInfoEntry")
	proto.RegisterType((*MsgCreateIdentityRecord)(nil), "kira.gov.MsgCreateIdentityRecord")
	proto.RegisterType((*MsgEditIdentityRecord)(nil), "kira.gov.MsgEditIdentityRecord")
	proto.RegisterType((*IdentityRecordsVerify)(nil), "kira.gov.IdentityRecordsVerify")
	proto.RegisterType((*MsgRequestIdentityRecordsVerify)(nil), "kira.gov.MsgRequestIdentityRecordsVerify")
	proto.RegisterType((*MsgApproveIdentityRecords)(nil), "kira.gov.MsgApproveIdentityRecords")
	proto.RegisterType((*MsgCancelIdentityRecordsVerifyRequest)(nil), "kira.gov.MsgCancelIdentityRecordsVerifyRequest")
}

func init() { proto.RegisterFile("identity_registrar.proto", fileDescriptor_7b21a5f87db51929) }

var fileDescriptor_7b21a5f87db51929 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0xbd, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0x3f, 0x02, 0xc9, 0xb5, 0x6a, 0xc1, 0x6a, 0x85, 0x49, 0x51, 0x1c, 0x19, 0x55, 0x78,
	0xa9, 0x2d, 0xca, 0xd0, 0x8f, 0x05, 0xc5, 0xa1, 0x43, 0x84, 0x22, 0x24, 0x0b, 0x31, 0x20, 0xa1,
	0xe2, 0xda, 0x57, 0x73, 0xca, 0xc7, 0x99, 0xbb, 0x4b, 0x54, 0xff, 0x03, 0x48, 0x6c, 0xfd, 0x5f,
	0xf8, 0x13, 0x58, 0xca, 0xd6, 0x11, 0x31, 0x04, 0xd4, 0x8e, 0x6c, 0x1d, 0x59, 0x40, 0x3e, 0xe7,
	0xd2, 0x34, 0xa4, 0x12, 0x09, 0x4a, 0x27, 0x3f, 0xdf, 0xbb, 0xf7, 0xee, 0xfd, 0x3e, 0xee, 0x80,
	0x8e, 0x42, 0xd8, 0x61, 0x88, 0x25, 0xfb, 0x04, 0x46, 0x88, 0x32, 0xe2, 0x13, 0x3b, 0x26, 0x98,
	0x61, 0xad, 0xd0, 0x44, 0xc4, 0xb7, 0x23, 0xdc, 0x2b, 0xad, 0x44, 0x38, 0xc2, 0x7c, 0xd1, 0x49,
	0xa3, 0x2c, 0x5f, 0x32, 0x22, 0x8c, 0xa3, 0x16, 0x74, 0xf8, 0xdf, 0x41, 0xf7, 0xd0, 0x61, 0xa8,
	0x0d, 0x29, 0xf3, 0xdb, 0x71, 0xb6, 0xc1, 0xfc, 0x2d, 0x83, 0xa5, 0xfa, 0xa0, 0xbb, 0x07, 0x03,
	0x4c, 0x42, 0x6d, 0x09, 0xc8, 0x28, 0xd4, 0xa5, 0x8a, 0x64, 0xa9, 0x9e, 0x8c, 0x42, 0xed, 0x0d,
	0xb8, 0xed, 0x87, 0x21, 0x81, 0x94, 0xea, 0x72, 0x45, 0xb2, 0x16, 0xdd, 0xda, 0x45, 0xdf, 0x58,
	0x4a, 0xfc, 0x76, 0x6b, 0xd7, 0x1c, 0x24, 0xcc, 0x5f, 0x7d, 0x63, 0x23, 0x42, 0xec, 0x5d, 0xf7,
	0xc0, 0x0e, 0x70, 0xdb, 0x09, 0x30, 0x6d, 0x63, 0x3a, 0xf8, 0x6c, 0xd0, 0xb0, 0xe9, 0xb0, 0x24,
	0x86, 0xd4, 0xae, 0x06, 0x41, 0x35, 0xab, 0xf0, 0x44, 0x4f, 0x6d, 0x07, 0xe4, 0x51, 0xe7, 0x10,
	0x53, 0x5d, 0xa9, 0x28, 0xd6, 0xc2, 0xe6, 0x43, 0x5b, 0x40, 0xb2, 0xaf, 0xce, 0x65, 0xd7, 0xd3,
	0x5d, 0x7b, 0x1d, 0x46, 0x12, 0x2f, 0xab, 0xd0, 0xb6, 0x81, 0x1a, 0xfa, 0x0c, 0xea, 0x6a, 0x45,
	0xb2, 0x16, 0x36, 0x4b, 0x76, 0x06, 0xd6, 0x16, 0x60, 0xed, 0x97, 0x02, 0xac, 0x5b, 0x38, 0xe9,
	0x1b, 0xb9, 0xe3, 0xef, 0x86, 0xe4, 0xf1, 0x0a, 0xed, 0x05, 0x28, 0xf6, 0x20, 0x41, 0x87, 0x08,
	0x12, 0xaa, 0xe7, 0x2b, 0x8a, 0xb5, 0xe8, 0x3e, 0x9e, 0x1e, 0xc3, 0x65, 0x8f, 0xd2, 0x36, 0x00,
	0x97, 0xf3, 0x69, 0x77, 0x80, 0xd2, 0x84, 0x09, 0xe7, 0xb0, 0xe8, 0xa5, 0xa1, 0xb6, 0x02, 0xf2,
	0x3d, 0xbf, 0xd5, 0x85, 0x9c, 0xc2, 0xa2, 0x97, 0xfd, 0xec, 0xca, 0xdb, 0x92, 0xb9, 0x03, 0xee,
	0x0a, 0xa0, 0x69, 0x87, 0xeb, 0x1a, 0x68, 0x40, 0x4d, 0x41, 0x0f, 0xea, 0x79, 0x6c, 0xfe, 0x94,
	0xc0, 0xbd, 0x06, 0x8d, 0x6a, 0x04, 0xfa, 0x0c, 0x8e, 0xa9, 0x38, 0xa2, 0x9a, 0x34, 0x07, 0xd5,
	0xb6, 0x84, 0x6a, 0x32, 0x57, 0x6d, 0xed, 0x6f, 0xd5, 0x86, 0x60, 0x5c, 0x35, 0x25, 0x7f, 0x5c,
	0x33, 0x65, 0x5a, 0xcd, 0xcc, 0x0f, 0x32, 0x58, 0x6d, 0xd0, 0x68, 0x2f, 0x44, 0x6c, 0x0c, 0xeb,
	0x1a, 0x28, 0x12, 0x1e, 0xed, 0x0f, 0x8d, 0x5b, 0xc8, 0x16, 0xea, 0x73, 0xb7, 0xef, 0xd6, 0x55,
	0xfb, 0x4e, 0x4f, 0xc4, 0xd4, 0xe6, 0x35, 0xbf, 0xc8, 0x60, 0xf5, 0x2a, 0x03, 0xf4, 0x55, 0x6a,
	0xc4, 0xe4, 0xa6, 0xaf, 0xee, 0x5b, 0x50, 0x10, 0x37, 0x80, 0xeb, 0xb9, 0xe8, 0x3e, 0xbb, 0xe8,
	0x1b, 0xcb, 0x59, 0x7f, 0x91, 0x99, 0xe1, 0x80, 0x61, 0x57, 0xed, 0x81, 0x50, 0xb6, 0x1e, 0x52,
	0x5d, 0xad, 0x28, 0x96, 0xea, 0x5d, 0x2e, 0x68, 0x55, 0xa0, 0x30, 0x14, 0xeb, 0xf9, 0xf4, 0x4a,
	0xb8, 0x4e, 0xca, 0xd2, 0xb7, 0xbe, 0xf1, 0xe8, 0x1f, 0xce, 0xaa, 0x61, 0xd4, 0xf1, 0xd2, 0x5a,
	0xf3, 0xb3, 0x0c, 0x8c, 0x06, 0x8d, 0x3c, 0xf8, 0xbe, 0x0b, 0x29, 0x9b, 0xcc, 0xea, 0x9c, 0xaf,
	0xd2, 0x28, 0x8b, 0xf2, 0xfc, 0x59, 0x54, 0xae, 0x61, 0x51, 0xfd, 0x0f, 0x16, 0x3f, 0xca, 0xe0,
	0x7e, 0x83, 0x46, 0xd5, 0x38, 0x26, 0xb8, 0x37, 0xf6, 0x12, 0x71, 0x80, 0x31, 0xc1, 0x31, 0xa6,
	0x90, 0x0c, 0x08, 0x1c, 0x01, 0x28, 0x32, 0xb3, 0x00, 0x14, 0xb5, 0x37, 0x40, 0xa1, 0x05, 0x96,
	0x79, 0x9c, 0x0c, 0x9d, 0xc2, 0x1d, 0xaf, 0x7a, 0xe3, 0xcb, 0xe6, 0x27, 0x09, 0xac, 0xa7, 0x8f,
	0xb2, 0xdf, 0x09, 0x60, 0x6b, 0xa2, 0xa1, 0x06, 0x7b, 0xd3, 0xa9, 0xe1, 0x11, 0x0c, 0xba, 0x0c,
	0x4f, 0xe0, 0x45, 0x64, 0x66, 0x99, 0x5a, 0xd4, 0x4e, 0x9a, 0x5a, 0x9e, 0x38, 0xb5, 0xfb, 0xf4,
	0xe4, 0xac, 0x2c, 0x9d, 0x9e, 0x95, 0xa5, 0x1f, 0x67, 0x65, 0xe9, 0xf8, 0xbc, 0x9c, 0x3b, 0x3d,
	0x2f, 0xe7, 0xbe, 0x9e, 0x97, 0x73, 0xaf, 0xd7, 0x47, 0x0e, 0x7f, 0x8e, 0x88, 0x5f, 0xc3, 0x04,
	0x3a, 0x14, 0x36, 0x7d, 0xe4, 0x1c, 0x39, 0x11, 0xee, 0x65, 0xe7, 0x1f, 0xdc, 0xe2, 0x0f, 0xd7,
	0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x09, 0xe3, 0x57, 0x80, 0xac, 0x08, 0x00, 0x00,
}

func (m *IdentityRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Verifiers) > 0 {
		for iNdEx := len(m.Verifiers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Verifiers[iNdEx])
			copy(dAtA[i:], m.Verifiers[iNdEx])
			i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Verifiers[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintIdentityRegistrar(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	if len(m.Infos) > 0 {
		for k := range m.Infos {
			v := m.Infos[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintIdentityRegistrar(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdentityInfoEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityInfoEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityInfoEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		i -= len(m.Info)
		copy(dAtA[i:], m.Info)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Info)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateIdentityRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateIdentityRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateIdentityRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintIdentityRegistrar(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdentityRegistrar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEditIdentityRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEditIdentityRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEditIdentityRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Date, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Date):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintIdentityRegistrar(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x22
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIdentityRegistrar(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.RecordId != 0 {
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdentityRecordsVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityRecordsVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityRecordsVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tip.Size()
		i -= size
		if _, err := m.Tip.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.RecordIds) > 0 {
		dAtA5 := make([]byte, len(m.RecordIds)*10)
		var j4 int
		for _, num := range m.RecordIds {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Verifier) > 0 {
		i -= len(m.Verifier)
		copy(dAtA[i:], m.Verifier)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Verifier)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestIdentityRecordsVerify) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestIdentityRecordsVerify) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestIdentityRecordsVerify) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Tip.Size()
		i -= size
		if _, err := m.Tip.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.RecordIds) > 0 {
		dAtA7 := make([]byte, len(m.RecordIds)*10)
		var j6 int
		for _, num := range m.RecordIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Verifier) > 0 {
		i -= len(m.Verifier)
		copy(dAtA[i:], m.Verifier)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Verifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveIdentityRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveIdentityRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveIdentityRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyRequestId != 0 {
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(m.VerifyRequestId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Verifier) > 0 {
		i -= len(m.Verifier)
		copy(dAtA[i:], m.Verifier)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Verifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelIdentityRecordsVerifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelIdentityRecordsVerifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelIdentityRecordsVerifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VerifyRequestId != 0 {
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(m.VerifyRequestId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintIdentityRegistrar(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIdentityRegistrar(dAtA []byte, offset int, v uint64) int {
	offset -= sovIdentityRegistrar(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdentityRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIdentityRegistrar(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if len(m.Infos) > 0 {
		for k, v := range m.Infos {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovIdentityRegistrar(uint64(len(k))) + 1 + len(v) + sovIdentityRegistrar(uint64(len(v)))
			n += mapEntrySize + 1 + sovIdentityRegistrar(uint64(mapEntrySize))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovIdentityRegistrar(uint64(l))
	if len(m.Verifiers) > 0 {
		for _, b := range m.Verifiers {
			l = len(b)
			n += 1 + l + sovIdentityRegistrar(uint64(l))
		}
	}
	return n
}

func (m *IdentityInfoEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	l = len(m.Info)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	return n
}

func (m *MsgCreateIdentityRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovIdentityRegistrar(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovIdentityRegistrar(uint64(l))
	return n
}

func (m *MsgEditIdentityRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordId != 0 {
		n += 1 + sovIdentityRegistrar(uint64(m.RecordId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovIdentityRegistrar(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Date)
	n += 1 + l + sovIdentityRegistrar(uint64(l))
	return n
}

func (m *IdentityRecordsVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIdentityRegistrar(uint64(m.Id))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	l = len(m.Verifier)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if len(m.RecordIds) > 0 {
		l = 0
		for _, e := range m.RecordIds {
			l += sovIdentityRegistrar(uint64(e))
		}
		n += 1 + sovIdentityRegistrar(uint64(l)) + l
	}
	l = m.Tip.Size()
	n += 1 + l + sovIdentityRegistrar(uint64(l))
	return n
}

func (m *MsgRequestIdentityRecordsVerify) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	l = len(m.Verifier)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if len(m.RecordIds) > 0 {
		l = 0
		for _, e := range m.RecordIds {
			l += sovIdentityRegistrar(uint64(e))
		}
		n += 1 + sovIdentityRegistrar(uint64(l)) + l
	}
	l = m.Tip.Size()
	n += 1 + l + sovIdentityRegistrar(uint64(l))
	return n
}

func (m *MsgApproveIdentityRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	l = len(m.Verifier)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if m.VerifyRequestId != 0 {
		n += 1 + sovIdentityRegistrar(uint64(m.VerifyRequestId))
	}
	return n
}

func (m *MsgCancelIdentityRecordsVerifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovIdentityRegistrar(uint64(l))
	}
	if m.VerifyRequestId != 0 {
		n += 1 + sovIdentityRegistrar(uint64(m.VerifyRequestId))
	}
	return n
}

func sovIdentityRegistrar(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIdentityRegistrar(x uint64) (n int) {
	return sovIdentityRegistrar(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Infos == nil {
				m.Infos = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityRegistrar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityRegistrar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthIdentityRegistrar
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthIdentityRegistrar
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityRegistrar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthIdentityRegistrar
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthIdentityRegistrar
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthIdentityRegistrar
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Infos[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifiers", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifiers = append(m.Verifiers, make([]byte, postIndex-iNdEx))
			copy(m.Verifiers[len(m.Verifiers)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityInfoEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityInfoEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityInfoEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateIdentityRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateIdentityRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateIdentityRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, IdentityInfoEntry{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEditIdentityRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEditIdentityRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEditIdentityRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, IdentityInfoEntry{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Date, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdentityRecordsVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityRecordsVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityRecordsVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifier = append(m.Verifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Verifier == nil {
				m.Verifier = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityRegistrar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecordIds = append(m.RecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityRegistrar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityRegistrar
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIdentityRegistrar
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecordIds) == 0 {
					m.RecordIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityRegistrar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecordIds = append(m.RecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIds", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestIdentityRecordsVerify) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestIdentityRecordsVerify: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestIdentityRecordsVerify: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifier = append(m.Verifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Verifier == nil {
				m.Verifier = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityRegistrar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RecordIds = append(m.RecordIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowIdentityRegistrar
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthIdentityRegistrar
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthIdentityRegistrar
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RecordIds) == 0 {
					m.RecordIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowIdentityRegistrar
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RecordIds = append(m.RecordIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordIds", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tip.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveIdentityRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveIdentityRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveIdentityRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Verifier = append(m.Verifier[:0], dAtA[iNdEx:postIndex]...)
			if m.Verifier == nil {
				m.Verifier = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRequestId", wireType)
			}
			m.VerifyRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelIdentityRecordsVerifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelIdentityRecordsVerifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelIdentityRecordsVerifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = append(m.Executor[:0], dAtA[iNdEx:postIndex]...)
			if m.Executor == nil {
				m.Executor = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifyRequestId", wireType)
			}
			m.VerifyRequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifyRequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIdentityRegistrar(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIdentityRegistrar
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIdentityRegistrar(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIdentityRegistrar
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIdentityRegistrar
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIdentityRegistrar
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIdentityRegistrar
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIdentityRegistrar
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIdentityRegistrar        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIdentityRegistrar          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIdentityRegistrar = fmt.Errorf("proto: unexpected end of group")
)
