// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/network_properties.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkProperty int32

const (
	MinTxFee                     NetworkProperty = 0
	MaxTxFee                     NetworkProperty = 1
	VoteQuorum                   NetworkProperty = 2
	MinimumProposalEndTime       NetworkProperty = 3
	ProposalEnactmentTime        NetworkProperty = 4
	MinProposalEndBlocks         NetworkProperty = 5
	MinProposalEnactmentBlocks   NetworkProperty = 6
	EnableForeignFeePayments     NetworkProperty = 7
	MischanceRankDecreaseAmount  NetworkProperty = 8
	MaxMischance                 NetworkProperty = 9
	MischanceConfidence          NetworkProperty = 10
	InactiveRankDecreasePercent  NetworkProperty = 11
	PoorNetworkMaxBankSend       NetworkProperty = 12
	MinValidators                NetworkProperty = 13
	UnjailMaxTime                NetworkProperty = 14
	EnableTokenWhitelist         NetworkProperty = 15
	EnableTokenBlacklist         NetworkProperty = 16
	MinIdentityApprovalTip       NetworkProperty = 17
	UniqueIdentityKeys           NetworkProperty = 18
	UbiHardcap                   NetworkProperty = 19
	ValidatorsFeeShare           NetworkProperty = 20
	InflationRate                NetworkProperty = 21
	InflationPeriod              NetworkProperty = 22
	UnstakingPeriod              NetworkProperty = 23
	MaxDelegators                NetworkProperty = 24
	MinDelegationPushout         NetworkProperty = 25
	SlashingPeriod               NetworkProperty = 26
	MaxJailedPercentage          NetworkProperty = 27
	MaxSlashingPercentage        NetworkProperty = 28
	MinCustodyReward             NetworkProperty = 29
	MaxCustodyBufferSize         NetworkProperty = 30
	MaxCustodyTxSize             NetworkProperty = 31
	AbstentionRankDecreaseAmount NetworkProperty = 32
	MaxAbstention                NetworkProperty = 33
	MinCollectiveBond            NetworkProperty = 34
	MinCollectiveBondingTime     NetworkProperty = 35
	MaxCollectiveOutputs         NetworkProperty = 36
	MinCollectiveClaimPeriod     NetworkProperty = 37
)

var NetworkProperty_name = map[int32]string{
	0:  "MIN_TX_FEE",
	1:  "MAX_TX_FEE",
	2:  "VOTE_QUORUM",
	3:  "MINIMUM_PROPOSAL_END_TIME",
	4:  "PROPOSAL_ENACTMENT_TIME",
	5:  "MIN_PROPOSAL_END_BLOCKS",
	6:  "MIN_PROPOSAL_ENACTMENT_BLOCKS",
	7:  "ENABLE_FOREIGN_FEE_PAYMENTS",
	8:  "MISCHANCE_RANK_DECREASE_AMOUNT",
	9:  "MAX_MISCHANCE",
	10: "MISCHANCE_CONFIDENCE",
	11: "INACTIVE_RANK_DECREASE_PERCENT",
	12: "POOR_NETWORK_MAX_BANK_SEND",
	13: "MIN_VALIDATORS",
	14: "UNJAIL_MAX_TIME",
	15: "ENABLE_TOKEN_WHITELIST",
	16: "ENABLE_TOKEN_BLACKLIST",
	17: "MIN_IDENTITY_APPROVAL_TIP",
	18: "UNIQUE_IDENTITY_KEYS",
	19: "UBI_HARDCAP",
	20: "VALIDATORS_FEE_SHARE",
	21: "INFLATION_RATE",
	22: "INFLATION_PERIOD",
	23: "UNSTAKING_PERIOD",
	24: "MAX_DELEGATORS",
	25: "MIN_DELEGATION_PUSHOUT",
	26: "SLASHING_PERIOD",
	27: "MAX_JAILED_PERCENTAGE",
	28: "MAX_SLASHING_PERCENTAGE",
	29: "MIN_CUSTODY_REWARD",
	30: "MAX_CUSTODY_BUFFER_SIZE",
	31: "MAX_CUSTODY_TX_SIZE",
	32: "ABSTENTION_RANK_DECREASE_AMOUNT",
	33: "MAX_ABSTENTION",
	34: "MIN_COLLECTIVE_BOND",
	35: "MIN_COLLECTIVE_BONDING_TIME",
	36: "MAX_COLLECTIVE_OUTPUTS",
	37: "MIN_COLLECTIVE_CLAIM_PERIOD",
}

var NetworkProperty_value = map[string]int32{
	"MIN_TX_FEE":                      0,
	"MAX_TX_FEE":                      1,
	"VOTE_QUORUM":                     2,
	"MINIMUM_PROPOSAL_END_TIME":       3,
	"PROPOSAL_ENACTMENT_TIME":         4,
	"MIN_PROPOSAL_END_BLOCKS":         5,
	"MIN_PROPOSAL_ENACTMENT_BLOCKS":   6,
	"ENABLE_FOREIGN_FEE_PAYMENTS":     7,
	"MISCHANCE_RANK_DECREASE_AMOUNT":  8,
	"MAX_MISCHANCE":                   9,
	"MISCHANCE_CONFIDENCE":            10,
	"INACTIVE_RANK_DECREASE_PERCENT":  11,
	"POOR_NETWORK_MAX_BANK_SEND":      12,
	"MIN_VALIDATORS":                  13,
	"UNJAIL_MAX_TIME":                 14,
	"ENABLE_TOKEN_WHITELIST":          15,
	"ENABLE_TOKEN_BLACKLIST":          16,
	"MIN_IDENTITY_APPROVAL_TIP":       17,
	"UNIQUE_IDENTITY_KEYS":            18,
	"UBI_HARDCAP":                     19,
	"VALIDATORS_FEE_SHARE":            20,
	"INFLATION_RATE":                  21,
	"INFLATION_PERIOD":                22,
	"UNSTAKING_PERIOD":                23,
	"MAX_DELEGATORS":                  24,
	"MIN_DELEGATION_PUSHOUT":          25,
	"SLASHING_PERIOD":                 26,
	"MAX_JAILED_PERCENTAGE":           27,
	"MAX_SLASHING_PERCENTAGE":         28,
	"MIN_CUSTODY_REWARD":              29,
	"MAX_CUSTODY_BUFFER_SIZE":         30,
	"MAX_CUSTODY_TX_SIZE":             31,
	"ABSTENTION_RANK_DECREASE_AMOUNT": 32,
	"MAX_ABSTENTION":                  33,
	"MIN_COLLECTIVE_BOND":             34,
	"MIN_COLLECTIVE_BONDING_TIME":     35,
	"MAX_COLLECTIVE_OUTPUTS":          36,
	"MIN_COLLECTIVE_CLAIM_PERIOD":     37,
}

func (x NetworkProperty) String() string {
	return proto.EnumName(NetworkProperty_name, int32(x))
}

func (NetworkProperty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}

type MsgSetNetworkProperties struct {
	NetworkProperties *NetworkProperties                            `protobuf:"bytes,1,opt,name=network_properties,json=networkProperties,proto3" json:"network_properties,omitempty"`
	Proposer          github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty"`
}

func (m *MsgSetNetworkProperties) Reset()         { *m = MsgSetNetworkProperties{} }
func (m *MsgSetNetworkProperties) String() string { return proto.CompactTextString(m) }
func (*MsgSetNetworkProperties) ProtoMessage()    {}
func (*MsgSetNetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}
func (m *MsgSetNetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNetworkProperties.Merge(m, src)
}
func (m *MsgSetNetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNetworkProperties proto.InternalMessageInfo

func (m *MsgSetNetworkProperties) GetNetworkProperties() *NetworkProperties {
	if m != nil {
		return m.NetworkProperties
	}
	return nil
}

func (m *MsgSetNetworkProperties) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type NetworkPropertyValue struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
}

func (m *NetworkPropertyValue) Reset()         { *m = NetworkPropertyValue{} }
func (m *NetworkPropertyValue) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertyValue) ProtoMessage()    {}
func (*NetworkPropertyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{1}
}
func (m *NetworkPropertyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPropertyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPropertyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPropertyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertyValue.Merge(m, src)
}
func (m *NetworkPropertyValue) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPropertyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertyValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertyValue proto.InternalMessageInfo

func (m *NetworkPropertyValue) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NetworkPropertyValue) GetStrValue() string {
	if m != nil {
		return m.StrValue
	}
	return ""
}

type NetworkProperties struct {
	MinTxFee                     uint64                                 `protobuf:"varint,1,opt,name=min_tx_fee,json=minTxFee,proto3" json:"min_tx_fee,omitempty"`
	MaxTxFee                     uint64                                 `protobuf:"varint,2,opt,name=max_tx_fee,json=maxTxFee,proto3" json:"max_tx_fee,omitempty"`
	VoteQuorum                   uint64                                 `protobuf:"varint,3,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	MinimumProposalEndTime       uint64                                 `protobuf:"varint,4,opt,name=minimum_proposal_end_time,json=minimumProposalEndTime,proto3" json:"minimum_proposal_end_time,omitempty"`
	ProposalEnactmentTime        uint64                                 `protobuf:"varint,5,opt,name=proposal_enactment_time,json=proposalEnactmentTime,proto3" json:"proposal_enactment_time,omitempty"`
	MinProposalEndBlocks         uint64                                 `protobuf:"varint,6,opt,name=min_proposal_end_blocks,json=minProposalEndBlocks,proto3" json:"min_proposal_end_blocks,omitempty"`
	MinProposalEnactmentBlocks   uint64                                 `protobuf:"varint,7,opt,name=min_proposal_enactment_blocks,json=minProposalEnactmentBlocks,proto3" json:"min_proposal_enactment_blocks,omitempty"`
	EnableForeignFeePayments     bool                                   `protobuf:"varint,8,opt,name=enable_foreign_fee_payments,json=enableForeignFeePayments,proto3" json:"enable_foreign_fee_payments,omitempty"`
	MischanceRankDecreaseAmount  uint64                                 `protobuf:"varint,9,opt,name=mischance_rank_decrease_amount,json=mischanceRankDecreaseAmount,proto3" json:"mischance_rank_decrease_amount,omitempty"`
	MaxMischance                 uint64                                 `protobuf:"varint,10,opt,name=max_mischance,json=maxMischance,proto3" json:"max_mischance,omitempty"`
	MischanceConfidence          uint64                                 `protobuf:"varint,11,opt,name=mischance_confidence,json=mischanceConfidence,proto3" json:"mischance_confidence,omitempty"`
	InactiveRankDecreasePercent  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=inactive_rank_decrease_percent,json=inactiveRankDecreasePercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inactive_rank_decrease_percent"`
	MinValidators                uint64                                 `protobuf:"varint,13,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
	PoorNetworkMaxBankSend       uint64                                 `protobuf:"varint,14,opt,name=poor_network_max_bank_send,json=poorNetworkMaxBankSend,proto3" json:"poor_network_max_bank_send,omitempty"`
	UnjailMaxTime                uint64                                 `protobuf:"varint,15,opt,name=unjail_max_time,json=unjailMaxTime,proto3" json:"unjail_max_time,omitempty"`
	EnableTokenWhitelist         bool                                   `protobuf:"varint,16,opt,name=enable_token_whitelist,json=enableTokenWhitelist,proto3" json:"enable_token_whitelist,omitempty"`
	EnableTokenBlacklist         bool                                   `protobuf:"varint,17,opt,name=enable_token_blacklist,json=enableTokenBlacklist,proto3" json:"enable_token_blacklist,omitempty"`
	MinIdentityApprovalTip       uint64                                 `protobuf:"varint,18,opt,name=min_identity_approval_tip,json=minIdentityApprovalTip,proto3" json:"min_identity_approval_tip,omitempty"`
	UniqueIdentityKeys           string                                 `protobuf:"bytes,19,opt,name=unique_identity_keys,json=uniqueIdentityKeys,proto3" json:"unique_identity_keys,omitempty"`
	UbiHardcap                   uint64                                 `protobuf:"varint,20,opt,name=ubi_hardcap,json=ubiHardcap,proto3" json:"ubi_hardcap,omitempty"`
	ValidatorsFeeShare           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=validators_fee_share,json=validatorsFeeShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validators_fee_share"`
	InflationRate                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=inflation_rate,json=inflationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation_rate"`
	InflationPeriod              uint64                                 `protobuf:"varint,23,opt,name=inflation_period,json=inflationPeriod,proto3" json:"inflation_period,omitempty"`
	UnstakingPeriod              uint64                                 `protobuf:"varint,24,opt,name=unstaking_period,json=unstakingPeriod,proto3" json:"unstaking_period,omitempty"`
	MaxDelegators                uint64                                 `protobuf:"varint,25,opt,name=max_delegators,json=maxDelegators,proto3" json:"max_delegators,omitempty"`
	MinDelegationPushout         uint64                                 `protobuf:"varint,26,opt,name=min_delegation_pushout,json=minDelegationPushout,proto3" json:"min_delegation_pushout,omitempty"`
	SlashingPeriod               uint64                                 `protobuf:"varint,27,opt,name=slashing_period,json=slashingPeriod,proto3" json:"slashing_period,omitempty"`
	MaxJailedPercentage          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,28,opt,name=max_jailed_percentage,json=maxJailedPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_jailed_percentage"`
	MaxSlashingPercentage        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,29,opt,name=max_slashing_percentage,json=maxSlashingPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_slashing_percentage"`
	MinCustodyReward             uint64                                 `protobuf:"varint,30,opt,name=min_custody_reward,json=minCustodyReward,proto3" json:"min_custody_reward,omitempty"`
	MaxCustodyBufferSize         uint64                                 `protobuf:"varint,31,opt,name=max_custody_buffer_size,json=maxCustodyBufferSize,proto3" json:"max_custody_buffer_size,omitempty"`
	MaxCustodyTxSize             uint64                                 `protobuf:"varint,32,opt,name=max_custody_tx_size,json=maxCustodyTxSize,proto3" json:"max_custody_tx_size,omitempty"`
	AbstentionRankDecreaseAmount uint64                                 `protobuf:"varint,33,opt,name=abstention_rank_decrease_amount,json=abstentionRankDecreaseAmount,proto3" json:"abstention_rank_decrease_amount,omitempty"`
	MaxAbstention                uint64                                 `protobuf:"varint,34,opt,name=max_abstention,json=maxAbstention,proto3" json:"max_abstention,omitempty"`
	MinCollectiveBond            uint64                                 `protobuf:"varint,35,opt,name=min_collective_bond,json=minCollectiveBond,proto3" json:"min_collective_bond,omitempty"`
	MinCollectiveBondingTime     uint64                                 `protobuf:"varint,36,opt,name=min_collective_bonding_time,json=minCollectiveBondingTime,proto3" json:"min_collective_bonding_time,omitempty"`
	MaxCollectiveOutputs         uint64                                 `protobuf:"varint,37,opt,name=max_collective_outputs,json=maxCollectiveOutputs,proto3" json:"max_collective_outputs,omitempty"`
	MinCollectiveClaimPeriod     uint64                                 `protobuf:"varint,38,opt,name=min_collective_claim_period,json=minCollectiveClaimPeriod,proto3" json:"min_collective_claim_period,omitempty"`
}

func (m *NetworkProperties) Reset()         { *m = NetworkProperties{} }
func (m *NetworkProperties) String() string { return proto.CompactTextString(m) }
func (*NetworkProperties) ProtoMessage()    {}
func (*NetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{2}
}
func (m *NetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProperties.Merge(m, src)
}
func (m *NetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *NetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProperties proto.InternalMessageInfo

func (m *NetworkProperties) GetMinTxFee() uint64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *NetworkProperties) GetMaxTxFee() uint64 {
	if m != nil {
		return m.MaxTxFee
	}
	return 0
}

func (m *NetworkProperties) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *NetworkProperties) GetMinimumProposalEndTime() uint64 {
	if m != nil {
		return m.MinimumProposalEndTime
	}
	return 0
}

func (m *NetworkProperties) GetProposalEnactmentTime() uint64 {
	if m != nil {
		return m.ProposalEnactmentTime
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEndBlocks() uint64 {
	if m != nil {
		return m.MinProposalEndBlocks
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEnactmentBlocks() uint64 {
	if m != nil {
		return m.MinProposalEnactmentBlocks
	}
	return 0
}

func (m *NetworkProperties) GetEnableForeignFeePayments() bool {
	if m != nil {
		return m.EnableForeignFeePayments
	}
	return false
}

func (m *NetworkProperties) GetMischanceRankDecreaseAmount() uint64 {
	if m != nil {
		return m.MischanceRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxMischance() uint64 {
	if m != nil {
		return m.MaxMischance
	}
	return 0
}

func (m *NetworkProperties) GetMischanceConfidence() uint64 {
	if m != nil {
		return m.MischanceConfidence
	}
	return 0
}

func (m *NetworkProperties) GetMinValidators() uint64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

func (m *NetworkProperties) GetPoorNetworkMaxBankSend() uint64 {
	if m != nil {
		return m.PoorNetworkMaxBankSend
	}
	return 0
}

func (m *NetworkProperties) GetUnjailMaxTime() uint64 {
	if m != nil {
		return m.UnjailMaxTime
	}
	return 0
}

func (m *NetworkProperties) GetEnableTokenWhitelist() bool {
	if m != nil {
		return m.EnableTokenWhitelist
	}
	return false
}

func (m *NetworkProperties) GetEnableTokenBlacklist() bool {
	if m != nil {
		return m.EnableTokenBlacklist
	}
	return false
}

func (m *NetworkProperties) GetMinIdentityApprovalTip() uint64 {
	if m != nil {
		return m.MinIdentityApprovalTip
	}
	return 0
}

func (m *NetworkProperties) GetUniqueIdentityKeys() string {
	if m != nil {
		return m.UniqueIdentityKeys
	}
	return ""
}

func (m *NetworkProperties) GetUbiHardcap() uint64 {
	if m != nil {
		return m.UbiHardcap
	}
	return 0
}

func (m *NetworkProperties) GetInflationPeriod() uint64 {
	if m != nil {
		return m.InflationPeriod
	}
	return 0
}

func (m *NetworkProperties) GetUnstakingPeriod() uint64 {
	if m != nil {
		return m.UnstakingPeriod
	}
	return 0
}

func (m *NetworkProperties) GetMaxDelegators() uint64 {
	if m != nil {
		return m.MaxDelegators
	}
	return 0
}

func (m *NetworkProperties) GetMinDelegationPushout() uint64 {
	if m != nil {
		return m.MinDelegationPushout
	}
	return 0
}

func (m *NetworkProperties) GetSlashingPeriod() uint64 {
	if m != nil {
		return m.SlashingPeriod
	}
	return 0
}

func (m *NetworkProperties) GetMinCustodyReward() uint64 {
	if m != nil {
		return m.MinCustodyReward
	}
	return 0
}

func (m *NetworkProperties) GetMaxCustodyBufferSize() uint64 {
	if m != nil {
		return m.MaxCustodyBufferSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxCustodyTxSize() uint64 {
	if m != nil {
		return m.MaxCustodyTxSize
	}
	return 0
}

func (m *NetworkProperties) GetAbstentionRankDecreaseAmount() uint64 {
	if m != nil {
		return m.AbstentionRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxAbstention() uint64 {
	if m != nil {
		return m.MaxAbstention
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveBond() uint64 {
	if m != nil {
		return m.MinCollectiveBond
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveBondingTime() uint64 {
	if m != nil {
		return m.MinCollectiveBondingTime
	}
	return 0
}

func (m *NetworkProperties) GetMaxCollectiveOutputs() uint64 {
	if m != nil {
		return m.MaxCollectiveOutputs
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveClaimPeriod() uint64 {
	if m != nil {
		return m.MinCollectiveClaimPeriod
	}
	return 0
}

func init() {
	proto.RegisterEnum("kira.gov.NetworkProperty", NetworkProperty_name, NetworkProperty_value)
	proto.RegisterType((*MsgSetNetworkProperties)(nil), "kira.gov.MsgSetNetworkProperties")
	proto.RegisterType((*NetworkPropertyValue)(nil), "kira.gov.NetworkPropertyValue")
	proto.RegisterType((*NetworkProperties)(nil), "kira.gov.NetworkProperties")
}

func init() { proto.RegisterFile("kira/gov/network_properties.proto", fileDescriptor_98011a6048e5dde3) }

var fileDescriptor_98011a6048e5dde3 = []byte{
	// 1954 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0xb6, 0xb2, 0x49, 0xd6, 0x99, 0xf8, 0x87, 0xa6, 0x65, 0x9b, 0xa1, 0x1d, 0x99, 0x71, 0xd6,
	0x69, 0x5a, 0x34, 0xf6, 0xee, 0xb6, 0x5d, 0xa0, 0x01, 0x8a, 0x82, 0x92, 0xa8, 0x98, 0xb1, 0xf8,
	0x13, 0xfe, 0x38, 0xc9, 0xde, 0x4c, 0x47, 0xd2, 0x58, 0x66, 0x25, 0x92, 0x5a, 0x92, 0x72, 0xe4,
	0x7d, 0x82, 0x42, 0x17, 0x45, 0x5f, 0x40, 0x40, 0x81, 0xbe, 0x42, 0x1f, 0x62, 0x2f, 0xf7, 0xb2,
	0xe8, 0x45, 0x50, 0x24, 0x37, 0x7d, 0x86, 0xbd, 0x2a, 0x66, 0x86, 0xa4, 0x7e, 0xed, 0x2e, 0x72,
	0x65, 0xf9, 0x9c, 0xef, 0x3b, 0xe7, 0xcc, 0x39, 0x67, 0xe6, 0x1c, 0x10, 0x3c, 0xea, 0x78, 0x11,
	0x3a, 0x6e, 0x87, 0x97, 0xc7, 0x01, 0x4e, 0xde, 0x85, 0x51, 0x07, 0xf6, 0xa2, 0xb0, 0x87, 0xa3,
	0xc4, 0xc3, 0xf1, 0x51, 0x2f, 0x0a, 0x93, 0x90, 0x5f, 0x26, 0x90, 0xa3, 0x76, 0x78, 0x29, 0x16,
	0xdb, 0x61, 0x3b, 0xa4, 0xc2, 0x63, 0xf2, 0x8b, 0xe9, 0x0f, 0xfe, 0x59, 0x00, 0x3b, 0x5a, 0xdc,
	0xb6, 0x71, 0xa2, 0x33, 0x13, 0x66, 0x6e, 0x81, 0x7f, 0x09, 0xf8, 0x79, 0xbb, 0x42, 0x41, 0x2a,
	0x3c, 0xbd, 0xff, 0xf5, 0xee, 0x51, 0x66, 0xf8, 0x68, 0x8e, 0x68, 0x6d, 0x04, 0x73, 0xb6, 0x34,
	0xb0, 0x4c, 0x6c, 0x84, 0x31, 0x8e, 0x84, 0x5b, 0x52, 0xe1, 0xe9, 0x4a, 0xf9, 0xab, 0x9f, 0xde,
	0xef, 0x3f, 0x6b, 0x7b, 0xc9, 0x45, 0xbf, 0x71, 0xd4, 0x0c, 0xfd, 0xe3, 0x66, 0x18, 0xfb, 0x61,
	0x9c, 0xfe, 0x79, 0x16, 0xb7, 0x3a, 0xc7, 0xc9, 0x55, 0x0f, 0xc7, 0x47, 0x72, 0xb3, 0x29, 0xb7,
	0x5a, 0x11, 0x8e, 0x63, 0x2b, 0x37, 0x71, 0x60, 0x80, 0xe2, 0xb4, 0xdb, 0xab, 0x33, 0xd4, 0xed,
	0x63, 0xbe, 0x08, 0xee, 0x5c, 0x92, 0x1f, 0x34, 0xca, 0xdb, 0x16, 0xfb, 0x87, 0xdf, 0x05, 0xf7,
	0xe2, 0x24, 0x82, 0x4c, 0x43, 0xbc, 0xdf, 0xb3, 0x96, 0xe3, 0x24, 0xa2, 0x94, 0xe7, 0xb7, 0xff,
	0xfb, 0xf7, 0xfd, 0xc2, 0xc1, 0x4f, 0x1c, 0xd8, 0x98, 0xcf, 0xc0, 0x1e, 0x00, 0xbe, 0x17, 0xc0,
	0x64, 0x00, 0xcf, 0x71, 0x66, 0x73, 0xd9, 0xf7, 0x02, 0x67, 0x50, 0xc3, 0x98, 0x6a, 0xd1, 0x20,
	0xd3, 0xde, 0x4a, 0xb5, 0x68, 0xc0, 0xb4, 0xfb, 0xe0, 0xfe, 0x65, 0x98, 0x60, 0xf8, 0x5d, 0x3f,
	0x8c, 0xfa, 0xbe, 0xf0, 0x19, 0x55, 0x03, 0x22, 0x7a, 0x45, 0x25, 0xfc, 0xef, 0xc1, 0x03, 0xdf,
	0x0b, 0x3c, 0xbf, 0xef, 0x43, 0x76, 0x2e, 0xd4, 0x85, 0x38, 0x68, 0xc1, 0xc4, 0xf3, 0xb1, 0x70,
	0x9b, 0xc2, 0xb7, 0x53, 0x80, 0x99, 0xea, 0x95, 0xa0, 0xe5, 0x78, 0x3e, 0xe6, 0xbf, 0x01, 0x3b,
	0x13, 0x14, 0xd4, 0x4c, 0x7c, 0x1c, 0x24, 0x8c, 0x78, 0x87, 0x12, 0xb7, 0x7a, 0x39, 0x23, 0xd5,
	0x52, 0xde, 0xef, 0xc0, 0x0e, 0x39, 0xcf, 0x94, 0xbb, 0x46, 0x37, 0x6c, 0x76, 0x62, 0xe1, 0x2e,
	0xe5, 0x15, 0x7d, 0x2f, 0x98, 0x70, 0x56, 0xa6, 0x3a, 0x5e, 0x06, 0x0f, 0x67, 0x68, 0x99, 0xcb,
	0x94, 0xfc, 0x39, 0x25, 0x8b, 0x53, 0xe4, 0x14, 0x92, 0x9a, 0xf8, 0x03, 0xd8, 0xc5, 0x01, 0x6a,
	0x74, 0x31, 0x3c, 0x0f, 0x23, 0xec, 0xb5, 0x03, 0x92, 0x33, 0xd8, 0x43, 0x57, 0x04, 0x13, 0x0b,
	0xcb, 0x52, 0xe1, 0xe9, 0xb2, 0x25, 0x30, 0x48, 0x8d, 0x21, 0x6a, 0x18, 0x9b, 0xa9, 0x9e, 0xaf,
	0x80, 0x92, 0xef, 0xc5, 0xcd, 0x0b, 0x14, 0x34, 0x31, 0x8c, 0x50, 0xd0, 0x81, 0x2d, 0xdc, 0x8c,
	0x30, 0x8a, 0x31, 0x44, 0x7e, 0xd8, 0x0f, 0x12, 0xe1, 0x1e, 0x0d, 0x61, 0x37, 0x47, 0x59, 0x28,
	0xe8, 0x54, 0x53, 0x8c, 0x4c, 0x21, 0xfc, 0x63, 0xb0, 0x4a, 0xea, 0x95, 0x43, 0x04, 0x40, 0x39,
	0x2b, 0x3e, 0x1a, 0x68, 0x99, 0x8c, 0xff, 0x0a, 0x14, 0xc7, 0x9e, 0x9a, 0x61, 0x70, 0xee, 0xb5,
	0x30, 0xc1, 0xde, 0xa7, 0xd8, 0xcd, 0x5c, 0x57, 0xc9, 0x55, 0x7c, 0x0c, 0x4a, 0x1e, 0x39, 0xae,
	0x77, 0x39, 0x1b, 0x5b, 0x0f, 0x47, 0x4d, 0x1c, 0x24, 0xc2, 0x0a, 0xe9, 0xb9, 0xf2, 0xd1, 0x0f,
	0xef, 0xf7, 0x97, 0xfe, 0xfd, 0x7e, 0xff, 0xc9, 0xcf, 0xe8, 0xfa, 0x2a, 0x6e, 0x5a, 0xbb, 0x99,
	0xd5, 0xc9, 0xb3, 0x98, 0xcc, 0x24, 0x7f, 0x08, 0xd6, 0x48, 0x4d, 0x2e, 0x51, 0xd7, 0x6b, 0xa1,
	0x24, 0x8c, 0x62, 0x61, 0x95, 0x46, 0xb8, 0xea, 0x7b, 0xc1, 0x59, 0x2e, 0xe4, 0x9f, 0x03, 0xb1,
	0x17, 0x86, 0x11, 0xcc, 0x2e, 0x32, 0x49, 0x40, 0x83, 0xc4, 0x18, 0xe3, 0xa0, 0x25, 0xac, 0xb1,
	0x2e, 0x23, 0x88, 0xb4, 0xf9, 0x35, 0x34, 0x28, 0xa3, 0xa0, 0x63, 0xe3, 0xa0, 0xc5, 0x3f, 0x01,
	0xeb, 0xfd, 0xe0, 0xcf, 0xc8, 0xeb, 0x52, 0x16, 0xed, 0xae, 0x75, 0xe6, 0x83, 0x89, 0x35, 0x34,
	0xa0, 0x5d, 0xf5, 0x5b, 0xb0, 0x9d, 0xd6, 0x36, 0x09, 0x3b, 0x38, 0x80, 0xef, 0x2e, 0xbc, 0x04,
	0x77, 0xbd, 0x38, 0x11, 0x38, 0x5a, 0xd6, 0x22, 0xd3, 0x3a, 0x44, 0xf9, 0x3a, 0xd3, 0xcd, 0xb1,
	0x1a, 0x5d, 0xd4, 0xec, 0x50, 0xd6, 0xc6, 0x1c, 0xab, 0x9c, 0xe9, 0xd2, 0x4b, 0x03, 0x49, 0xe6,
	0x13, 0x2f, 0xb9, 0x82, 0xa8, 0xd7, 0x8b, 0xc2, 0x4b, 0xd4, 0x85, 0x89, 0xd7, 0x13, 0xf8, 0xfc,
	0xd2, 0xa8, 0xa9, 0x5e, 0x4e, 0xd5, 0x8e, 0xd7, 0xe3, 0xbf, 0x04, 0xc5, 0x7e, 0xe0, 0x7d, 0xd7,
	0xc7, 0x63, 0x76, 0x07, 0x5f, 0xc5, 0xc2, 0x26, 0x7d, 0x10, 0x78, 0xa6, 0xcb, 0x88, 0xa7, 0xf8,
	0x2a, 0x26, 0x57, 0xb8, 0xdf, 0xf0, 0xe0, 0x05, 0x8a, 0x5a, 0x4d, 0xd4, 0x13, 0x8a, 0xec, 0x0a,
	0xf7, 0x1b, 0xde, 0x09, 0x93, 0xf0, 0x7f, 0x02, 0xc5, 0x71, 0x01, 0x68, 0x47, 0xc7, 0x17, 0x28,
	0xc2, 0xc2, 0xd6, 0x27, 0xd5, 0x9b, 0x1f, 0xdb, 0xaa, 0x61, 0x6c, 0x13, 0x4b, 0xbc, 0x0b, 0xd6,
	0xbc, 0xe0, 0xbc, 0x8b, 0x12, 0x2f, 0x0c, 0x60, 0x84, 0x12, 0x2c, 0x6c, 0x7f, 0x92, 0xed, 0xd5,
	0xdc, 0x8a, 0x85, 0x12, 0xcc, 0xff, 0x12, 0x70, 0x63, 0xb3, 0x3d, 0x1c, 0x79, 0x61, 0x4b, 0xd8,
	0xa1, 0xc7, 0x5b, 0xcf, 0xe5, 0x26, 0x15, 0x13, 0x68, 0x3f, 0x88, 0x13, 0xd4, 0xf1, 0x82, 0x76,
	0x06, 0x15, 0x18, 0x34, 0x97, 0xa7, 0x50, 0xd2, 0x93, 0x68, 0x00, 0x5b, 0xb8, 0x8b, 0xdb, 0xac,
	0x27, 0x1f, 0xa4, 0x3d, 0x89, 0x06, 0xd5, 0x5c, 0x48, 0x2a, 0x4f, 0x6a, 0x98, 0xc2, 0x68, 0x04,
	0xfd, 0xf8, 0x22, 0xec, 0x27, 0x82, 0x98, 0x3f, 0x42, 0xd5, 0x5c, 0x69, 0x32, 0x1d, 0xff, 0x0b,
	0xb0, 0x1e, 0x77, 0x51, 0x7c, 0x31, 0x11, 0xc6, 0x2e, 0x85, 0xaf, 0x65, 0xe2, 0x34, 0x8a, 0x06,
	0xd8, 0x22, 0x51, 0x90, 0x0e, 0xc5, 0xad, 0xec, 0x0a, 0xa2, 0x36, 0x16, 0xf6, 0x3e, 0x29, 0x73,
	0x9b, 0x3e, 0x1a, 0xbc, 0xa4, 0xb6, 0xcc, 0xdc, 0x14, 0x7f, 0x0e, 0x76, 0x88, 0x8f, 0xc9, 0x80,
	0x32, 0x2f, 0x0f, 0x3f, 0xc9, 0x0b, 0x09, 0xd9, 0x1e, 0x9f, 0x23, 0xf3, 0xf3, 0x6b, 0xc0, 0x93,
	0x54, 0x35, 0xfb, 0x71, 0x12, 0xb6, 0xae, 0x60, 0x84, 0xdf, 0xa1, 0xa8, 0x25, 0x94, 0xe8, 0xb9,
	0x39, 0xdf, 0x0b, 0x2a, 0x4c, 0x61, 0x51, 0x39, 0x7d, 0xde, 0xd1, 0x20, 0x47, 0x37, 0xfa, 0xe7,
	0xe7, 0x38, 0x82, 0xb1, 0xf7, 0x3d, 0x16, 0xf6, 0xd3, 0xcc, 0xa2, 0x41, 0x4a, 0x29, 0x53, 0xa5,
	0xed, 0x7d, 0x8f, 0xf9, 0x67, 0x60, 0x73, 0x92, 0x96, 0x0c, 0x18, 0x45, 0x4a, 0xbd, 0xe4, 0x14,
	0x67, 0x40, 0xe1, 0x0a, 0xd8, 0x47, 0x8d, 0x38, 0x21, 0xf7, 0x84, 0xf6, 0xe4, 0x82, 0xc7, 0xf8,
	0x11, 0xa5, 0xee, 0x8d, 0x61, 0x0b, 0x5e, 0xe3, 0xb4, 0x59, 0xc6, 0x18, 0xe1, 0x20, 0x6f, 0x16,
	0x39, 0x17, 0xf2, 0x47, 0x60, 0x93, 0x66, 0x20, 0xec, 0x76, 0x31, 0x7b, 0x62, 0x1b, 0x61, 0xd0,
	0x12, 0x1e, 0x53, 0xec, 0x06, 0x49, 0x41, 0xae, 0x29, 0x87, 0x41, 0x8b, 0x0c, 0x9a, 0x05, 0x78,
	0x52, 0x23, 0xfa, 0x80, 0x7d, 0x41, 0x79, 0xc2, 0x1c, 0xcf, 0x0b, 0xda, 0xd9, 0x5b, 0x46, 0x73,
	0x31, 0xa6, 0x87, 0xfd, 0xa4, 0xd7, 0x4f, 0x62, 0xe1, 0x70, 0x9c, 0xc1, 0x5c, 0x69, 0x30, 0xdd,
	0x02, 0xa7, 0xcd, 0x2e, 0xf2, 0xfc, 0xac, 0x4f, 0x9f, 0x2c, 0x70, 0x5a, 0x21, 0x00, 0xd6, 0xb1,
	0xbf, 0xfa, 0xeb, 0x3a, 0x58, 0x9f, 0x59, 0x67, 0xc8, 0x72, 0xa1, 0xa9, 0x3a, 0x74, 0xde, 0xc0,
	0x9a, 0xa2, 0x70, 0x4b, 0xe2, 0xca, 0x70, 0x24, 0x2d, 0x6b, 0x13, 0xab, 0x87, 0x26, 0xbf, 0xc9,
	0xb4, 0x85, 0x54, 0x3b, 0xb1, 0x7a, 0x9c, 0x19, 0x8e, 0x02, 0x5f, 0xb9, 0x86, 0xe5, 0x6a, 0xdc,
	0x2d, 0x71, 0x6d, 0x38, 0x92, 0xc0, 0xd9, 0xd4, 0xea, 0xa1, 0xa9, 0xba, 0xaa, 0xb9, 0x1a, 0x34,
	0x2d, 0xc3, 0x34, 0x6c, 0xb9, 0x0e, 0x15, 0xbd, 0x0a, 0x1d, 0x55, 0x53, 0xb8, 0xcf, 0x44, 0x71,
	0x38, 0x92, 0xb6, 0xb5, 0x6b, 0x57, 0x8f, 0x09, 0x8a, 0x5c, 0x71, 0x34, 0x45, 0x77, 0x18, 0xf1,
	0xb6, 0xf8, 0x60, 0x38, 0x92, 0xb6, 0xcc, 0xeb, 0x56, 0x0f, 0x72, 0x9e, 0x29, 0x77, 0xe5, 0xba,
	0x51, 0x39, 0xb5, 0xb9, 0x3b, 0xa2, 0x30, 0x1c, 0x49, 0x45, 0xed, 0x9a, 0xd5, 0x63, 0x86, 0x96,
	0xb9, 0x4c, 0xc9, 0x77, 0xc5, 0xd2, 0x70, 0x24, 0x89, 0xda, 0x8d, 0xab, 0x87, 0xa2, 0xcb, 0xe5,
	0xba, 0x02, 0x6b, 0x86, 0xa5, 0xa8, 0x2f, 0x74, 0x92, 0x33, 0x68, 0xca, 0x6f, 0x89, 0x19, 0x9b,
	0xfb, 0x5c, 0xdc, 0x1b, 0x8e, 0x24, 0x41, 0xb9, 0x61, 0xf5, 0xd0, 0x54, 0xbb, 0x72, 0x22, 0xeb,
	0x15, 0x05, 0x5a, 0xb2, 0x7e, 0x0a, 0xab, 0x4a, 0xc5, 0x52, 0x64, 0x5b, 0x81, 0xb2, 0x66, 0xb8,
	0xba, 0xc3, 0x2d, 0x8b, 0xfb, 0xc3, 0x91, 0xb4, 0xab, 0xdd, 0xbc, 0x7a, 0x90, 0x7a, 0xe5, 0x86,
	0xb8, 0x7b, 0x22, 0x37, 0x1c, 0x49, 0x2b, 0xda, 0xcc, 0xea, 0x31, 0xf6, 0x54, 0x31, 0xf4, 0x9a,
	0x5a, 0x55, 0x08, 0x16, 0x88, 0x3b, 0xc3, 0x91, 0xb4, 0xa9, 0x2d, 0x58, 0x3d, 0x2a, 0xa0, 0xa4,
	0x92, 0x8c, 0xa8, 0x67, 0xb3, 0xb1, 0x99, 0x8a, 0x55, 0x51, 0x74, 0x87, 0xbb, 0xcf, 0x82, 0x53,
	0x6f, 0x58, 0x25, 0x9e, 0x03, 0xd1, 0x34, 0x0c, 0x0b, 0xea, 0x8a, 0xf3, 0xda, 0xb0, 0x4e, 0x21,
	0x89, 0xb4, 0x4c, 0x8c, 0xd9, 0x8a, 0x5e, 0xe5, 0x56, 0x58, 0x3b, 0x98, 0x8b, 0x77, 0x84, 0x43,
	0xb0, 0x46, 0xea, 0x73, 0x26, 0xd7, 0xd5, 0xaa, 0xec, 0x18, 0x96, 0xcd, 0xad, 0x8a, 0x1b, 0xc3,
	0x91, 0xb4, 0xaa, 0x4d, 0xad, 0x21, 0x4f, 0xc0, 0xba, 0xab, 0xbf, 0x94, 0xd5, 0x3a, 0x35, 0x4e,
	0xbb, 0x65, 0x8d, 0xe1, 0xdc, 0xd9, 0x55, 0x22, 0xad, 0x95, 0x63, 0x9c, 0x2a, 0x3a, 0x7c, 0x7d,
	0xa2, 0x3a, 0x4a, 0x5d, 0xb5, 0x1d, 0x6e, 0x9d, 0x35, 0x89, 0x72, 0xcd, 0x2a, 0x31, 0xc5, 0x2a,
	0xd7, 0xe5, 0xca, 0x29, 0x65, 0x71, 0x73, 0xac, 0xa9, 0x55, 0x82, 0x84, 0x4e, 0x92, 0xec, 0xa8,
	0xce, 0x5b, 0x28, 0x9b, 0xa6, 0x65, 0x9c, 0xc9, 0x75, 0xe8, 0xa8, 0x26, 0xb7, 0x91, 0x5f, 0x82,
	0x6b, 0x56, 0x09, 0x57, 0x57, 0x5f, 0xb9, 0xca, 0x98, 0x7d, 0xaa, 0xbc, 0xb5, 0x39, 0x5e, 0xdc,
	0x1e, 0x8e, 0x24, 0xde, 0x5d, 0xb8, 0x4a, 0xb8, 0x65, 0x15, 0x9e, 0xc8, 0x56, 0xb5, 0x22, 0x9b,
	0xdc, 0x26, 0xbb, 0x92, 0xee, 0x78, 0x95, 0xf8, 0x12, 0x14, 0xc7, 0x49, 0xa4, 0x1d, 0x6a, 0x9f,
	0xc8, 0x96, 0xc2, 0x15, 0x99, 0xc9, 0xb3, 0xf9, 0xd5, 0xe0, 0x10, 0xac, 0xa9, 0x7a, 0xad, 0x2e,
	0x3b, 0xaa, 0xa1, 0x43, 0x4b, 0x76, 0x14, 0x6e, 0x8b, 0xa5, 0x54, 0x9d, 0x1d, 0xf5, 0x63, 0x98,
	0xa9, 0x58, 0xaa, 0x51, 0xe5, 0xb6, 0xc5, 0xcd, 0xe1, 0x48, 0x5a, 0x57, 0xe7, 0x47, 0xbd, 0xab,
	0xdb, 0x8e, 0x7c, 0xaa, 0xea, 0x2f, 0x32, 0xe8, 0x0e, 0x83, 0xba, 0xf3, 0xa3, 0x9e, 0x54, 0xb2,
	0xaa, 0xd4, 0x95, 0x17, 0xac, 0xee, 0x42, 0x5a, 0xf7, 0xd9, 0x51, 0x4f, 0x72, 0x9c, 0xc2, 0x68,
	0x04, 0xae, 0x7d, 0x62, 0xb8, 0x0e, 0xf7, 0x20, 0xbf, 0xf4, 0x0b, 0x47, 0xbd, 0x5d, 0x97, 0xed,
	0x93, 0x89, 0x30, 0x44, 0x91, 0x1f, 0x8e, 0xa4, 0x35, 0x7b, 0x7a, 0xd4, 0x7f, 0x0d, 0xb6, 0x48,
	0x14, 0xa4, 0xb1, 0x94, 0x6a, 0xd6, 0xf2, 0xf2, 0x0b, 0x85, 0xdb, 0x4d, 0xaf, 0xcc, 0x82, 0xd1,
	0xfd, 0x0d, 0xd8, 0x21, 0x9c, 0x49, 0x07, 0x19, 0x6b, 0x8f, 0x3d, 0x60, 0xda, 0x75, 0xa3, 0x98,
	0x1c, 0xa5, 0xe2, 0xda, 0x8e, 0x51, 0x7d, 0x0b, 0x2d, 0xe5, 0xb5, 0x6c, 0x55, 0xb9, 0x87, 0x62,
	0x71, 0x38, 0x92, 0x38, 0x6d, 0xc1, 0x28, 0x26, 0x5e, 0x32, 0x74, 0xd9, 0xad, 0xd5, 0x14, 0x0b,
	0xda, 0xea, 0xb7, 0x0a, 0x57, 0x4a, 0x4f, 0x7e, 0xcd, 0x28, 0x9e, 0xa4, 0x39, 0x6f, 0x18, 0x65,
	0x3f, 0xf5, 0xb2, 0x60, 0x14, 0xcb, 0x65, 0xdb, 0x21, 0x2d, 0x48, 0x7b, 0x60, 0xc1, 0xe3, 0x24,
	0x89, 0xd2, 0x70, 0x24, 0xed, 0xc9, 0xff, 0x67, 0x14, 0x13, 0xaf, 0x63, 0x53, 0xdc, 0xa3, 0xbc,
	0x98, 0xd3, 0xa3, 0x98, 0x66, 0xc0, 0xa8, 0xd7, 0x15, 0xf6, 0xe4, 0x94, 0x0d, 0xbd, 0xca, 0x1d,
	0x88, 0x5b, 0xc3, 0x91, 0xb4, 0xa1, 0x2d, 0x1a, 0xc5, 0x0b, 0xf0, 0x24, 0xe7, 0xf4, 0x01, 0x78,
	0xcc, 0x1e, 0x5e, 0xed, 0x86, 0x51, 0x4c, 0x73, 0x31, 0xa6, 0x1b, 0xae, 0x63, 0xba, 0x8e, 0xcd,
	0x7d, 0x31, 0xce, 0xe0, 0xa2, 0x51, 0x3c, 0xe3, 0xb4, 0x52, 0x97, 0x55, 0x2d, 0xeb, 0xa3, 0xc3,
	0x05, 0x4e, 0x27, 0x46, 0xb1, 0x78, 0xfb, 0x2f, 0xff, 0x28, 0x2d, 0x95, 0xff, 0xf8, 0xc3, 0x87,
	0x52, 0xe1, 0xc7, 0x0f, 0xa5, 0xc2, 0x7f, 0x3e, 0x94, 0x0a, 0x7f, 0xfb, 0x58, 0x5a, 0xfa, 0xf1,
	0x63, 0x69, 0xe9, 0x5f, 0x1f, 0x4b, 0x4b, 0xdf, 0x1e, 0x4e, 0xec, 0x73, 0xa7, 0x5e, 0x84, 0x2a,
	0x61, 0x84, 0x8f, 0x63, 0xdc, 0x41, 0xde, 0xf1, 0x80, 0x7e, 0x89, 0xa1, 0x2b, 0x5d, 0xe3, 0x2e,
	0xfd, 0xba, 0xf2, 0x9b, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x59, 0x96, 0x46, 0xa2, 0x11,
	0x00, 0x00,
}

func (this *NetworkPropertyValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPropertyValue)
	if !ok {
		that2, ok := that.(NetworkPropertyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.StrValue != that1.StrValue {
		return false
	}
	return true
}
func (m *MsgSetNetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkProperties != nil {
		{
			size, err := m.NetworkProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPropertyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPropertyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPropertyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrValue) > 0 {
		i -= len(m.StrValue)
		copy(dAtA[i:], m.StrValue)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.StrValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MinCollectiveClaimPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveClaimPeriod))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.MaxCollectiveOutputs != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCollectiveOutputs))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.MinCollectiveBondingTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveBondingTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.MinCollectiveBond != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveBond))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.MaxAbstention != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxAbstention))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.AbstentionRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.AbstentionRankDecreaseAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.MaxCustodyTxSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyTxSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.MaxCustodyBufferSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyBufferSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.MinCustodyReward != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCustodyReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	{
		size := m.MaxSlashingPercentage.Size()
		i -= size
		if _, err := m.MaxSlashingPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	{
		size := m.MaxJailedPercentage.Size()
		i -= size
		if _, err := m.MaxJailedPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if m.SlashingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.SlashingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.MinDelegationPushout != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinDelegationPushout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxDelegators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxDelegators))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.UnstakingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnstakingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.InflationPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.InflationPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size := m.InflationRate.Size()
		i -= size
		if _, err := m.InflationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.ValidatorsFeeShare.Size()
		i -= size
		if _, err := m.ValidatorsFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.UbiHardcap != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UbiHardcap))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.UniqueIdentityKeys) > 0 {
		i -= len(m.UniqueIdentityKeys)
		copy(dAtA[i:], m.UniqueIdentityKeys)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.UniqueIdentityKeys)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MinIdentityApprovalTip != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinIdentityApprovalTip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.EnableTokenBlacklist {
		i--
		if m.EnableTokenBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.EnableTokenWhitelist {
		i--
		if m.EnableTokenWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UnjailMaxTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnjailMaxTime))
		i--
		dAtA[i] = 0x78
	}
	if m.PoorNetworkMaxBankSend != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.PoorNetworkMaxBankSend))
		i--
		dAtA[i] = 0x70
	}
	if m.MinValidators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinValidators))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.InactiveRankDecreasePercent.Size()
		i -= size
		if _, err := m.InactiveRankDecreasePercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.MischanceConfidence != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceConfidence))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxMischance != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxMischance))
		i--
		dAtA[i] = 0x50
	}
	if m.MischanceRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceRankDecreaseAmount))
		i--
		dAtA[i] = 0x48
	}
	if m.EnableForeignFeePayments {
		i--
		if m.EnableForeignFeePayments {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.MinProposalEnactmentBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEnactmentBlocks))
		i--
		dAtA[i] = 0x38
	}
	if m.MinProposalEndBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEndBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.ProposalEnactmentTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.ProposalEnactmentTime))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumProposalEndTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinimumProposalEndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxTxFee))
		i--
		dAtA[i] = 0x10
	}
	if m.MinTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinTxFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkProperties(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkProperties(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetNetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkProperties != nil {
		l = m.NetworkProperties.Size()
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkPropertyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNetworkProperties(uint64(m.Value))
	}
	l = len(m.StrValue)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinTxFee))
	}
	if m.MaxTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxTxFee))
	}
	if m.VoteQuorum != 0 {
		n += 1 + sovNetworkProperties(uint64(m.VoteQuorum))
	}
	if m.MinimumProposalEndTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinimumProposalEndTime))
	}
	if m.ProposalEnactmentTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.ProposalEnactmentTime))
	}
	if m.MinProposalEndBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEndBlocks))
	}
	if m.MinProposalEnactmentBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEnactmentBlocks))
	}
	if m.EnableForeignFeePayments {
		n += 2
	}
	if m.MischanceRankDecreaseAmount != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceRankDecreaseAmount))
	}
	if m.MaxMischance != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxMischance))
	}
	if m.MischanceConfidence != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceConfidence))
	}
	l = m.InactiveRankDecreasePercent.Size()
	n += 1 + l + sovNetworkProperties(uint64(l))
	if m.MinValidators != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinValidators))
	}
	if m.PoorNetworkMaxBankSend != 0 {
		n += 1 + sovNetworkProperties(uint64(m.PoorNetworkMaxBankSend))
	}
	if m.UnjailMaxTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.UnjailMaxTime))
	}
	if m.EnableTokenWhitelist {
		n += 3
	}
	if m.EnableTokenBlacklist {
		n += 3
	}
	if m.MinIdentityApprovalTip != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinIdentityApprovalTip))
	}
	l = len(m.UniqueIdentityKeys)
	if l > 0 {
		n += 2 + l + sovNetworkProperties(uint64(l))
	}
	if m.UbiHardcap != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UbiHardcap))
	}
	l = m.ValidatorsFeeShare.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	l = m.InflationRate.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.InflationPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.InflationPeriod))
	}
	if m.UnstakingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UnstakingPeriod))
	}
	if m.MaxDelegators != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxDelegators))
	}
	if m.MinDelegationPushout != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinDelegationPushout))
	}
	if m.SlashingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.SlashingPeriod))
	}
	l = m.MaxJailedPercentage.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	l = m.MaxSlashingPercentage.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.MinCustodyReward != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCustodyReward))
	}
	if m.MaxCustodyBufferSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyBufferSize))
	}
	if m.MaxCustodyTxSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyTxSize))
	}
	if m.AbstentionRankDecreaseAmount != 0 {
		n += 2 + sovNetworkProperties(uint64(m.AbstentionRankDecreaseAmount))
	}
	if m.MaxAbstention != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxAbstention))
	}
	if m.MinCollectiveBond != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveBond))
	}
	if m.MinCollectiveBondingTime != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveBondingTime))
	}
	if m.MaxCollectiveOutputs != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCollectiveOutputs))
	}
	if m.MinCollectiveClaimPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveClaimPeriod))
	}
	return n
}

func sovNetworkProperties(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkProperties(x uint64) (n int) {
	return sovNetworkProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetNetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkProperties == nil {
				m.NetworkProperties = &NetworkProperties{}
			}
			if err := m.NetworkProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPropertyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPropertyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPropertyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTxFee", wireType)
			}
			m.MinTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxFee", wireType)
			}
			m.MaxTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProposalEndTime", wireType)
			}
			m.MinimumProposalEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProposalEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalEnactmentTime", wireType)
			}
			m.ProposalEnactmentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalEnactmentTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEndBlocks", wireType)
			}
			m.MinProposalEndBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEndBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEnactmentBlocks", wireType)
			}
			m.MinProposalEnactmentBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEnactmentBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForeignFeePayments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableForeignFeePayments = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceRankDecreaseAmount", wireType)
			}
			m.MischanceRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMischance", wireType)
			}
			m.MaxMischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMischance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceConfidence", wireType)
			}
			m.MischanceConfidence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceConfidence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveRankDecreasePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InactiveRankDecreasePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidators", wireType)
			}
			m.MinValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoorNetworkMaxBankSend", wireType)
			}
			m.PoorNetworkMaxBankSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoorNetworkMaxBankSend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailMaxTime", wireType)
			}
			m.UnjailMaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnjailMaxTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenWhitelist = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenBlacklist = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIdentityApprovalTip", wireType)
			}
			m.MinIdentityApprovalTip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIdentityApprovalTip |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIdentityKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueIdentityKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UbiHardcap", wireType)
			}
			m.UbiHardcap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UbiHardcap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationPeriod", wireType)
			}
			m.InflationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InflationPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingPeriod", wireType)
			}
			m.UnstakingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegators", wireType)
			}
			m.MaxDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelegationPushout", wireType)
			}
			m.MinDelegationPushout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDelegationPushout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingPeriod", wireType)
			}
			m.SlashingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxJailedPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxJailedPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlashingPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlashingPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCustodyReward", wireType)
			}
			m.MinCustodyReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCustodyReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyBufferSize", wireType)
			}
			m.MaxCustodyBufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCustodyBufferSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyTxSize", wireType)
			}
			m.MaxCustodyTxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCustodyTxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbstentionRankDecreaseAmount", wireType)
			}
			m.AbstentionRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbstentionRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAbstention", wireType)
			}
			m.MaxAbstention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAbstention |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveBond", wireType)
			}
			m.MinCollectiveBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveBondingTime", wireType)
			}
			m.MinCollectiveBondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveBondingTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCollectiveOutputs", wireType)
			}
			m.MaxCollectiveOutputs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCollectiveOutputs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveClaimPeriod", wireType)
			}
			m.MinCollectiveClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkProperties
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkProperties
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkProperties
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkProperties        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkProperties          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkProperties = fmt.Errorf("proto: unexpected end of group")
)
