// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/network_properties.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkProperty int32

const (
	MinTxFee                         NetworkProperty = 0
	MaxTxFee                         NetworkProperty = 1
	VoteQuorum                       NetworkProperty = 2
	MinimumProposalEndTime           NetworkProperty = 3
	ProposalEnactmentTime            NetworkProperty = 4
	MinProposalEndBlocks             NetworkProperty = 5
	MinProposalEnactmentBlocks       NetworkProperty = 6
	EnableForeignFeePayments         NetworkProperty = 7
	MischanceRankDecreaseAmount      NetworkProperty = 8
	MaxMischance                     NetworkProperty = 9
	MischanceConfidence              NetworkProperty = 10
	InactiveRankDecreasePercent      NetworkProperty = 11
	PoorNetworkMaxBankSend           NetworkProperty = 12
	MinValidators                    NetworkProperty = 13
	UnjailMaxTime                    NetworkProperty = 14
	EnableTokenWhitelist             NetworkProperty = 15
	EnableTokenBlacklist             NetworkProperty = 16
	MinIdentityApprovalTip           NetworkProperty = 17
	UniqueIdentityKeys               NetworkProperty = 18
	UbiHardcap                       NetworkProperty = 19
	ValidatorsFeeShare               NetworkProperty = 20
	InflationRate                    NetworkProperty = 21
	InflationPeriod                  NetworkProperty = 22
	UnstakingPeriod                  NetworkProperty = 23
	MaxDelegators                    NetworkProperty = 24
	MinDelegationPushout             NetworkProperty = 25
	SlashingPeriod                   NetworkProperty = 26
	MaxJailedPercentage              NetworkProperty = 27
	MaxSlashingPercentage            NetworkProperty = 28
	MinCustodyReward                 NetworkProperty = 29
	MaxCustodyBufferSize             NetworkProperty = 30
	MaxCustodyTxSize                 NetworkProperty = 31
	AbstentionRankDecreaseAmount     NetworkProperty = 32
	MaxAbstention                    NetworkProperty = 33
	MinCollectiveBond                NetworkProperty = 34
	MinCollectiveBondingTime         NetworkProperty = 35
	MaxCollectiveOutputs             NetworkProperty = 36
	MinCollectiveClaimPeriod         NetworkProperty = 37
	ValidatorRecoveryBond            NetworkProperty = 38
	MaxAnnualInflation               NetworkProperty = 39
	MaxProposalTitleSize             NetworkProperty = 40
	MaxProposalDescriptionSize       NetworkProperty = 41
	MaxProposalPollOptionSize        NetworkProperty = 42
	MaxProposalPollOptionCount       NetworkProperty = 43
	MaxProposalReferenceSize         NetworkProperty = 44
	MaxProposalChecksumSize          NetworkProperty = 45
	MinDappBond                      NetworkProperty = 46
	MaxDappBond                      NetworkProperty = 47
	DappLiquidationThreshold         NetworkProperty = 48
	DappLiquidationPeriod            NetworkProperty = 49
	DappBondDuration                 NetworkProperty = 50
	DappVerifierBond                 NetworkProperty = 51
	DappAutoDenounceTime             NetworkProperty = 52
	DappMischanceRankDecreaseAmount  NetworkProperty = 53
	DappMaxMischance                 NetworkProperty = 54
	DappInactiveRankDecreasePercent  NetworkProperty = 55
	DappPoolSlippageDefault          NetworkProperty = 56
	MintingFtFee                     NetworkProperty = 57
	MintingNftFee                    NetworkProperty = 58
	VetoThreshold                    NetworkProperty = 59
	AutocompoundIntervalNumBlocks    NetworkProperty = 60
	BridgeAddress                    NetworkProperty = 61
	BridgeCosmosEthereumExchangeRate NetworkProperty = 62
	BridgeEthereumCosmosExchangeRate NetworkProperty = 63
)

var NetworkProperty_name = map[int32]string{
	0:  "MIN_TX_FEE",
	1:  "MAX_TX_FEE",
	2:  "VOTE_QUORUM",
	3:  "MINIMUM_PROPOSAL_END_TIME",
	4:  "PROPOSAL_ENACTMENT_TIME",
	5:  "MIN_PROPOSAL_END_BLOCKS",
	6:  "MIN_PROPOSAL_ENACTMENT_BLOCKS",
	7:  "ENABLE_FOREIGN_FEE_PAYMENTS",
	8:  "MISCHANCE_RANK_DECREASE_AMOUNT",
	9:  "MAX_MISCHANCE",
	10: "MISCHANCE_CONFIDENCE",
	11: "INACTIVE_RANK_DECREASE_PERCENT",
	12: "POOR_NETWORK_MAX_BANK_SEND",
	13: "MIN_VALIDATORS",
	14: "UNJAIL_MAX_TIME",
	15: "ENABLE_TOKEN_WHITELIST",
	16: "ENABLE_TOKEN_BLACKLIST",
	17: "MIN_IDENTITY_APPROVAL_TIP",
	18: "UNIQUE_IDENTITY_KEYS",
	19: "UBI_HARDCAP",
	20: "VALIDATORS_FEE_SHARE",
	21: "INFLATION_RATE",
	22: "INFLATION_PERIOD",
	23: "UNSTAKING_PERIOD",
	24: "MAX_DELEGATORS",
	25: "MIN_DELEGATION_PUSHOUT",
	26: "SLASHING_PERIOD",
	27: "MAX_JAILED_PERCENTAGE",
	28: "MAX_SLASHING_PERCENTAGE",
	29: "MIN_CUSTODY_REWARD",
	30: "MAX_CUSTODY_BUFFER_SIZE",
	31: "MAX_CUSTODY_TX_SIZE",
	32: "ABSTENTION_RANK_DECREASE_AMOUNT",
	33: "MAX_ABSTENTION",
	34: "MIN_COLLECTIVE_BOND",
	35: "MIN_COLLECTIVE_BONDING_TIME",
	36: "MAX_COLLECTIVE_OUTPUTS",
	37: "MIN_COLLECTIVE_CLAIM_PERIOD",
	38: "VALIDATOR_RECOVERY_BOND",
	39: "MAX_ANNUAL_INFLATION",
	40: "MAX_PROPOSAL_TITLE_SIZE",
	41: "MAX_PROPOSAL_DESCRIPTION_SIZE",
	42: "MAX_PROPOSAL_POLL_OPTION_SIZE",
	43: "MAX_PROPOSAL_POLL_OPTION_COUNT",
	44: "MAX_PROPOSAL_REFERENCE_SIZE",
	45: "MAX_PROPOSAL_CHECKSUM_SIZE",
	46: "MIN_DAPP_BOND",
	47: "MAX_DAPP_BOND",
	48: "DAPP_LIQUIDATION_THRESHOLD",
	49: "DAPP_LIQUIDATION_PERIOD",
	50: "DAPP_BOND_DURATION",
	51: "DAPP_VERIFIER_BOND",
	52: "DAPP_AUTO_DENOUNCE_TIME",
	53: "DAPP_MISCHANCE_RANK_DECREASE_AMOUNT",
	54: "DAPP_MAX_MISCHANCE",
	55: "DAPP_INACTIVE_RANK_DECREASE_PERCENT",
	56: "DAPP_POOL_SLIPPAGE_DEFAULT",
	57: "MINTING_FT_FEE",
	58: "MINTING_NFT_FEE",
	59: "VETO_THRESHOLD",
	60: "AUTOCOMPOUND_INTERVAL_NUM_BLOCKS",
	61: "BRIDGE_ADDRESS",
	62: "BRIDGE_COSMOS_ETHEREUM_EXCHANGE_RATE",
	63: "BRIDGE_ETHEREUM_COSMOS_EXCHANGE_RATE",
}

var NetworkProperty_value = map[string]int32{
	"MIN_TX_FEE":                           0,
	"MAX_TX_FEE":                           1,
	"VOTE_QUORUM":                          2,
	"MINIMUM_PROPOSAL_END_TIME":            3,
	"PROPOSAL_ENACTMENT_TIME":              4,
	"MIN_PROPOSAL_END_BLOCKS":              5,
	"MIN_PROPOSAL_ENACTMENT_BLOCKS":        6,
	"ENABLE_FOREIGN_FEE_PAYMENTS":          7,
	"MISCHANCE_RANK_DECREASE_AMOUNT":       8,
	"MAX_MISCHANCE":                        9,
	"MISCHANCE_CONFIDENCE":                 10,
	"INACTIVE_RANK_DECREASE_PERCENT":       11,
	"POOR_NETWORK_MAX_BANK_SEND":           12,
	"MIN_VALIDATORS":                       13,
	"UNJAIL_MAX_TIME":                      14,
	"ENABLE_TOKEN_WHITELIST":               15,
	"ENABLE_TOKEN_BLACKLIST":               16,
	"MIN_IDENTITY_APPROVAL_TIP":            17,
	"UNIQUE_IDENTITY_KEYS":                 18,
	"UBI_HARDCAP":                          19,
	"VALIDATORS_FEE_SHARE":                 20,
	"INFLATION_RATE":                       21,
	"INFLATION_PERIOD":                     22,
	"UNSTAKING_PERIOD":                     23,
	"MAX_DELEGATORS":                       24,
	"MIN_DELEGATION_PUSHOUT":               25,
	"SLASHING_PERIOD":                      26,
	"MAX_JAILED_PERCENTAGE":                27,
	"MAX_SLASHING_PERCENTAGE":              28,
	"MIN_CUSTODY_REWARD":                   29,
	"MAX_CUSTODY_BUFFER_SIZE":              30,
	"MAX_CUSTODY_TX_SIZE":                  31,
	"ABSTENTION_RANK_DECREASE_AMOUNT":      32,
	"MAX_ABSTENTION":                       33,
	"MIN_COLLECTIVE_BOND":                  34,
	"MIN_COLLECTIVE_BONDING_TIME":          35,
	"MAX_COLLECTIVE_OUTPUTS":               36,
	"MIN_COLLECTIVE_CLAIM_PERIOD":          37,
	"VALIDATOR_RECOVERY_BOND":              38,
	"MAX_ANNUAL_INFLATION":                 39,
	"MAX_PROPOSAL_TITLE_SIZE":              40,
	"MAX_PROPOSAL_DESCRIPTION_SIZE":        41,
	"MAX_PROPOSAL_POLL_OPTION_SIZE":        42,
	"MAX_PROPOSAL_POLL_OPTION_COUNT":       43,
	"MAX_PROPOSAL_REFERENCE_SIZE":          44,
	"MAX_PROPOSAL_CHECKSUM_SIZE":           45,
	"MIN_DAPP_BOND":                        46,
	"MAX_DAPP_BOND":                        47,
	"DAPP_LIQUIDATION_THRESHOLD":           48,
	"DAPP_LIQUIDATION_PERIOD":              49,
	"DAPP_BOND_DURATION":                   50,
	"DAPP_VERIFIER_BOND":                   51,
	"DAPP_AUTO_DENOUNCE_TIME":              52,
	"DAPP_MISCHANCE_RANK_DECREASE_AMOUNT":  53,
	"DAPP_MAX_MISCHANCE":                   54,
	"DAPP_INACTIVE_RANK_DECREASE_PERCENT":  55,
	"DAPP_POOL_SLIPPAGE_DEFAULT":           56,
	"MINTING_FT_FEE":                       57,
	"MINTING_NFT_FEE":                      58,
	"VETO_THRESHOLD":                       59,
	"AUTOCOMPOUND_INTERVAL_NUM_BLOCKS":     60,
	"BRIDGE_ADDRESS":                       61,
	"BRIDGE_COSMOS_ETHEREUM_EXCHANGE_RATE": 62,
	"BRIDGE_ETHEREUM_COSMOS_EXCHANGE_RATE": 63,
}

func (x NetworkProperty) String() string {
	return proto.EnumName(NetworkProperty_name, int32(x))
}

func (NetworkProperty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}

type MsgSetNetworkProperties struct {
	NetworkProperties *NetworkProperties                            `protobuf:"bytes,1,opt,name=network_properties,json=networkProperties,proto3" json:"network_properties,omitempty"`
	Proposer          github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty"`
}

func (m *MsgSetNetworkProperties) Reset()         { *m = MsgSetNetworkProperties{} }
func (m *MsgSetNetworkProperties) String() string { return proto.CompactTextString(m) }
func (*MsgSetNetworkProperties) ProtoMessage()    {}
func (*MsgSetNetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}
func (m *MsgSetNetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNetworkProperties.Merge(m, src)
}
func (m *MsgSetNetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNetworkProperties proto.InternalMessageInfo

func (m *MsgSetNetworkProperties) GetNetworkProperties() *NetworkProperties {
	if m != nil {
		return m.NetworkProperties
	}
	return nil
}

func (m *MsgSetNetworkProperties) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type NetworkPropertyValue struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
}

func (m *NetworkPropertyValue) Reset()         { *m = NetworkPropertyValue{} }
func (m *NetworkPropertyValue) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertyValue) ProtoMessage()    {}
func (*NetworkPropertyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{1}
}
func (m *NetworkPropertyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPropertyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPropertyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPropertyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertyValue.Merge(m, src)
}
func (m *NetworkPropertyValue) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPropertyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertyValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertyValue proto.InternalMessageInfo

func (m *NetworkPropertyValue) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NetworkPropertyValue) GetStrValue() string {
	if m != nil {
		return m.StrValue
	}
	return ""
}

type NetworkProperties struct {
	MinTxFee                         uint64                                 `protobuf:"varint,1,opt,name=min_tx_fee,json=minTxFee,proto3" json:"min_tx_fee,omitempty"`
	MaxTxFee                         uint64                                 `protobuf:"varint,2,opt,name=max_tx_fee,json=maxTxFee,proto3" json:"max_tx_fee,omitempty"`
	VoteQuorum                       uint64                                 `protobuf:"varint,3,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	MinimumProposalEndTime           uint64                                 `protobuf:"varint,4,opt,name=minimum_proposal_end_time,json=minimumProposalEndTime,proto3" json:"minimum_proposal_end_time,omitempty"`
	ProposalEnactmentTime            uint64                                 `protobuf:"varint,5,opt,name=proposal_enactment_time,json=proposalEnactmentTime,proto3" json:"proposal_enactment_time,omitempty"`
	MinProposalEndBlocks             uint64                                 `protobuf:"varint,6,opt,name=min_proposal_end_blocks,json=minProposalEndBlocks,proto3" json:"min_proposal_end_blocks,omitempty"`
	MinProposalEnactmentBlocks       uint64                                 `protobuf:"varint,7,opt,name=min_proposal_enactment_blocks,json=minProposalEnactmentBlocks,proto3" json:"min_proposal_enactment_blocks,omitempty"`
	EnableForeignFeePayments         bool                                   `protobuf:"varint,8,opt,name=enable_foreign_fee_payments,json=enableForeignFeePayments,proto3" json:"enable_foreign_fee_payments,omitempty"`
	MischanceRankDecreaseAmount      uint64                                 `protobuf:"varint,9,opt,name=mischance_rank_decrease_amount,json=mischanceRankDecreaseAmount,proto3" json:"mischance_rank_decrease_amount,omitempty"`
	MaxMischance                     uint64                                 `protobuf:"varint,10,opt,name=max_mischance,json=maxMischance,proto3" json:"max_mischance,omitempty"`
	MischanceConfidence              uint64                                 `protobuf:"varint,11,opt,name=mischance_confidence,json=mischanceConfidence,proto3" json:"mischance_confidence,omitempty"`
	InactiveRankDecreasePercent      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=inactive_rank_decrease_percent,json=inactiveRankDecreasePercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inactive_rank_decrease_percent"`
	MinValidators                    uint64                                 `protobuf:"varint,13,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
	PoorNetworkMaxBankSend           uint64                                 `protobuf:"varint,14,opt,name=poor_network_max_bank_send,json=poorNetworkMaxBankSend,proto3" json:"poor_network_max_bank_send,omitempty"`
	UnjailMaxTime                    uint64                                 `protobuf:"varint,15,opt,name=unjail_max_time,json=unjailMaxTime,proto3" json:"unjail_max_time,omitempty"`
	EnableTokenWhitelist             bool                                   `protobuf:"varint,16,opt,name=enable_token_whitelist,json=enableTokenWhitelist,proto3" json:"enable_token_whitelist,omitempty"`
	EnableTokenBlacklist             bool                                   `protobuf:"varint,17,opt,name=enable_token_blacklist,json=enableTokenBlacklist,proto3" json:"enable_token_blacklist,omitempty"`
	MinIdentityApprovalTip           uint64                                 `protobuf:"varint,18,opt,name=min_identity_approval_tip,json=minIdentityApprovalTip,proto3" json:"min_identity_approval_tip,omitempty"`
	UniqueIdentityKeys               string                                 `protobuf:"bytes,19,opt,name=unique_identity_keys,json=uniqueIdentityKeys,proto3" json:"unique_identity_keys,omitempty"`
	UbiHardcap                       uint64                                 `protobuf:"varint,20,opt,name=ubi_hardcap,json=ubiHardcap,proto3" json:"ubi_hardcap,omitempty"`
	ValidatorsFeeShare               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,21,opt,name=validators_fee_share,json=validatorsFeeShare,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validators_fee_share"`
	InflationRate                    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,22,opt,name=inflation_rate,json=inflationRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"inflation_rate"`
	InflationPeriod                  uint64                                 `protobuf:"varint,23,opt,name=inflation_period,json=inflationPeriod,proto3" json:"inflation_period,omitempty"`
	UnstakingPeriod                  uint64                                 `protobuf:"varint,24,opt,name=unstaking_period,json=unstakingPeriod,proto3" json:"unstaking_period,omitempty"`
	MaxDelegators                    uint64                                 `protobuf:"varint,25,opt,name=max_delegators,json=maxDelegators,proto3" json:"max_delegators,omitempty"`
	MinDelegationPushout             uint64                                 `protobuf:"varint,26,opt,name=min_delegation_pushout,json=minDelegationPushout,proto3" json:"min_delegation_pushout,omitempty"`
	SlashingPeriod                   uint64                                 `protobuf:"varint,27,opt,name=slashing_period,json=slashingPeriod,proto3" json:"slashing_period,omitempty"`
	MaxJailedPercentage              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,28,opt,name=max_jailed_percentage,json=maxJailedPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_jailed_percentage"`
	MaxSlashingPercentage            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,29,opt,name=max_slashing_percentage,json=maxSlashingPercentage,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_slashing_percentage"`
	MinCustodyReward                 uint64                                 `protobuf:"varint,30,opt,name=min_custody_reward,json=minCustodyReward,proto3" json:"min_custody_reward,omitempty"`
	MaxCustodyBufferSize             uint64                                 `protobuf:"varint,31,opt,name=max_custody_buffer_size,json=maxCustodyBufferSize,proto3" json:"max_custody_buffer_size,omitempty"`
	MaxCustodyTxSize                 uint64                                 `protobuf:"varint,32,opt,name=max_custody_tx_size,json=maxCustodyTxSize,proto3" json:"max_custody_tx_size,omitempty"`
	AbstentionRankDecreaseAmount     uint64                                 `protobuf:"varint,33,opt,name=abstention_rank_decrease_amount,json=abstentionRankDecreaseAmount,proto3" json:"abstention_rank_decrease_amount,omitempty"`
	MaxAbstention                    uint64                                 `protobuf:"varint,34,opt,name=max_abstention,json=maxAbstention,proto3" json:"max_abstention,omitempty"`
	MinCollectiveBond                uint64                                 `protobuf:"varint,35,opt,name=min_collective_bond,json=minCollectiveBond,proto3" json:"min_collective_bond,omitempty"`
	MinCollectiveBondingTime         uint64                                 `protobuf:"varint,36,opt,name=min_collective_bonding_time,json=minCollectiveBondingTime,proto3" json:"min_collective_bonding_time,omitempty"`
	MaxCollectiveOutputs             uint64                                 `protobuf:"varint,37,opt,name=max_collective_outputs,json=maxCollectiveOutputs,proto3" json:"max_collective_outputs,omitempty"`
	MinCollectiveClaimPeriod         uint64                                 `protobuf:"varint,38,opt,name=min_collective_claim_period,json=minCollectiveClaimPeriod,proto3" json:"min_collective_claim_period,omitempty"`
	ValidatorRecoveryBond            uint64                                 `protobuf:"varint,39,opt,name=validator_recovery_bond,json=validatorRecoveryBond,proto3" json:"validator_recovery_bond,omitempty"`
	MaxAnnualInflation               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,40,opt,name=max_annual_inflation,json=maxAnnualInflation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_annual_inflation"`
	MaxProposalTitleSize             uint64                                 `protobuf:"varint,41,opt,name=max_proposal_title_size,json=maxProposalTitleSize,proto3" json:"max_proposal_title_size,omitempty"`
	MaxProposalDescriptionSize       uint64                                 `protobuf:"varint,42,opt,name=max_proposal_description_size,json=maxProposalDescriptionSize,proto3" json:"max_proposal_description_size,omitempty"`
	MaxProposalPollOptionSize        uint64                                 `protobuf:"varint,43,opt,name=max_proposal_poll_option_size,json=maxProposalPollOptionSize,proto3" json:"max_proposal_poll_option_size,omitempty"`
	MaxProposalPollOptionCount       uint64                                 `protobuf:"varint,44,opt,name=max_proposal_poll_option_count,json=maxProposalPollOptionCount,proto3" json:"max_proposal_poll_option_count,omitempty"`
	MaxProposalReferenceSize         uint64                                 `protobuf:"varint,45,opt,name=max_proposal_reference_size,json=maxProposalReferenceSize,proto3" json:"max_proposal_reference_size,omitempty"`
	MaxProposalChecksumSize          uint64                                 `protobuf:"varint,46,opt,name=max_proposal_checksum_size,json=maxProposalChecksumSize,proto3" json:"max_proposal_checksum_size,omitempty"`
	MinDappBond                      uint64                                 `protobuf:"varint,47,opt,name=min_dapp_bond,json=minDappBond,proto3" json:"min_dapp_bond,omitempty"`
	MaxDappBond                      uint64                                 `protobuf:"varint,48,opt,name=max_dapp_bond,json=maxDappBond,proto3" json:"max_dapp_bond,omitempty"`
	DappLiquidationThreshold         uint64                                 `protobuf:"varint,49,opt,name=dapp_liquidation_threshold,json=dappLiquidationThreshold,proto3" json:"dapp_liquidation_threshold,omitempty"`
	DappLiquidationPeriod            uint64                                 `protobuf:"varint,50,opt,name=dapp_liquidation_period,json=dappLiquidationPeriod,proto3" json:"dapp_liquidation_period,omitempty"`
	DappBondDuration                 uint64                                 `protobuf:"varint,51,opt,name=dapp_bond_duration,json=dappBondDuration,proto3" json:"dapp_bond_duration,omitempty"`
	DappVerifierBond                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,52,opt,name=dapp_verifier_bond,json=dappVerifierBond,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dapp_verifier_bond"`
	DappAutoDenounceTime             uint64                                 `protobuf:"varint,53,opt,name=dapp_auto_denounce_time,json=dappAutoDenounceTime,proto3" json:"dapp_auto_denounce_time,omitempty"`
	DappMischanceRankDecreaseAmount  uint64                                 `protobuf:"varint,54,opt,name=dapp_mischance_rank_decrease_amount,json=dappMischanceRankDecreaseAmount,proto3" json:"dapp_mischance_rank_decrease_amount,omitempty"`
	DappMaxMischance                 uint64                                 `protobuf:"varint,55,opt,name=dapp_max_mischance,json=dappMaxMischance,proto3" json:"dapp_max_mischance,omitempty"`
	DappInactiveRankDecreasePercent  uint64                                 `protobuf:"varint,56,opt,name=dapp_inactive_rank_decrease_percent,json=dappInactiveRankDecreasePercent,proto3" json:"dapp_inactive_rank_decrease_percent,omitempty"`
	DappPoolSlippageDefault          github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,57,opt,name=dapp_pool_slippage_default,json=dappPoolSlippageDefault,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"dapp_pool_slippage_default"`
	MintingFtFee                     uint64                                 `protobuf:"varint,58,opt,name=minting_ft_fee,json=mintingFtFee,proto3" json:"minting_ft_fee,omitempty"`
	MintingNftFee                    uint64                                 `protobuf:"varint,59,opt,name=minting_nft_fee,json=mintingNftFee,proto3" json:"minting_nft_fee,omitempty"`
	VetoThreshold                    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,60,opt,name=veto_threshold,json=vetoThreshold,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"veto_threshold"`
	AutocompoundIntervalNumBlocks    uint64                                 `protobuf:"varint,61,opt,name=autocompound_interval_num_blocks,json=autocompoundIntervalNumBlocks,proto3" json:"autocompound_interval_num_blocks,omitempty"`
	BridgeAddress                    string                                 `protobuf:"bytes,62,opt,name=bridge_address,json=bridgeAddress,proto3" json:"bridge_address,omitempty"`
	BridgeCosmosEthereumExchangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,63,opt,name=bridge_cosmos_ethereum_exchange_rate,json=bridgeCosmosEthereumExchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bridge_cosmos_ethereum_exchange_rate"`
	BridgeEthereumCosmosExchangeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,64,opt,name=bridge_ethereum_cosmos_exchange_rate,json=bridgeEthereumCosmosExchangeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bridge_ethereum_cosmos_exchange_rate"`
}

func (m *NetworkProperties) Reset()         { *m = NetworkProperties{} }
func (m *NetworkProperties) String() string { return proto.CompactTextString(m) }
func (*NetworkProperties) ProtoMessage()    {}
func (*NetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{2}
}
func (m *NetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProperties.Merge(m, src)
}
func (m *NetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *NetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProperties proto.InternalMessageInfo

func (m *NetworkProperties) GetMinTxFee() uint64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *NetworkProperties) GetMaxTxFee() uint64 {
	if m != nil {
		return m.MaxTxFee
	}
	return 0
}

func (m *NetworkProperties) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *NetworkProperties) GetMinimumProposalEndTime() uint64 {
	if m != nil {
		return m.MinimumProposalEndTime
	}
	return 0
}

func (m *NetworkProperties) GetProposalEnactmentTime() uint64 {
	if m != nil {
		return m.ProposalEnactmentTime
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEndBlocks() uint64 {
	if m != nil {
		return m.MinProposalEndBlocks
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEnactmentBlocks() uint64 {
	if m != nil {
		return m.MinProposalEnactmentBlocks
	}
	return 0
}

func (m *NetworkProperties) GetEnableForeignFeePayments() bool {
	if m != nil {
		return m.EnableForeignFeePayments
	}
	return false
}

func (m *NetworkProperties) GetMischanceRankDecreaseAmount() uint64 {
	if m != nil {
		return m.MischanceRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxMischance() uint64 {
	if m != nil {
		return m.MaxMischance
	}
	return 0
}

func (m *NetworkProperties) GetMischanceConfidence() uint64 {
	if m != nil {
		return m.MischanceConfidence
	}
	return 0
}

func (m *NetworkProperties) GetMinValidators() uint64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

func (m *NetworkProperties) GetPoorNetworkMaxBankSend() uint64 {
	if m != nil {
		return m.PoorNetworkMaxBankSend
	}
	return 0
}

func (m *NetworkProperties) GetUnjailMaxTime() uint64 {
	if m != nil {
		return m.UnjailMaxTime
	}
	return 0
}

func (m *NetworkProperties) GetEnableTokenWhitelist() bool {
	if m != nil {
		return m.EnableTokenWhitelist
	}
	return false
}

func (m *NetworkProperties) GetEnableTokenBlacklist() bool {
	if m != nil {
		return m.EnableTokenBlacklist
	}
	return false
}

func (m *NetworkProperties) GetMinIdentityApprovalTip() uint64 {
	if m != nil {
		return m.MinIdentityApprovalTip
	}
	return 0
}

func (m *NetworkProperties) GetUniqueIdentityKeys() string {
	if m != nil {
		return m.UniqueIdentityKeys
	}
	return ""
}

func (m *NetworkProperties) GetUbiHardcap() uint64 {
	if m != nil {
		return m.UbiHardcap
	}
	return 0
}

func (m *NetworkProperties) GetInflationPeriod() uint64 {
	if m != nil {
		return m.InflationPeriod
	}
	return 0
}

func (m *NetworkProperties) GetUnstakingPeriod() uint64 {
	if m != nil {
		return m.UnstakingPeriod
	}
	return 0
}

func (m *NetworkProperties) GetMaxDelegators() uint64 {
	if m != nil {
		return m.MaxDelegators
	}
	return 0
}

func (m *NetworkProperties) GetMinDelegationPushout() uint64 {
	if m != nil {
		return m.MinDelegationPushout
	}
	return 0
}

func (m *NetworkProperties) GetSlashingPeriod() uint64 {
	if m != nil {
		return m.SlashingPeriod
	}
	return 0
}

func (m *NetworkProperties) GetMinCustodyReward() uint64 {
	if m != nil {
		return m.MinCustodyReward
	}
	return 0
}

func (m *NetworkProperties) GetMaxCustodyBufferSize() uint64 {
	if m != nil {
		return m.MaxCustodyBufferSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxCustodyTxSize() uint64 {
	if m != nil {
		return m.MaxCustodyTxSize
	}
	return 0
}

func (m *NetworkProperties) GetAbstentionRankDecreaseAmount() uint64 {
	if m != nil {
		return m.AbstentionRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxAbstention() uint64 {
	if m != nil {
		return m.MaxAbstention
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveBond() uint64 {
	if m != nil {
		return m.MinCollectiveBond
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveBondingTime() uint64 {
	if m != nil {
		return m.MinCollectiveBondingTime
	}
	return 0
}

func (m *NetworkProperties) GetMaxCollectiveOutputs() uint64 {
	if m != nil {
		return m.MaxCollectiveOutputs
	}
	return 0
}

func (m *NetworkProperties) GetMinCollectiveClaimPeriod() uint64 {
	if m != nil {
		return m.MinCollectiveClaimPeriod
	}
	return 0
}

func (m *NetworkProperties) GetValidatorRecoveryBond() uint64 {
	if m != nil {
		return m.ValidatorRecoveryBond
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalTitleSize() uint64 {
	if m != nil {
		return m.MaxProposalTitleSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalDescriptionSize() uint64 {
	if m != nil {
		return m.MaxProposalDescriptionSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalPollOptionSize() uint64 {
	if m != nil {
		return m.MaxProposalPollOptionSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalPollOptionCount() uint64 {
	if m != nil {
		return m.MaxProposalPollOptionCount
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalReferenceSize() uint64 {
	if m != nil {
		return m.MaxProposalReferenceSize
	}
	return 0
}

func (m *NetworkProperties) GetMaxProposalChecksumSize() uint64 {
	if m != nil {
		return m.MaxProposalChecksumSize
	}
	return 0
}

func (m *NetworkProperties) GetMinDappBond() uint64 {
	if m != nil {
		return m.MinDappBond
	}
	return 0
}

func (m *NetworkProperties) GetMaxDappBond() uint64 {
	if m != nil {
		return m.MaxDappBond
	}
	return 0
}

func (m *NetworkProperties) GetDappLiquidationThreshold() uint64 {
	if m != nil {
		return m.DappLiquidationThreshold
	}
	return 0
}

func (m *NetworkProperties) GetDappLiquidationPeriod() uint64 {
	if m != nil {
		return m.DappLiquidationPeriod
	}
	return 0
}

func (m *NetworkProperties) GetDappBondDuration() uint64 {
	if m != nil {
		return m.DappBondDuration
	}
	return 0
}

func (m *NetworkProperties) GetDappAutoDenounceTime() uint64 {
	if m != nil {
		return m.DappAutoDenounceTime
	}
	return 0
}

func (m *NetworkProperties) GetDappMischanceRankDecreaseAmount() uint64 {
	if m != nil {
		return m.DappMischanceRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetDappMaxMischance() uint64 {
	if m != nil {
		return m.DappMaxMischance
	}
	return 0
}

func (m *NetworkProperties) GetDappInactiveRankDecreasePercent() uint64 {
	if m != nil {
		return m.DappInactiveRankDecreasePercent
	}
	return 0
}

func (m *NetworkProperties) GetMintingFtFee() uint64 {
	if m != nil {
		return m.MintingFtFee
	}
	return 0
}

func (m *NetworkProperties) GetMintingNftFee() uint64 {
	if m != nil {
		return m.MintingNftFee
	}
	return 0
}

func (m *NetworkProperties) GetAutocompoundIntervalNumBlocks() uint64 {
	if m != nil {
		return m.AutocompoundIntervalNumBlocks
	}
	return 0
}

func (m *NetworkProperties) GetBridgeAddress() string {
	if m != nil {
		return m.BridgeAddress
	}
	return ""
}

func init() {
	proto.RegisterEnum("kira.gov.NetworkProperty", NetworkProperty_name, NetworkProperty_value)
	proto.RegisterType((*MsgSetNetworkProperties)(nil), "kira.gov.MsgSetNetworkProperties")
	proto.RegisterType((*NetworkPropertyValue)(nil), "kira.gov.NetworkPropertyValue")
	proto.RegisterType((*NetworkProperties)(nil), "kira.gov.NetworkProperties")
}

func init() { proto.RegisterFile("kira/gov/network_properties.proto", fileDescriptor_98011a6048e5dde3) }

var fileDescriptor_98011a6048e5dde3 = []byte{
	// 2971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x4b, 0x6f, 0xdc, 0xc6,
	0x96, 0xb6, 0x12, 0x27, 0x91, 0xcb, 0x96, 0x44, 0x53, 0xb2, 0x45, 0x53, 0xb6, 0x44, 0x3f, 0xe4,
	0x38, 0x89, 0x2d, 0xd9, 0x4e, 0xec, 0x24, 0x76, 0x5e, 0xec, 0x66, 0x49, 0x62, 0xd4, 0x24, 0xdb,
	0x7c, 0xc8, 0x76, 0x30, 0x40, 0x85, 0xea, 0x2e, 0x49, 0x1c, 0x75, 0x93, 0x1d, 0x3e, 0x94, 0x56,
	0x16, 0xb3, 0x1e, 0xf4, 0x6a, 0xfe, 0x40, 0x03, 0x03, 0xcc, 0x5f, 0x98, 0x1f, 0x91, 0x65, 0x66,
	0x37, 0x18, 0x60, 0x82, 0x8b, 0x64, 0x73, 0x7f, 0xc3, 0x5d, 0x5d, 0xd4, 0x83, 0x64, 0xbf, 0x24,
	0x5d, 0xe8, 0xae, 0x2c, 0xd7, 0xf9, 0xbe, 0x73, 0x4e, 0x9d, 0x3a, 0x55, 0x3c, 0x1f, 0x1a, 0xdc,
	0x3e, 0x0c, 0x62, 0x7f, 0x7d, 0x3f, 0x3a, 0x5a, 0x0f, 0x71, 0xfa, 0x73, 0x14, 0x1f, 0xa2, 0x4e,
	0x1c, 0x75, 0x70, 0x9c, 0x06, 0x38, 0x59, 0xeb, 0xc4, 0x51, 0x1a, 0x89, 0xd3, 0x04, 0xb2, 0xb6,
	0x1f, 0x1d, 0xc9, 0x0b, 0xfb, 0xd1, 0x7e, 0x44, 0x17, 0xd7, 0xc9, 0x5f, 0xcc, 0x7e, 0xe7, 0xbf,
	0xa7, 0xc0, 0xa2, 0x91, 0xec, 0x3b, 0x38, 0x35, 0x99, 0x8b, 0x7a, 0xe1, 0x41, 0xfc, 0x1e, 0x88,
	0xe3, 0x7e, 0xa5, 0x29, 0x65, 0xea, 0xc1, 0xe5, 0xa7, 0x4b, 0x6b, 0xb9, 0xe3, 0xb5, 0x31, 0xa2,
	0x7d, 0x35, 0x1c, 0xf3, 0x65, 0x80, 0x69, 0xe2, 0x23, 0x4a, 0x70, 0x2c, 0xbd, 0xa3, 0x4c, 0x3d,
	0xb8, 0x52, 0x79, 0xf2, 0xb7, 0xdf, 0x57, 0x1e, 0xed, 0x07, 0xe9, 0x41, 0xb6, 0xbb, 0xd6, 0x88,
	0xda, 0xeb, 0x8d, 0x28, 0x69, 0x47, 0x09, 0xff, 0xe7, 0x51, 0xd2, 0x3c, 0x5c, 0x4f, 0x8f, 0x3b,
	0x38, 0x59, 0x53, 0x1b, 0x0d, 0xb5, 0xd9, 0x8c, 0x71, 0x92, 0xd8, 0x85, 0x8b, 0x3b, 0x16, 0x58,
	0x18, 0x0e, 0x7b, 0xbc, 0xe3, 0xb7, 0x32, 0x2c, 0x2e, 0x80, 0xf7, 0x8e, 0xc8, 0x1f, 0x34, 0xcb,
	0x8b, 0x36, 0xfb, 0x8f, 0xb8, 0x04, 0x2e, 0x25, 0x69, 0x8c, 0x98, 0x85, 0x44, 0xbf, 0x64, 0x4f,
	0x27, 0x69, 0x4c, 0x29, 0x2f, 0x2e, 0xfe, 0xf5, 0x3f, 0x57, 0xa6, 0xee, 0xfc, 0xff, 0x32, 0xb8,
	0x3a, 0x5e, 0x81, 0x9b, 0x00, 0xb4, 0x83, 0x10, 0xa5, 0x5d, 0xb4, 0x87, 0x73, 0x9f, 0xd3, 0xed,
	0x20, 0x74, 0xbb, 0x1b, 0x18, 0x53, 0xab, 0xdf, 0xcd, 0xad, 0xef, 0x70, 0xab, 0xdf, 0x65, 0xd6,
	0x15, 0x70, 0xf9, 0x28, 0x4a, 0x31, 0xfa, 0x29, 0x8b, 0xe2, 0xac, 0x2d, 0xbd, 0x4b, 0xcd, 0x80,
	0x2c, 0xbd, 0xa2, 0x2b, 0xe2, 0x97, 0xe0, 0x46, 0x3b, 0x08, 0x83, 0x76, 0xd6, 0x46, 0x6c, 0x5f,
	0x7e, 0x0b, 0xe1, 0xb0, 0x89, 0xd2, 0xa0, 0x8d, 0xa5, 0x8b, 0x14, 0x7e, 0x9d, 0x03, 0xea, 0xdc,
	0x0e, 0xc3, 0xa6, 0x1b, 0xb4, 0xb1, 0xf8, 0x1c, 0x2c, 0x0e, 0x50, 0xfc, 0x46, 0xda, 0xc6, 0x61,
	0xca, 0x88, 0xef, 0x51, 0xe2, 0xb5, 0x4e, 0xc1, 0xe0, 0x56, 0xca, 0x7b, 0x06, 0x16, 0xc9, 0x7e,
	0x86, 0xc2, 0xed, 0xb6, 0xa2, 0xc6, 0x61, 0x22, 0xbd, 0x4f, 0x79, 0x0b, 0xed, 0x20, 0x1c, 0x08,
	0x56, 0xa1, 0x36, 0x51, 0x05, 0xb7, 0x46, 0x68, 0x79, 0x48, 0x4e, 0xfe, 0x80, 0x92, 0xe5, 0x21,
	0x32, 0x87, 0x70, 0x17, 0x5f, 0x83, 0x25, 0x1c, 0xfa, 0xbb, 0x2d, 0x8c, 0xf6, 0xa2, 0x18, 0x07,
	0xfb, 0x21, 0xa9, 0x19, 0xea, 0xf8, 0xc7, 0x04, 0x93, 0x48, 0xd3, 0xca, 0xd4, 0x83, 0x69, 0x5b,
	0x62, 0x90, 0x0d, 0x86, 0xd8, 0xc0, 0xb8, 0xce, 0xed, 0x62, 0x15, 0x2c, 0xb7, 0x83, 0xa4, 0x71,
	0xe0, 0x87, 0x0d, 0x8c, 0x62, 0x3f, 0x3c, 0x44, 0x4d, 0xdc, 0x88, 0xb1, 0x9f, 0x60, 0xe4, 0xb7,
	0xa3, 0x2c, 0x4c, 0xa5, 0x4b, 0x34, 0x85, 0xa5, 0x02, 0x65, 0xfb, 0xe1, 0xa1, 0xc6, 0x31, 0x2a,
	0x85, 0x88, 0x77, 0xc1, 0x0c, 0x39, 0xaf, 0x02, 0x22, 0x01, 0xca, 0xb9, 0xd2, 0xf6, 0xbb, 0x46,
	0xbe, 0x26, 0x3e, 0x01, 0x0b, 0x65, 0xa4, 0x46, 0x14, 0xee, 0x05, 0x4d, 0x4c, 0xb0, 0x97, 0x29,
	0x76, 0xbe, 0xb0, 0x55, 0x0b, 0x93, 0x98, 0x80, 0xe5, 0x80, 0x6c, 0x37, 0x38, 0x1a, 0xcd, 0xad,
	0x83, 0xe3, 0x06, 0x0e, 0x53, 0xe9, 0x0a, 0xe9, 0xb9, 0xca, 0xda, 0xaf, 0xbf, 0xaf, 0x5c, 0xf8,
	0xbf, 0xdf, 0x57, 0xee, 0xff, 0x03, 0x5d, 0xaf, 0xe1, 0x86, 0xbd, 0x94, 0x7b, 0x1d, 0xdc, 0x4b,
	0x9d, 0xb9, 0x14, 0x57, 0xc1, 0x2c, 0x39, 0x93, 0x23, 0xbf, 0x15, 0x34, 0xfd, 0x34, 0x8a, 0x13,
	0x69, 0x86, 0x66, 0x38, 0xd3, 0x0e, 0xc2, 0x9d, 0x62, 0x51, 0x7c, 0x01, 0xe4, 0x4e, 0x14, 0xc5,
	0x28, 0xbf, 0xc8, 0xa4, 0x00, 0xbb, 0x24, 0xc7, 0x04, 0x87, 0x4d, 0x69, 0x96, 0x75, 0x19, 0x41,
	0xf0, 0xe6, 0x37, 0xfc, 0x6e, 0xc5, 0x0f, 0x0f, 0x1d, 0x1c, 0x36, 0xc5, 0xfb, 0x60, 0x2e, 0x0b,
	0xff, 0xd5, 0x0f, 0x5a, 0x94, 0x45, 0xbb, 0x6b, 0x8e, 0xc5, 0x60, 0xcb, 0x86, 0xdf, 0xa5, 0x5d,
	0xf5, 0x19, 0xb8, 0xce, 0xcf, 0x36, 0x8d, 0x0e, 0x71, 0x88, 0x7e, 0x3e, 0x08, 0x52, 0xdc, 0x0a,
	0x92, 0x54, 0x12, 0xe8, 0xb1, 0x2e, 0x30, 0xab, 0x4b, 0x8c, 0xaf, 0x73, 0xdb, 0x18, 0x6b, 0xb7,
	0xe5, 0x37, 0x0e, 0x29, 0xeb, 0xea, 0x18, 0xab, 0x92, 0xdb, 0xf8, 0xa5, 0x41, 0xa4, 0xf2, 0x69,
	0x90, 0x1e, 0x23, 0xbf, 0xd3, 0x89, 0xa3, 0x23, 0xbf, 0x85, 0xd2, 0xa0, 0x23, 0x89, 0xc5, 0xa5,
	0xd1, 0xb9, 0x5d, 0xe5, 0x66, 0x37, 0xe8, 0x88, 0x8f, 0xc1, 0x42, 0x16, 0x06, 0x3f, 0x65, 0xb8,
	0x64, 0x1f, 0xe2, 0xe3, 0x44, 0x9a, 0xa7, 0x0f, 0x82, 0xc8, 0x6c, 0x39, 0x71, 0x1b, 0x1f, 0x27,
	0xe4, 0x0a, 0x67, 0xbb, 0x01, 0x3a, 0xf0, 0xe3, 0x66, 0xc3, 0xef, 0x48, 0x0b, 0xec, 0x0a, 0x67,
	0xbb, 0xc1, 0x16, 0x5b, 0x11, 0x7f, 0x04, 0x0b, 0xe5, 0x01, 0xd0, 0x8e, 0x4e, 0x0e, 0xfc, 0x18,
	0x4b, 0xd7, 0xce, 0x75, 0xde, 0x62, 0xe9, 0x6b, 0x03, 0x63, 0x87, 0x78, 0x12, 0x3d, 0x30, 0x1b,
	0x84, 0x7b, 0x2d, 0x3f, 0x0d, 0xa2, 0x10, 0xc5, 0x7e, 0x8a, 0xa5, 0xeb, 0xe7, 0xf2, 0x3d, 0x53,
	0x78, 0xb1, 0xfd, 0x14, 0x8b, 0x1f, 0x01, 0xa1, 0x74, 0xdb, 0xc1, 0x71, 0x10, 0x35, 0xa5, 0x45,
	0xba, 0xbd, 0xb9, 0x62, 0xbd, 0x4e, 0x97, 0x09, 0x34, 0x0b, 0x93, 0xd4, 0x3f, 0x0c, 0xc2, 0xfd,
	0x1c, 0x2a, 0x31, 0x68, 0xb1, 0xce, 0xa1, 0xa4, 0x27, 0xfd, 0x2e, 0x6a, 0xe2, 0x16, 0xde, 0x67,
	0x3d, 0x79, 0x83, 0xf7, 0xa4, 0xdf, 0xd5, 0x8a, 0x45, 0x72, 0xf2, 0xe4, 0x0c, 0x39, 0x8c, 0x66,
	0x90, 0x25, 0x07, 0x51, 0x96, 0x4a, 0x72, 0xf1, 0x08, 0x69, 0x85, 0xb1, 0xce, 0x6c, 0xe2, 0x87,
	0x60, 0x2e, 0x69, 0xf9, 0xc9, 0xc1, 0x40, 0x1a, 0x4b, 0x14, 0x3e, 0x9b, 0x2f, 0xf3, 0x2c, 0x76,
	0xc1, 0x35, 0x92, 0x05, 0xe9, 0x50, 0xdc, 0xcc, 0xaf, 0xa0, 0xbf, 0x8f, 0xa5, 0x9b, 0xe7, 0xaa,
	0xdc, 0x7c, 0xdb, 0xef, 0x7e, 0x4f, 0x7d, 0xd5, 0x0b, 0x57, 0xe2, 0x1e, 0x58, 0x24, 0x31, 0x06,
	0x13, 0xca, 0xa3, 0xdc, 0x3a, 0x57, 0x14, 0x92, 0xb2, 0x53, 0xee, 0x23, 0x8f, 0xf3, 0x10, 0x88,
	0xa4, 0x54, 0x8d, 0x2c, 0x49, 0xa3, 0xe6, 0x31, 0x8a, 0xf1, 0xcf, 0x7e, 0xdc, 0x94, 0x96, 0xe9,
	0xbe, 0x85, 0x76, 0x10, 0x56, 0x99, 0xc1, 0xa6, 0xeb, 0xf4, 0x79, 0xf7, 0xbb, 0x05, 0x7a, 0x37,
	0xdb, 0xdb, 0xc3, 0x31, 0x4a, 0x82, 0x5f, 0xb0, 0xb4, 0xc2, 0x2b, 0xeb, 0x77, 0x39, 0xa5, 0x42,
	0x8d, 0x4e, 0xf0, 0x0b, 0x16, 0x1f, 0x81, 0xf9, 0x41, 0x5a, 0xda, 0x65, 0x14, 0x85, 0x47, 0x29,
	0x28, 0x6e, 0x97, 0xc2, 0x21, 0x58, 0xf1, 0x77, 0x93, 0x94, 0xdc, 0x13, 0xda, 0x93, 0x13, 0x1e,
	0xe3, 0xdb, 0x94, 0x7a, 0xb3, 0x84, 0x4d, 0x78, 0x8d, 0x79, 0xb3, 0x94, 0x18, 0xe9, 0x4e, 0xd1,
	0x2c, 0x6a, 0xb1, 0x28, 0xae, 0x81, 0x79, 0x5a, 0x81, 0xa8, 0xd5, 0xc2, 0xec, 0x89, 0xdd, 0x8d,
	0xc2, 0xa6, 0x74, 0x97, 0x62, 0xaf, 0x92, 0x12, 0x14, 0x96, 0x4a, 0x14, 0x36, 0xc9, 0x87, 0x66,
	0x02, 0x9e, 0x9c, 0x11, 0x7d, 0xc0, 0xee, 0x51, 0x9e, 0x34, 0xc6, 0x0b, 0xc2, 0xfd, 0xfc, 0x2d,
	0xa3, 0xb5, 0x28, 0xe9, 0x51, 0x96, 0x76, 0xb2, 0x34, 0x91, 0x56, 0xcb, 0x0a, 0x16, 0x46, 0x8b,
	0xd9, 0x26, 0x04, 0x6d, 0xb4, 0xfc, 0xa0, 0x9d, 0xf7, 0xe9, 0xfd, 0x09, 0x41, 0xab, 0x04, 0xc0,
	0x3b, 0xf6, 0x39, 0x58, 0x2c, 0xae, 0x3e, 0x8a, 0x71, 0x23, 0x3a, 0xc2, 0xf1, 0x31, 0xdb, 0xe7,
	0x87, 0xec, 0x73, 0x5e, 0x98, 0x6d, 0x6e, 0xa5, 0x7b, 0xfd, 0x11, 0x2c, 0xd0, 0x12, 0x86, 0x61,
	0xe6, 0xb7, 0x50, 0x71, 0x71, 0xa5, 0x07, 0xe7, 0x7b, 0x7e, 0x48, 0xe1, 0xa9, 0x2b, 0x3d, 0xf7,
	0x94, 0x77, 0x54, 0xf1, 0xe5, 0x4f, 0x83, 0xb4, 0x85, 0x59, 0x7b, 0x7c, 0x54, 0xd4, 0x23, 0xff,
	0xe6, 0xbb, 0xc4, 0x48, 0x5b, 0x84, 0x0c, 0x0c, 0x83, 0xb4, 0x26, 0x4e, 0x1a, 0x71, 0xd0, 0xa1,
	0x0d, 0x43, 0xc9, 0x1f, 0xf3, 0x81, 0xa1, 0x24, 0x6b, 0x25, 0x84, 0xba, 0xf8, 0x6e, 0xc4, 0x45,
	0x27, 0x6a, 0xb5, 0x50, 0x34, 0xe0, 0xe2, 0x13, 0xea, 0xe2, 0xc6, 0x80, 0x8b, 0x7a, 0xd4, 0x6a,
	0x59, 0xa5, 0x87, 0x0a, 0x58, 0x3e, 0xd1, 0x43, 0x83, 0xb6, 0xe9, 0xc3, 0xb1, 0x2c, 0x4a, 0x17,
	0x55, 0xda, 0xa4, 0xe4, 0x60, 0x07, 0x7d, 0xc4, 0x78, 0x0f, 0xc7, 0xe4, 0xa3, 0xcf, 0x72, 0x78,
	0xc4, 0x0f, 0xb6, 0x74, 0x60, 0xe7, 0x00, 0x9a, 0xc2, 0x4b, 0x20, 0x0f, 0xd1, 0x1b, 0x07, 0xb8,
	0x71, 0x98, 0x64, 0x6d, 0xc6, 0x5e, 0xa3, 0xec, 0xc5, 0x01, 0x76, 0x95, 0xdb, 0x29, 0xf9, 0x0e,
	0x98, 0xa1, 0xcf, 0xa4, 0xdf, 0xe9, 0xb0, 0x5e, 0x58, 0xa7, 0xf8, 0xcb, 0xe4, 0x75, 0xf4, 0x3b,
	0x1d, 0xda, 0x01, 0x77, 0xd8, 0x48, 0x53, 0x62, 0x1e, 0x73, 0x8c, 0xdf, 0x2d, 0x30, 0x5f, 0x01,
	0x99, 0xda, 0x5b, 0xc1, 0x4f, 0x19, 0x69, 0x22, 0xb2, 0xff, 0xf4, 0x20, 0xc6, 0xc9, 0x41, 0xd4,
	0x6a, 0x4a, 0x4f, 0xd8, 0x16, 0x08, 0xa2, 0x56, 0x02, 0xdc, 0xdc, 0x4e, 0x7a, 0x73, 0x8c, 0xcd,
	0xdb, 0xfa, 0x29, 0xeb, 0xcd, 0x11, 0x2a, 0xef, 0xe9, 0x87, 0x40, 0x2c, 0xb2, 0x42, 0xcd, 0x2c,
	0x66, 0x9d, 0xf9, 0x29, 0x7b, 0x53, 0x9a, 0x3c, 0x37, 0x8d, 0xaf, 0x8b, 0xff, 0xc2, 0xd1, 0x47,
	0x38, 0x0e, 0xf6, 0x02, 0x1c, 0xb3, 0xcd, 0x7c, 0x76, 0xae, 0x3e, 0xa6, 0xde, 0x77, 0xb8, 0x23,
	0x5a, 0x81, 0x67, 0x7c, 0x0f, 0x7e, 0x96, 0x46, 0xa8, 0x89, 0xc3, 0x28, 0x23, 0x27, 0x48, 0xdf,
	0x83, 0x67, 0xac, 0x8b, 0x89, 0x59, 0xcd, 0xd2, 0x48, 0xe3, 0x46, 0xfa, 0x16, 0xd4, 0xc0, 0x5d,
	0x4a, 0x3b, 0x63, 0xf2, 0x7c, 0x4e, 0x5d, 0xac, 0x10, 0xa8, 0x71, 0xca, 0xf4, 0x99, 0x17, 0x64,
	0x78, 0x04, 0xfd, 0xbc, 0x2c, 0x88, 0x31, 0x38, 0x86, 0xe6, 0xb1, 0xcf, 0x18, 0x2c, 0xbf, 0x28,
	0x63, 0xeb, 0xa7, 0x0c, 0x8b, 0x87, 0xbc, 0x05, 0x3a, 0x51, 0xd4, 0x42, 0x49, 0x2b, 0xe8, 0x74,
	0xfc, 0x7d, 0x8c, 0x9a, 0x78, 0xcf, 0xcf, 0x5a, 0xa9, 0xf4, 0xe5, 0xb9, 0xca, 0x4c, 0x4b, 0x5a,
	0x8f, 0xa2, 0x96, 0xc3, 0xfd, 0x69, 0xcc, 0x9d, 0x78, 0x8f, 0x4e, 0xa6, 0x29, 0x79, 0x72, 0xf7,
	0x52, 0x2a, 0x8d, 0x5e, 0xf0, 0x39, 0x9b, 0xad, 0x6e, 0xa4, 0x44, 0x1e, 0xdd, 0x07, 0x73, 0x39,
	0x2a, 0xe4, 0xb0, 0x97, 0xc5, 0x00, 0x4b, 0x96, 0xcd, 0x3d, 0x8a, 0xf3, 0xc0, 0xec, 0x11, 0x4e,
	0xa3, 0x81, 0x8e, 0xfd, 0xea, 0x7c, 0x03, 0x10, 0xf1, 0x52, 0xb6, 0xf5, 0x26, 0x50, 0x48, 0x37,
	0x34, 0xa2, 0x76, 0x27, 0xca, 0xc2, 0x26, 0x0a, 0xc2, 0x14, 0xc7, 0x64, 0x8e, 0x0c, 0xb3, 0x76,
	0xae, 0x6a, 0xbe, 0xa6, 0xf9, 0xdc, 0x1a, 0xc4, 0xe9, 0x1c, 0x66, 0x66, 0x6d, 0x2e, 0x6c, 0x56,
	0xc1, 0xec, 0x6e, 0x1c, 0x34, 0xf7, 0x31, 0xf2, 0x99, 0x4a, 0x95, 0xbe, 0xa1, 0xf3, 0xe4, 0x0c,
	0x5b, 0xe5, 0xd2, 0x55, 0xfc, 0x37, 0x70, 0x8f, 0xc3, 0x58, 0x76, 0x08, 0xa7, 0x07, 0x38, 0xc6,
	0x59, 0x1b, 0xe1, 0x2e, 0x39, 0xf2, 0x7d, 0xcc, 0xa6, 0xbb, 0x6f, 0xcf, 0xb5, 0x39, 0x85, 0xf9,
	0xae, 0x52, 0x1b, 0xe4, 0x9e, 0x21, 0x77, 0x4c, 0x07, 0xbe, 0x32, 0x7e, 0x11, 0x38, 0x4f, 0x64,
	0x28, 0xfe, 0x77, 0xff, 0x4c, 0xfc, 0x3c, 0x32, 0xcf, 0x63, 0x20, 0xfe, 0xc7, 0xff, 0x23, 0x83,
	0xb9, 0x11, 0xc5, 0x4e, 0xf4, 0xb3, 0xa1, 0x9b, 0xc8, 0x7d, 0x83, 0x36, 0x20, 0x14, 0x2e, 0xc8,
	0x57, 0x7a, 0x7d, 0x65, 0xda, 0x18, 0x50, 0xd7, 0x86, 0xfa, 0x26, 0xb7, 0x4e, 0x71, 0xeb, 0x80,
	0xba, 0xde, 0xb1, 0x5c, 0x88, 0x5e, 0x79, 0x96, 0xed, 0x19, 0xc2, 0x3b, 0xf2, 0x6c, 0xaf, 0xaf,
	0x80, 0x9d, 0x21, 0x75, 0x6d, 0xe8, 0xa6, 0x6e, 0x78, 0x06, 0xaa, 0xdb, 0x56, 0xdd, 0x72, 0xd4,
	0x1a, 0x82, 0xa6, 0x86, 0x5c, 0xdd, 0x80, 0xc2, 0xbb, 0xb2, 0xdc, 0xeb, 0x2b, 0xd7, 0x8d, 0x13,
	0xd5, 0xf5, 0x00, 0x45, 0xad, 0xba, 0x06, 0x34, 0x5d, 0x46, 0xbc, 0x28, 0xdf, 0xe8, 0xf5, 0x95,
	0x6b, 0xf5, 0x93, 0xd4, 0x35, 0xd9, 0xcf, 0x50, 0xb8, 0x4a, 0xcd, 0xaa, 0x6e, 0x3b, 0xc2, 0x7b,
	0xb2, 0xd4, 0xeb, 0x2b, 0x0b, 0xc6, 0x09, 0xea, 0x7a, 0x84, 0x96, 0x87, 0xe4, 0xe4, 0xf7, 0xe5,
	0xe5, 0x5e, 0x5f, 0x91, 0x8d, 0x53, 0xd5, 0x35, 0x34, 0xd5, 0x4a, 0x0d, 0xa2, 0x0d, 0xcb, 0x86,
	0xfa, 0xa6, 0x49, 0x6a, 0x86, 0xea, 0xea, 0x5b, 0xe2, 0xc6, 0x11, 0x3e, 0x90, 0x6f, 0xf6, 0xfa,
	0x8a, 0x04, 0x4f, 0x51, 0xd7, 0x86, 0xee, 0x54, 0xb7, 0x54, 0xb3, 0x0a, 0x91, 0xad, 0x9a, 0xdb,
	0x48, 0x83, 0x55, 0x1b, 0xaa, 0x0e, 0x44, 0xaa, 0x61, 0x79, 0xa6, 0x2b, 0x4c, 0xcb, 0x2b, 0xbd,
	0xbe, 0xb2, 0x64, 0x9c, 0xae, 0xae, 0xc9, 0x79, 0x15, 0x8e, 0x84, 0x4b, 0xb2, 0xd0, 0xeb, 0x2b,
	0x57, 0x8c, 0x11, 0x75, 0x5d, 0x46, 0xaa, 0x5a, 0xe6, 0x86, 0xae, 0x41, 0x82, 0x05, 0xf2, 0x62,
	0xaf, 0xaf, 0xcc, 0x1b, 0x13, 0xd4, 0x75, 0x15, 0x2c, 0xeb, 0xa4, 0x22, 0xfa, 0xce, 0x68, 0x6e,
	0x75, 0x68, 0x57, 0xa1, 0xe9, 0x0a, 0x97, 0x59, 0x72, 0xa7, 0x3d, 0x80, 0x2f, 0x80, 0x5c, 0xb7,
	0x2c, 0x1b, 0x99, 0xd0, 0x7d, 0x6d, 0xd9, 0xdb, 0x88, 0x64, 0x5a, 0x21, 0xce, 0x1c, 0x68, 0x6a,
	0xc2, 0x15, 0xd6, 0x0e, 0xf5, 0xc9, 0x32, 0x78, 0x15, 0xcc, 0x92, 0xf3, 0xd9, 0x51, 0x6b, 0xba,
	0xa6, 0xba, 0x96, 0xed, 0x08, 0x33, 0xf2, 0xd5, 0x5e, 0x5f, 0x99, 0x31, 0x86, 0x94, 0xf6, 0x7d,
	0x30, 0xe7, 0x99, 0xdf, 0xab, 0x7a, 0x8d, 0x3a, 0xa7, 0xdd, 0x32, 0xcb, 0x70, 0xde, 0xa8, 0x5a,
	0xe6, 0x67, 0xe5, 0x5a, 0xdb, 0xd0, 0x44, 0xaf, 0xb7, 0x74, 0x17, 0xd6, 0x74, 0xc7, 0x15, 0xe6,
	0x58, 0x93, 0xc0, 0x13, 0xd4, 0xf2, 0x10, 0xab, 0x52, 0x53, 0xab, 0xdb, 0x94, 0x25, 0x8c, 0xb1,
	0x86, 0xd4, 0x32, 0x49, 0x9d, 0x14, 0xd9, 0xd5, 0xdd, 0xb7, 0x48, 0xad, 0xd7, 0x6d, 0x6b, 0x47,
	0xad, 0x21, 0x57, 0xaf, 0x0b, 0x57, 0x8b, 0x4b, 0x70, 0x82, 0x5a, 0xf6, 0x4c, 0xfd, 0x95, 0x07,
	0x4b, 0xf6, 0x36, 0x7c, 0xeb, 0x08, 0xa2, 0x7c, 0xbd, 0xd7, 0x57, 0x44, 0x6f, 0xa2, 0x5a, 0xf6,
	0x2a, 0x3a, 0xda, 0x52, 0x6d, 0xad, 0xaa, 0xd6, 0x85, 0x79, 0x76, 0x25, 0xbd, 0x52, 0x2d, 0x3f,
	0x06, 0x0b, 0x65, 0x11, 0x69, 0x87, 0x3a, 0x5b, 0xaa, 0x0d, 0x85, 0x05, 0xe6, 0x72, 0x67, 0x5c,
	0xfd, 0xae, 0x82, 0x59, 0xdd, 0xdc, 0xa8, 0xa9, 0xae, 0x6e, 0x99, 0xc8, 0x56, 0x5d, 0x28, 0x5c,
	0x63, 0x25, 0xd5, 0x47, 0xd5, 0x6c, 0x09, 0xab, 0x43, 0x5b, 0xb7, 0x34, 0xe1, 0xba, 0x3c, 0xdf,
	0xeb, 0x2b, 0x73, 0xfa, 0xb8, 0x9a, 0xf5, 0x4c, 0xc7, 0x55, 0xb7, 0x75, 0x73, 0x33, 0x87, 0x2e,
	0x32, 0xa8, 0x37, 0xae, 0x66, 0xc9, 0x49, 0x6a, 0xb0, 0x06, 0x37, 0xd9, 0xb9, 0x4b, 0xfc, 0xdc,
	0x47, 0xd5, 0x2c, 0xa9, 0x31, 0x87, 0xd1, 0x0c, 0x3c, 0x67, 0xcb, 0xf2, 0x5c, 0xe1, 0x46, 0x71,
	0xe9, 0x27, 0xaa, 0x59, 0xa7, 0xa6, 0x3a, 0x5b, 0x03, 0x69, 0xc8, 0xb2, 0xd8, 0xeb, 0x2b, 0xb3,
	0xce, 0xb0, 0x9a, 0x7d, 0x0a, 0xae, 0x91, 0x2c, 0x48, 0x63, 0x41, 0x2d, 0x6f, 0x79, 0x75, 0x13,
	0x0a, 0x4b, 0xfc, 0xca, 0x4c, 0x50, 0xa7, 0xcf, 0xc1, 0x22, 0xe1, 0x0c, 0x06, 0xc8, 0x59, 0x37,
	0xd9, 0x03, 0x66, 0x9c, 0xa4, 0x36, 0xc9, 0x56, 0xaa, 0x9e, 0xe3, 0x5a, 0xda, 0x5b, 0x64, 0xc3,
	0xd7, 0xaa, 0xad, 0x09, 0xb7, 0xe4, 0x85, 0x5e, 0x5f, 0x11, 0x8c, 0x09, 0x6a, 0x93, 0x44, 0xc9,
	0xd1, 0x15, 0x6f, 0x63, 0x03, 0xda, 0xc8, 0xd1, 0x7f, 0x80, 0xc2, 0x32, 0xdf, 0xf9, 0x09, 0x6a,
	0x73, 0x90, 0xe6, 0xbe, 0x61, 0x94, 0x15, 0x1e, 0x65, 0x82, 0xda, 0x54, 0x2b, 0x8e, 0x4b, 0x5a,
	0x90, 0xf6, 0xc0, 0x84, 0xc7, 0x49, 0x91, 0x95, 0x5e, 0x5f, 0xb9, 0xa9, 0x9e, 0xa1, 0x36, 0x49,
	0xd4, 0xd2, 0x95, 0x70, 0xbb, 0x38, 0xcc, 0x61, 0xb5, 0x49, 0x2b, 0x60, 0xd5, 0x6a, 0x90, 0x3d,
	0x39, 0x15, 0xcb, 0xd4, 0x84, 0x3b, 0xf2, 0xb5, 0x5e, 0x5f, 0xb9, 0x6a, 0x4c, 0x52, 0x9b, 0x13,
	0xf0, 0xa4, 0xe6, 0xf4, 0x01, 0xb8, 0xcb, 0x1e, 0x5e, 0xe3, 0x14, 0xb5, 0x49, 0x6b, 0x51, 0xd2,
	0x2d, 0xcf, 0xad, 0x7b, 0xae, 0x23, 0xdc, 0x2b, 0x2b, 0x38, 0x49, 0x6d, 0x8e, 0x04, 0xad, 0xd6,
	0x54, 0xdd, 0xc8, 0xfb, 0x68, 0x75, 0x42, 0xd0, 0x11, 0xb5, 0x59, 0x5c, 0x43, 0x64, 0xc3, 0xaa,
	0xb5, 0x03, 0xed, 0xb7, 0x6c, 0x9f, 0xf7, 0x59, 0x77, 0xec, 0x4c, 0x54, 0x9b, 0x8f, 0xc1, 0x02,
	0x2d, 0xa1, 0x69, 0x7a, 0x6a, 0x0d, 0x15, 0x17, 0x4e, 0xf8, 0x90, 0x5d, 0x5f, 0x63, 0xa2, 0x7a,
	0x24, 0x8c, 0xe2, 0xcb, 0xe6, 0xea, 0x6e, 0x0d, 0xb2, 0xe3, 0x7e, 0x50, 0xec, 0x6f, 0xa2, 0x7a,
	0x1c, 0xa2, 0x69, 0xd0, 0xa9, 0xda, 0x7a, 0x9d, 0x36, 0x00, 0x25, 0x7f, 0xc4, 0x3f, 0x88, 0xa7,
	0xaa, 0xc7, 0x21, 0x17, 0x75, 0xab, 0x56, 0x43, 0xd6, 0x80, 0x8b, 0x8f, 0xe5, 0x5b, 0xbd, 0xbe,
	0x72, 0xc3, 0x38, 0x4d, 0x3d, 0x9e, 0xe8, 0xa1, 0x4a, 0xdb, 0xee, 0x93, 0xb1, 0x2c, 0x26, 0xa8,
	0xc7, 0x21, 0x1f, 0x36, 0xdc, 0x80, 0x36, 0xf9, 0xde, 0xb1, 0x1c, 0x1e, 0xf2, 0x83, 0x3a, 0x45,
	0x3d, 0x0e, 0xd1, 0xab, 0x5b, 0xb0, 0xba, 0xed, 0x78, 0x06, 0x63, 0x3f, 0x92, 0x97, 0x7a, 0x7d,
	0x65, 0xd1, 0x38, 0x59, 0x3d, 0xd2, 0x67, 0x49, 0xad, 0xd7, 0xd9, 0xd9, 0xae, 0xc9, 0x73, 0xbd,
	0xbe, 0x72, 0xd9, 0x18, 0x56, 0x8f, 0xf4, 0x85, 0x2b, 0x30, 0xeb, 0x1c, 0x33, 0xac, 0x1e, 0xa9,
	0xbd, 0xa6, 0xbf, 0xf2, 0x48, 0xcf, 0x90, 0xfd, 0xbb, 0x5b, 0x36, 0x74, 0xb6, 0xac, 0x9a, 0x26,
	0x3c, 0x66, 0x5b, 0xd0, 0x4e, 0x51, 0x8f, 0x63, 0x6c, 0xde, 0xa6, 0x4f, 0x58, 0xaf, 0x69, 0x27,
	0xa9, 0xc7, 0x22, 0x2b, 0xa4, 0x79, 0x36, 0xeb, 0xb4, 0xa7, 0xec, 0x8d, 0xd0, 0x46, 0xd5, 0x63,
	0x8e, 0xde, 0x81, 0xb6, 0xbe, 0xa1, 0x43, 0x9b, 0x6d, 0xe6, 0xd3, 0x12, 0x3d, 0xaa, 0x06, 0x29,
	0x5a, 0xf5, 0x5c, 0x0b, 0x69, 0xd0, 0xb4, 0x3c, 0x72, 0x22, 0xf4, 0xbe, 0x7e, 0xc6, 0xba, 0x52,
	0x3b, 0x41, 0x0d, 0x52, 0xda, 0x19, 0x93, 0xd2, 0x33, 0xf9, 0x6e, 0xaf, 0xaf, 0xac, 0x68, 0x67,
	0xab, 0x41, 0xe6, 0x6d, 0x68, 0x64, 0x7a, 0x5e, 0xa6, 0x3c, 0xaa, 0x06, 0x29, 0xfa, 0x8c, 0x41,
	0xe8, 0xf3, 0x32, 0xf6, 0x69, 0xc3, 0xd0, 0x4b, 0x7e, 0xa4, 0x75, 0xcb, 0xaa, 0x21, 0xa7, 0xa6,
	0xd7, 0xeb, 0xea, 0x26, 0x44, 0x1a, 0xdc, 0x50, 0xbd, 0x9a, 0x2b, 0x7c, 0xc1, 0xfa, 0x4a, 0x3b,
	0x59, 0xdd, 0x19, 0xba, 0xe9, 0x92, 0x27, 0x6e, 0xc3, 0xa5, 0xa3, 0xf9, 0x97, 0x7c, 0xce, 0x1b,
	0x51, 0x77, 0x39, 0xca, 0xe4, 0xb0, 0x17, 0xc5, 0xd0, 0x34, 0xa0, 0xee, 0x56, 0xc1, 0xec, 0x0e,
	0x74, 0xad, 0x81, 0x8e, 0x7a, 0xc9, 0x60, 0x3b, 0xa3, 0x6a, 0x8d, 0x9c, 0x56, 0xd5, 0x32, 0xea,
	0x96, 0x67, 0x6a, 0x48, 0x37, 0x5d, 0x68, 0x93, 0x39, 0xc6, 0xf4, 0x8c, 0x7c, 0x4a, 0xfe, 0x4a,
	0xbe, 0xdd, 0xeb, 0x2b, 0xb7, 0xd4, 0xb3, 0xd4, 0x5a, 0xc5, 0xd6, 0xb5, 0x4d, 0x88, 0x54, 0x4d,
	0xb3, 0xa1, 0xe3, 0x08, 0x5f, 0xb3, 0x78, 0x95, 0x21, 0xb5, 0x66, 0x82, 0x7b, 0x1c, 0x56, 0xb5,
	0x1c, 0xc3, 0x72, 0x10, 0x74, 0xb7, 0xa0, 0x0d, 0x3d, 0x03, 0xc1, 0x37, 0xe4, 0xa8, 0x36, 0x21,
	0x9b, 0x46, 0xbe, 0x91, 0xef, 0xf5, 0xfa, 0x8a, 0x52, 0x39, 0x4b, 0x7d, 0x95, 0xfe, 0x0a, 0x47,
	0xb9, 0xe3, 0x21, 0x7f, 0xdf, 0x0e, 0xfa, 0x3b, 0x59, 0x4d, 0xc9, 0x17, 0xff, 0xfd, 0xbf, 0x96,
	0x2f, 0x54, 0xbe, 0xfd, 0xf5, 0x8f, 0xe5, 0xa9, 0xdf, 0xfe, 0x58, 0x9e, 0xfa, 0xcb, 0x1f, 0xcb,
	0x53, 0xff, 0xf1, 0xe7, 0xf2, 0x85, 0xdf, 0xfe, 0x5c, 0xbe, 0xf0, 0xbf, 0x7f, 0x2e, 0x5f, 0xf8,
	0x61, 0x75, 0x40, 0xb7, 0x6d, 0x07, 0xb1, 0x5f, 0x8d, 0x62, 0xbc, 0x9e, 0xe0, 0x43, 0x3f, 0x58,
	0xef, 0xd2, 0xdf, 0x8b, 0xa9, 0x74, 0xdb, 0x7d, 0x9f, 0xfe, 0x06, 0xfc, 0xe9, 0xdf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xb7, 0x5e, 0x6a, 0x9d, 0x48, 0x1e, 0x00, 0x00,
}

func (this *NetworkPropertyValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPropertyValue)
	if !ok {
		that2, ok := that.(NetworkPropertyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.StrValue != that1.StrValue {
		return false
	}
	return true
}
func (m *MsgSetNetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkProperties != nil {
		{
			size, err := m.NetworkProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPropertyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPropertyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPropertyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrValue) > 0 {
		i -= len(m.StrValue)
		copy(dAtA[i:], m.StrValue)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.StrValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BridgeEthereumCosmosExchangeRate.Size()
		i -= size
		if _, err := m.BridgeEthereumCosmosExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4
	i--
	dAtA[i] = 0x82
	{
		size := m.BridgeCosmosEthereumExchangeRate.Size()
		i -= size
		if _, err := m.BridgeCosmosEthereumExchangeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xfa
	if len(m.BridgeAddress) > 0 {
		i -= len(m.BridgeAddress)
		copy(dAtA[i:], m.BridgeAddress)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.BridgeAddress)))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xf2
	}
	if m.AutocompoundIntervalNumBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.AutocompoundIntervalNumBlocks))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xe8
	}
	{
		size := m.VetoThreshold.Size()
		i -= size
		if _, err := m.VetoThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xe2
	if m.MintingNftFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MintingNftFee))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd8
	}
	if m.MintingFtFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MintingFtFee))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xd0
	}
	{
		size := m.DappPoolSlippageDefault.Size()
		i -= size
		if _, err := m.DappPoolSlippageDefault.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xca
	if m.DappInactiveRankDecreasePercent != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappInactiveRankDecreasePercent))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xc0
	}
	if m.DappMaxMischance != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappMaxMischance))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb8
	}
	if m.DappMischanceRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappMischanceRankDecreaseAmount))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xb0
	}
	if m.DappAutoDenounceTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappAutoDenounceTime))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0xa8
	}
	{
		size := m.DappVerifierBond.Size()
		i -= size
		if _, err := m.DappVerifierBond.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3
	i--
	dAtA[i] = 0xa2
	if m.DappBondDuration != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappBondDuration))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x98
	}
	if m.DappLiquidationPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappLiquidationPeriod))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x90
	}
	if m.DappLiquidationThreshold != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.DappLiquidationThreshold))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x88
	}
	if m.MaxDappBond != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxDappBond))
		i--
		dAtA[i] = 0x3
		i--
		dAtA[i] = 0x80
	}
	if m.MinDappBond != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinDappBond))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf8
	}
	if m.MaxProposalChecksumSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalChecksumSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xf0
	}
	if m.MaxProposalReferenceSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalReferenceSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe8
	}
	if m.MaxProposalPollOptionCount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalPollOptionCount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xe0
	}
	if m.MaxProposalPollOptionSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalPollOptionSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd8
	}
	if m.MaxProposalDescriptionSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalDescriptionSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxProposalTitleSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxProposalTitleSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xc8
	}
	{
		size := m.MaxAnnualInflation.Size()
		i -= size
		if _, err := m.MaxAnnualInflation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0xc2
	if m.ValidatorRecoveryBond != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.ValidatorRecoveryBond))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb8
	}
	if m.MinCollectiveClaimPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveClaimPeriod))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xb0
	}
	if m.MaxCollectiveOutputs != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCollectiveOutputs))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa8
	}
	if m.MinCollectiveBondingTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveBondingTime))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0xa0
	}
	if m.MinCollectiveBond != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCollectiveBond))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x98
	}
	if m.MaxAbstention != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxAbstention))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x90
	}
	if m.AbstentionRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.AbstentionRankDecreaseAmount))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x88
	}
	if m.MaxCustodyTxSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyTxSize))
		i--
		dAtA[i] = 0x2
		i--
		dAtA[i] = 0x80
	}
	if m.MaxCustodyBufferSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyBufferSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.MinCustodyReward != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCustodyReward))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	{
		size := m.MaxSlashingPercentage.Size()
		i -= size
		if _, err := m.MaxSlashingPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	{
		size := m.MaxJailedPercentage.Size()
		i -= size
		if _, err := m.MaxJailedPercentage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if m.SlashingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.SlashingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.MinDelegationPushout != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinDelegationPushout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxDelegators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxDelegators))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.UnstakingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnstakingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.InflationPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.InflationPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	{
		size := m.InflationRate.Size()
		i -= size
		if _, err := m.InflationRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xb2
	{
		size := m.ValidatorsFeeShare.Size()
		i -= size
		if _, err := m.ValidatorsFeeShare.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.UbiHardcap != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UbiHardcap))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.UniqueIdentityKeys) > 0 {
		i -= len(m.UniqueIdentityKeys)
		copy(dAtA[i:], m.UniqueIdentityKeys)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.UniqueIdentityKeys)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MinIdentityApprovalTip != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinIdentityApprovalTip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.EnableTokenBlacklist {
		i--
		if m.EnableTokenBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.EnableTokenWhitelist {
		i--
		if m.EnableTokenWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UnjailMaxTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnjailMaxTime))
		i--
		dAtA[i] = 0x78
	}
	if m.PoorNetworkMaxBankSend != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.PoorNetworkMaxBankSend))
		i--
		dAtA[i] = 0x70
	}
	if m.MinValidators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinValidators))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.InactiveRankDecreasePercent.Size()
		i -= size
		if _, err := m.InactiveRankDecreasePercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.MischanceConfidence != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceConfidence))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxMischance != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxMischance))
		i--
		dAtA[i] = 0x50
	}
	if m.MischanceRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceRankDecreaseAmount))
		i--
		dAtA[i] = 0x48
	}
	if m.EnableForeignFeePayments {
		i--
		if m.EnableForeignFeePayments {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.MinProposalEnactmentBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEnactmentBlocks))
		i--
		dAtA[i] = 0x38
	}
	if m.MinProposalEndBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEndBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.ProposalEnactmentTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.ProposalEnactmentTime))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumProposalEndTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinimumProposalEndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxTxFee))
		i--
		dAtA[i] = 0x10
	}
	if m.MinTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinTxFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkProperties(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkProperties(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetNetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkProperties != nil {
		l = m.NetworkProperties.Size()
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkPropertyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNetworkProperties(uint64(m.Value))
	}
	l = len(m.StrValue)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinTxFee))
	}
	if m.MaxTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxTxFee))
	}
	if m.VoteQuorum != 0 {
		n += 1 + sovNetworkProperties(uint64(m.VoteQuorum))
	}
	if m.MinimumProposalEndTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinimumProposalEndTime))
	}
	if m.ProposalEnactmentTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.ProposalEnactmentTime))
	}
	if m.MinProposalEndBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEndBlocks))
	}
	if m.MinProposalEnactmentBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEnactmentBlocks))
	}
	if m.EnableForeignFeePayments {
		n += 2
	}
	if m.MischanceRankDecreaseAmount != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceRankDecreaseAmount))
	}
	if m.MaxMischance != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxMischance))
	}
	if m.MischanceConfidence != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceConfidence))
	}
	l = m.InactiveRankDecreasePercent.Size()
	n += 1 + l + sovNetworkProperties(uint64(l))
	if m.MinValidators != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinValidators))
	}
	if m.PoorNetworkMaxBankSend != 0 {
		n += 1 + sovNetworkProperties(uint64(m.PoorNetworkMaxBankSend))
	}
	if m.UnjailMaxTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.UnjailMaxTime))
	}
	if m.EnableTokenWhitelist {
		n += 3
	}
	if m.EnableTokenBlacklist {
		n += 3
	}
	if m.MinIdentityApprovalTip != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinIdentityApprovalTip))
	}
	l = len(m.UniqueIdentityKeys)
	if l > 0 {
		n += 2 + l + sovNetworkProperties(uint64(l))
	}
	if m.UbiHardcap != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UbiHardcap))
	}
	l = m.ValidatorsFeeShare.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	l = m.InflationRate.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.InflationPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.InflationPeriod))
	}
	if m.UnstakingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UnstakingPeriod))
	}
	if m.MaxDelegators != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxDelegators))
	}
	if m.MinDelegationPushout != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinDelegationPushout))
	}
	if m.SlashingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.SlashingPeriod))
	}
	l = m.MaxJailedPercentage.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	l = m.MaxSlashingPercentage.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.MinCustodyReward != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCustodyReward))
	}
	if m.MaxCustodyBufferSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyBufferSize))
	}
	if m.MaxCustodyTxSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyTxSize))
	}
	if m.AbstentionRankDecreaseAmount != 0 {
		n += 2 + sovNetworkProperties(uint64(m.AbstentionRankDecreaseAmount))
	}
	if m.MaxAbstention != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxAbstention))
	}
	if m.MinCollectiveBond != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveBond))
	}
	if m.MinCollectiveBondingTime != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveBondingTime))
	}
	if m.MaxCollectiveOutputs != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCollectiveOutputs))
	}
	if m.MinCollectiveClaimPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCollectiveClaimPeriod))
	}
	if m.ValidatorRecoveryBond != 0 {
		n += 2 + sovNetworkProperties(uint64(m.ValidatorRecoveryBond))
	}
	l = m.MaxAnnualInflation.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.MaxProposalTitleSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalTitleSize))
	}
	if m.MaxProposalDescriptionSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalDescriptionSize))
	}
	if m.MaxProposalPollOptionSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalPollOptionSize))
	}
	if m.MaxProposalPollOptionCount != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalPollOptionCount))
	}
	if m.MaxProposalReferenceSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalReferenceSize))
	}
	if m.MaxProposalChecksumSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxProposalChecksumSize))
	}
	if m.MinDappBond != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinDappBond))
	}
	if m.MaxDappBond != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxDappBond))
	}
	if m.DappLiquidationThreshold != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappLiquidationThreshold))
	}
	if m.DappLiquidationPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappLiquidationPeriod))
	}
	if m.DappBondDuration != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappBondDuration))
	}
	l = m.DappVerifierBond.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.DappAutoDenounceTime != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappAutoDenounceTime))
	}
	if m.DappMischanceRankDecreaseAmount != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappMischanceRankDecreaseAmount))
	}
	if m.DappMaxMischance != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappMaxMischance))
	}
	if m.DappInactiveRankDecreasePercent != 0 {
		n += 2 + sovNetworkProperties(uint64(m.DappInactiveRankDecreasePercent))
	}
	l = m.DappPoolSlippageDefault.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.MintingFtFee != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MintingFtFee))
	}
	if m.MintingNftFee != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MintingNftFee))
	}
	l = m.VetoThreshold.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	if m.AutocompoundIntervalNumBlocks != 0 {
		n += 2 + sovNetworkProperties(uint64(m.AutocompoundIntervalNumBlocks))
	}
	l = len(m.BridgeAddress)
	if l > 0 {
		n += 2 + l + sovNetworkProperties(uint64(l))
	}
	l = m.BridgeCosmosEthereumExchangeRate.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	l = m.BridgeEthereumCosmosExchangeRate.Size()
	n += 2 + l + sovNetworkProperties(uint64(l))
	return n
}

func sovNetworkProperties(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkProperties(x uint64) (n int) {
	return sovNetworkProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetNetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkProperties == nil {
				m.NetworkProperties = &NetworkProperties{}
			}
			if err := m.NetworkProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPropertyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPropertyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPropertyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTxFee", wireType)
			}
			m.MinTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxFee", wireType)
			}
			m.MaxTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProposalEndTime", wireType)
			}
			m.MinimumProposalEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProposalEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalEnactmentTime", wireType)
			}
			m.ProposalEnactmentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalEnactmentTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEndBlocks", wireType)
			}
			m.MinProposalEndBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEndBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEnactmentBlocks", wireType)
			}
			m.MinProposalEnactmentBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEnactmentBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForeignFeePayments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableForeignFeePayments = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceRankDecreaseAmount", wireType)
			}
			m.MischanceRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMischance", wireType)
			}
			m.MaxMischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMischance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceConfidence", wireType)
			}
			m.MischanceConfidence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceConfidence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveRankDecreasePercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InactiveRankDecreasePercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidators", wireType)
			}
			m.MinValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoorNetworkMaxBankSend", wireType)
			}
			m.PoorNetworkMaxBankSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoorNetworkMaxBankSend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailMaxTime", wireType)
			}
			m.UnjailMaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnjailMaxTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenWhitelist = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenBlacklist = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIdentityApprovalTip", wireType)
			}
			m.MinIdentityApprovalTip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIdentityApprovalTip |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIdentityKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueIdentityKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UbiHardcap", wireType)
			}
			m.UbiHardcap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UbiHardcap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsFeeShare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsFeeShare.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InflationRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationPeriod", wireType)
			}
			m.InflationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InflationPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingPeriod", wireType)
			}
			m.UnstakingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegators", wireType)
			}
			m.MaxDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelegationPushout", wireType)
			}
			m.MinDelegationPushout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDelegationPushout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingPeriod", wireType)
			}
			m.SlashingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlashingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxJailedPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxJailedPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlashingPercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxSlashingPercentage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCustodyReward", wireType)
			}
			m.MinCustodyReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCustodyReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyBufferSize", wireType)
			}
			m.MaxCustodyBufferSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCustodyBufferSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyTxSize", wireType)
			}
			m.MaxCustodyTxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCustodyTxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 33:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbstentionRankDecreaseAmount", wireType)
			}
			m.AbstentionRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AbstentionRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 34:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAbstention", wireType)
			}
			m.MaxAbstention = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxAbstention |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 35:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveBond", wireType)
			}
			m.MinCollectiveBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 36:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveBondingTime", wireType)
			}
			m.MinCollectiveBondingTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveBondingTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 37:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCollectiveOutputs", wireType)
			}
			m.MaxCollectiveOutputs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCollectiveOutputs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 38:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinCollectiveClaimPeriod", wireType)
			}
			m.MinCollectiveClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinCollectiveClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 39:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRecoveryBond", wireType)
			}
			m.ValidatorRecoveryBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorRecoveryBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 40:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAnnualInflation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxAnnualInflation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 41:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalTitleSize", wireType)
			}
			m.MaxProposalTitleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalTitleSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 42:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalDescriptionSize", wireType)
			}
			m.MaxProposalDescriptionSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalDescriptionSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 43:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalPollOptionSize", wireType)
			}
			m.MaxProposalPollOptionSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalPollOptionSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 44:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalPollOptionCount", wireType)
			}
			m.MaxProposalPollOptionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalPollOptionCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 45:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalReferenceSize", wireType)
			}
			m.MaxProposalReferenceSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalReferenceSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 46:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxProposalChecksumSize", wireType)
			}
			m.MaxProposalChecksumSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxProposalChecksumSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 47:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDappBond", wireType)
			}
			m.MinDappBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDappBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 48:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDappBond", wireType)
			}
			m.MaxDappBond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDappBond |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 49:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappLiquidationThreshold", wireType)
			}
			m.DappLiquidationThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappLiquidationThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 50:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappLiquidationPeriod", wireType)
			}
			m.DappLiquidationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappLiquidationPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 51:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappBondDuration", wireType)
			}
			m.DappBondDuration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappBondDuration |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 52:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappVerifierBond", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DappVerifierBond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 53:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappAutoDenounceTime", wireType)
			}
			m.DappAutoDenounceTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappAutoDenounceTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 54:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappMischanceRankDecreaseAmount", wireType)
			}
			m.DappMischanceRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappMischanceRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 55:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappMaxMischance", wireType)
			}
			m.DappMaxMischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappMaxMischance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 56:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappInactiveRankDecreasePercent", wireType)
			}
			m.DappInactiveRankDecreasePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DappInactiveRankDecreasePercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 57:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DappPoolSlippageDefault", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DappPoolSlippageDefault.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 58:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingFtFee", wireType)
			}
			m.MintingFtFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingFtFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 59:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingNftFee", wireType)
			}
			m.MintingNftFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingNftFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 60:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VetoThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.VetoThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 61:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutocompoundIntervalNumBlocks", wireType)
			}
			m.AutocompoundIntervalNumBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutocompoundIntervalNumBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 62:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 63:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeCosmosEthereumExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeCosmosEthereumExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 64:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeEthereumCosmosExchangeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeEthereumCosmosExchangeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkProperties
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkProperties
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkProperties
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkProperties        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkProperties          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkProperties = fmt.Errorf("proto: unexpected end of group")
)
