// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/gov/network_properties.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NetworkProperty int32

const (
	MinTxFee                    NetworkProperty = 0
	MaxTxFee                    NetworkProperty = 1
	VoteQuorum                  NetworkProperty = 2
	MinimumProposalEndTime      NetworkProperty = 3
	ProposalEnactmentTime       NetworkProperty = 4
	MinProposalEndBlocks        NetworkProperty = 5
	MinProposalEnactmentBlocks  NetworkProperty = 6
	EnableForeignFeePayments    NetworkProperty = 7
	MischanceRankDecreaseAmount NetworkProperty = 8
	MaxMischance                NetworkProperty = 9
	MischanceConfidence         NetworkProperty = 10
	InactiveRankDecreasePercent NetworkProperty = 11
	PoorNetworkMaxBankSend      NetworkProperty = 12
	MinValidators               NetworkProperty = 13
	UnjailMaxTime               NetworkProperty = 14
	EnableTokenWhitelist        NetworkProperty = 15
	EnableTokenBlacklist        NetworkProperty = 16
	MinIdentityApprovalTip      NetworkProperty = 17
	UniqueIdentityKeys          NetworkProperty = 18
	UbiHardcap                  NetworkProperty = 19
	ValidatorsFeeShare          NetworkProperty = 20
	InflationRate               NetworkProperty = 21
	InflationPeriod             NetworkProperty = 22
	UnstakingPeriod             NetworkProperty = 23
	MaxDelegators               NetworkProperty = 25
	MinDelegationPushout        NetworkProperty = 26
<<<<<<< HEAD
	MinCustodyReward            NetworkProperty = 27
	MaxCustodyBufferSize        NetworkProperty = 28
	MaxCustodyTxSize            NetworkProperty = 29
=======
	SlashingPeriod              NetworkProperty = 27
	MaxJailedPercentage         NetworkProperty = 28
	MaxSlashingPercentage       NetworkProperty = 29
>>>>>>> latest
)

var NetworkProperty_name = map[int32]string{
	0:  "MIN_TX_FEE",
	1:  "MAX_TX_FEE",
	2:  "VOTE_QUORUM",
	3:  "MINIMUM_PROPOSAL_END_TIME",
	4:  "PROPOSAL_ENACTMENT_TIME",
	5:  "MIN_PROPOSAL_END_BLOCKS",
	6:  "MIN_PROPOSAL_ENACTMENT_BLOCKS",
	7:  "ENABLE_FOREIGN_FEE_PAYMENTS",
	8:  "MISCHANCE_RANK_DECREASE_AMOUNT",
	9:  "MAX_MISCHANCE",
	10: "MISCHANCE_CONFIDENCE",
	11: "INACTIVE_RANK_DECREASE_PERCENT",
	12: "POOR_NETWORK_MAX_BANK_SEND",
	13: "MIN_VALIDATORS",
	14: "UNJAIL_MAX_TIME",
	15: "ENABLE_TOKEN_WHITELIST",
	16: "ENABLE_TOKEN_BLACKLIST",
	17: "MIN_IDENTITY_APPROVAL_TIP",
	18: "UNIQUE_IDENTITY_KEYS",
	19: "UBI_HARDCAP",
	20: "VALIDATORS_FEE_SHARE",
	21: "INFLATION_RATE",
	22: "INFLATION_PERIOD",
	23: "UNSTAKING_PERIOD",
	25: "MAX_DELEGATORS",
	26: "MIN_DELEGATION_PUSHOUT",
<<<<<<< HEAD
	27: "MIN_CUSTODY_REWARD",
	28: "MAX_CUSTODY_BUFFER_SIZE",
	29: "MAX_CUSTODY_TX_SIZE",
=======
	27: "SLASHING_PERIOD",
	28: "MAX_JAILED_PERCENTAGE",
	29: "MAX_SLASHING_PERCENTAGE",
>>>>>>> latest
}

var NetworkProperty_value = map[string]int32{
	"MIN_TX_FEE":                     0,
	"MAX_TX_FEE":                     1,
	"VOTE_QUORUM":                    2,
	"MINIMUM_PROPOSAL_END_TIME":      3,
	"PROPOSAL_ENACTMENT_TIME":        4,
	"MIN_PROPOSAL_END_BLOCKS":        5,
	"MIN_PROPOSAL_ENACTMENT_BLOCKS":  6,
	"ENABLE_FOREIGN_FEE_PAYMENTS":    7,
	"MISCHANCE_RANK_DECREASE_AMOUNT": 8,
	"MAX_MISCHANCE":                  9,
	"MISCHANCE_CONFIDENCE":           10,
	"INACTIVE_RANK_DECREASE_PERCENT": 11,
	"POOR_NETWORK_MAX_BANK_SEND":     12,
	"MIN_VALIDATORS":                 13,
	"UNJAIL_MAX_TIME":                14,
	"ENABLE_TOKEN_WHITELIST":         15,
	"ENABLE_TOKEN_BLACKLIST":         16,
	"MIN_IDENTITY_APPROVAL_TIP":      17,
	"UNIQUE_IDENTITY_KEYS":           18,
	"UBI_HARDCAP":                    19,
	"VALIDATORS_FEE_SHARE":           20,
	"INFLATION_RATE":                 21,
	"INFLATION_PERIOD":               22,
	"UNSTAKING_PERIOD":               23,
	"MAX_DELEGATORS":                 25,
	"MIN_DELEGATION_PUSHOUT":         26,
<<<<<<< HEAD
	"MIN_CUSTODY_REWARD":             27,
	"MAX_CUSTODY_BUFFER_SIZE":        28,
	"MAX_CUSTODY_TX_SIZE":            29,
=======
	"SLASHING_PERIOD":                27,
	"MAX_JAILED_PERCENTAGE":          28,
	"MAX_SLASHING_PERCENTAGE":        29,
>>>>>>> latest
}

func (x NetworkProperty) String() string {
	return proto.EnumName(NetworkProperty_name, int32(x))
}

func (NetworkProperty) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}

type MsgSetNetworkProperties struct {
	NetworkProperties *NetworkProperties                            `protobuf:"bytes,1,opt,name=network_properties,json=networkProperties,proto3" json:"network_properties,omitempty"`
	Proposer          github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=proposer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"proposer,omitempty"`
}

func (m *MsgSetNetworkProperties) Reset()         { *m = MsgSetNetworkProperties{} }
func (m *MsgSetNetworkProperties) String() string { return proto.CompactTextString(m) }
func (*MsgSetNetworkProperties) ProtoMessage()    {}
func (*MsgSetNetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{0}
}
func (m *MsgSetNetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNetworkProperties.Merge(m, src)
}
func (m *MsgSetNetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNetworkProperties proto.InternalMessageInfo

func (m *MsgSetNetworkProperties) GetNetworkProperties() *NetworkProperties {
	if m != nil {
		return m.NetworkProperties
	}
	return nil
}

func (m *MsgSetNetworkProperties) GetProposer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Proposer
	}
	return nil
}

type NetworkPropertyValue struct {
	Value    uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	StrValue string `protobuf:"bytes,2,opt,name=str_value,json=strValue,proto3" json:"str_value,omitempty"`
}

func (m *NetworkPropertyValue) Reset()         { *m = NetworkPropertyValue{} }
func (m *NetworkPropertyValue) String() string { return proto.CompactTextString(m) }
func (*NetworkPropertyValue) ProtoMessage()    {}
func (*NetworkPropertyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{1}
}
func (m *NetworkPropertyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkPropertyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkPropertyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkPropertyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkPropertyValue.Merge(m, src)
}
func (m *NetworkPropertyValue) XXX_Size() int {
	return m.Size()
}
func (m *NetworkPropertyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkPropertyValue.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkPropertyValue proto.InternalMessageInfo

func (m *NetworkPropertyValue) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NetworkPropertyValue) GetStrValue() string {
	if m != nil {
		return m.StrValue
	}
	return ""
}

type NetworkProperties struct {
	MinTxFee                    uint64 `protobuf:"varint,1,opt,name=min_tx_fee,json=minTxFee,proto3" json:"min_tx_fee,omitempty"`
	MaxTxFee                    uint64 `protobuf:"varint,2,opt,name=max_tx_fee,json=maxTxFee,proto3" json:"max_tx_fee,omitempty"`
	VoteQuorum                  uint64 `protobuf:"varint,3,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	MinimumProposalEndTime      uint64 `protobuf:"varint,4,opt,name=minimum_proposal_end_time,json=minimumProposalEndTime,proto3" json:"minimum_proposal_end_time,omitempty"`
	ProposalEnactmentTime       uint64 `protobuf:"varint,5,opt,name=proposal_enactment_time,json=proposalEnactmentTime,proto3" json:"proposal_enactment_time,omitempty"`
	MinProposalEndBlocks        uint64 `protobuf:"varint,6,opt,name=min_proposal_end_blocks,json=minProposalEndBlocks,proto3" json:"min_proposal_end_blocks,omitempty"`
	MinProposalEnactmentBlocks  uint64 `protobuf:"varint,7,opt,name=min_proposal_enactment_blocks,json=minProposalEnactmentBlocks,proto3" json:"min_proposal_enactment_blocks,omitempty"`
	EnableForeignFeePayments    bool   `protobuf:"varint,8,opt,name=enable_foreign_fee_payments,json=enableForeignFeePayments,proto3" json:"enable_foreign_fee_payments,omitempty"`
	MischanceRankDecreaseAmount uint64 `protobuf:"varint,9,opt,name=mischance_rank_decrease_amount,json=mischanceRankDecreaseAmount,proto3" json:"mischance_rank_decrease_amount,omitempty"`
	MaxMischance                uint64 `protobuf:"varint,10,opt,name=max_mischance,json=maxMischance,proto3" json:"max_mischance,omitempty"`
	MischanceConfidence         uint64 `protobuf:"varint,11,opt,name=mischance_confidence,json=mischanceConfidence,proto3" json:"mischance_confidence,omitempty"`
	InactiveRankDecreasePercent uint64 `protobuf:"varint,12,opt,name=inactive_rank_decrease_percent,json=inactiveRankDecreasePercent,proto3" json:"inactive_rank_decrease_percent,omitempty"`
	MinValidators               uint64 `protobuf:"varint,13,opt,name=min_validators,json=minValidators,proto3" json:"min_validators,omitempty"`
	PoorNetworkMaxBankSend      uint64 `protobuf:"varint,14,opt,name=poor_network_max_bank_send,json=poorNetworkMaxBankSend,proto3" json:"poor_network_max_bank_send,omitempty"`
	UnjailMaxTime               uint64 `protobuf:"varint,15,opt,name=unjail_max_time,json=unjailMaxTime,proto3" json:"unjail_max_time,omitempty"`
	EnableTokenWhitelist        bool   `protobuf:"varint,16,opt,name=enable_token_whitelist,json=enableTokenWhitelist,proto3" json:"enable_token_whitelist,omitempty"`
	EnableTokenBlacklist        bool   `protobuf:"varint,17,opt,name=enable_token_blacklist,json=enableTokenBlacklist,proto3" json:"enable_token_blacklist,omitempty"`
	MinIdentityApprovalTip      uint64 `protobuf:"varint,18,opt,name=min_identity_approval_tip,json=minIdentityApprovalTip,proto3" json:"min_identity_approval_tip,omitempty"`
	UniqueIdentityKeys          string `protobuf:"bytes,19,opt,name=unique_identity_keys,json=uniqueIdentityKeys,proto3" json:"unique_identity_keys,omitempty"`
	UbiHardcap                  uint64 `protobuf:"varint,20,opt,name=ubi_hardcap,json=ubiHardcap,proto3" json:"ubi_hardcap,omitempty"`
	ValidatorsFeeShare          uint64 `protobuf:"varint,21,opt,name=validators_fee_share,json=validatorsFeeShare,proto3" json:"validators_fee_share,omitempty"`
	InflationRate               uint64 `protobuf:"varint,22,opt,name=inflation_rate,json=inflationRate,proto3" json:"inflation_rate,omitempty"`
	InflationPeriod             uint64 `protobuf:"varint,23,opt,name=inflation_period,json=inflationPeriod,proto3" json:"inflation_period,omitempty"`
	UnstakingPeriod             uint64 `protobuf:"varint,24,opt,name=unstaking_period,json=unstakingPeriod,proto3" json:"unstaking_period,omitempty"`
	MaxDelegators               uint64 `protobuf:"varint,25,opt,name=max_delegators,json=maxDelegators,proto3" json:"max_delegators,omitempty"`
	MinDelegationPushout        uint64 `protobuf:"varint,26,opt,name=min_delegation_pushout,json=minDelegationPushout,proto3" json:"min_delegation_pushout,omitempty"`
<<<<<<< HEAD
	MinCustodyReward            uint64 `protobuf:"varint,27,opt,name=min_custody_reward,json=minCustodyReward,proto3" json:"min_custody_reward,omitempty"`
	MaxCustodyBufferSize        uint64 `protobuf:"varint,28,opt,name=max_custody_buffer_size,json=maxCustodyBufferSize,proto3" json:"max_custody_buffer_size,omitempty"`
	MaxCustodyTxSize            uint64 `protobuf:"varint,29,opt,name=max_custody_tx_size,json=maxCustodyTxSize,proto3" json:"max_custody_tx_size,omitempty"`
=======
	SlashingPeriod              uint64 `protobuf:"varint,27,opt,name=slashing_period,json=slashingPeriod,proto3" json:"slashing_period,omitempty"`
	MaxJailedPercentage         uint64 `protobuf:"varint,28,opt,name=max_jailed_percentage,json=maxJailedPercentage,proto3" json:"max_jailed_percentage,omitempty"`
	MaxSlashingPercentage       uint64 `protobuf:"varint,29,opt,name=max_slashing_percentage,json=maxSlashingPercentage,proto3" json:"max_slashing_percentage,omitempty"`
>>>>>>> latest
}

func (m *NetworkProperties) Reset()         { *m = NetworkProperties{} }
func (m *NetworkProperties) String() string { return proto.CompactTextString(m) }
func (*NetworkProperties) ProtoMessage()    {}
func (*NetworkProperties) Descriptor() ([]byte, []int) {
	return fileDescriptor_98011a6048e5dde3, []int{2}
}
func (m *NetworkProperties) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetworkProperties) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetworkProperties.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetworkProperties) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkProperties.Merge(m, src)
}
func (m *NetworkProperties) XXX_Size() int {
	return m.Size()
}
func (m *NetworkProperties) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkProperties.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkProperties proto.InternalMessageInfo

func (m *NetworkProperties) GetMinTxFee() uint64 {
	if m != nil {
		return m.MinTxFee
	}
	return 0
}

func (m *NetworkProperties) GetMaxTxFee() uint64 {
	if m != nil {
		return m.MaxTxFee
	}
	return 0
}

func (m *NetworkProperties) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *NetworkProperties) GetMinimumProposalEndTime() uint64 {
	if m != nil {
		return m.MinimumProposalEndTime
	}
	return 0
}

func (m *NetworkProperties) GetProposalEnactmentTime() uint64 {
	if m != nil {
		return m.ProposalEnactmentTime
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEndBlocks() uint64 {
	if m != nil {
		return m.MinProposalEndBlocks
	}
	return 0
}

func (m *NetworkProperties) GetMinProposalEnactmentBlocks() uint64 {
	if m != nil {
		return m.MinProposalEnactmentBlocks
	}
	return 0
}

func (m *NetworkProperties) GetEnableForeignFeePayments() bool {
	if m != nil {
		return m.EnableForeignFeePayments
	}
	return false
}

func (m *NetworkProperties) GetMischanceRankDecreaseAmount() uint64 {
	if m != nil {
		return m.MischanceRankDecreaseAmount
	}
	return 0
}

func (m *NetworkProperties) GetMaxMischance() uint64 {
	if m != nil {
		return m.MaxMischance
	}
	return 0
}

func (m *NetworkProperties) GetMischanceConfidence() uint64 {
	if m != nil {
		return m.MischanceConfidence
	}
	return 0
}

func (m *NetworkProperties) GetInactiveRankDecreasePercent() uint64 {
	if m != nil {
		return m.InactiveRankDecreasePercent
	}
	return 0
}

func (m *NetworkProperties) GetMinValidators() uint64 {
	if m != nil {
		return m.MinValidators
	}
	return 0
}

func (m *NetworkProperties) GetPoorNetworkMaxBankSend() uint64 {
	if m != nil {
		return m.PoorNetworkMaxBankSend
	}
	return 0
}

func (m *NetworkProperties) GetUnjailMaxTime() uint64 {
	if m != nil {
		return m.UnjailMaxTime
	}
	return 0
}

func (m *NetworkProperties) GetEnableTokenWhitelist() bool {
	if m != nil {
		return m.EnableTokenWhitelist
	}
	return false
}

func (m *NetworkProperties) GetEnableTokenBlacklist() bool {
	if m != nil {
		return m.EnableTokenBlacklist
	}
	return false
}

func (m *NetworkProperties) GetMinIdentityApprovalTip() uint64 {
	if m != nil {
		return m.MinIdentityApprovalTip
	}
	return 0
}

func (m *NetworkProperties) GetUniqueIdentityKeys() string {
	if m != nil {
		return m.UniqueIdentityKeys
	}
	return ""
}

func (m *NetworkProperties) GetUbiHardcap() uint64 {
	if m != nil {
		return m.UbiHardcap
	}
	return 0
}

func (m *NetworkProperties) GetValidatorsFeeShare() uint64 {
	if m != nil {
		return m.ValidatorsFeeShare
	}
	return 0
}

func (m *NetworkProperties) GetInflationRate() uint64 {
	if m != nil {
		return m.InflationRate
	}
	return 0
}

func (m *NetworkProperties) GetInflationPeriod() uint64 {
	if m != nil {
		return m.InflationPeriod
	}
	return 0
}

func (m *NetworkProperties) GetUnstakingPeriod() uint64 {
	if m != nil {
		return m.UnstakingPeriod
	}
	return 0
}

func (m *NetworkProperties) GetMaxDelegators() uint64 {
	if m != nil {
		return m.MaxDelegators
	}
	return 0
}

func (m *NetworkProperties) GetMinDelegationPushout() uint64 {
	if m != nil {
		return m.MinDelegationPushout
	}
	return 0
}

<<<<<<< HEAD
func (m *NetworkProperties) GetMinCustodyReward() uint64 {
	if m != nil {
		return m.MinCustodyReward
=======
func (m *NetworkProperties) GetSlashingPeriod() uint64 {
	if m != nil {
		return m.SlashingPeriod
>>>>>>> latest
	}
	return 0
}

<<<<<<< HEAD
func (m *NetworkProperties) GetMaxCustodyBufferSize() uint64 {
	if m != nil {
		return m.MaxCustodyBufferSize
=======
func (m *NetworkProperties) GetMaxJailedPercentage() uint64 {
	if m != nil {
		return m.MaxJailedPercentage
>>>>>>> latest
	}
	return 0
}

<<<<<<< HEAD
func (m *NetworkProperties) GetMaxCustodyTxSize() uint64 {
	if m != nil {
		return m.MaxCustodyTxSize
=======
func (m *NetworkProperties) GetMaxSlashingPercentage() uint64 {
	if m != nil {
		return m.MaxSlashingPercentage
>>>>>>> latest
	}
	return 0
}

func init() {
	proto.RegisterEnum("kira.gov.NetworkProperty", NetworkProperty_name, NetworkProperty_value)
	proto.RegisterType((*MsgSetNetworkProperties)(nil), "kira.gov.MsgSetNetworkProperties")
	proto.RegisterType((*NetworkPropertyValue)(nil), "kira.gov.NetworkPropertyValue")
	proto.RegisterType((*NetworkProperties)(nil), "kira.gov.NetworkProperties")
}

func init() { proto.RegisterFile("kira/gov/network_properties.proto", fileDescriptor_98011a6048e5dde3) }

var fileDescriptor_98011a6048e5dde3 = []byte{
<<<<<<< HEAD
	// 1585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0xcb, 0x6e, 0x1b, 0xc9,
	0x15, 0x35, 0x3d, 0xb2, 0x47, 0x2e, 0xbd, 0x5a, 0x2d, 0x5a, 0x6a, 0xb7, 0x6c, 0xba, 0xe3, 0xc0,
	0x03, 0x27, 0x88, 0xa5, 0x4c, 0x5e, 0x40, 0x0c, 0x04, 0x41, 0x93, 0x2c, 0x5a, 0x3d, 0x64, 0x3f,
	0xdc, 0x0f, 0xd9, 0x9e, 0x4d, 0xa1, 0x48, 0x96, 0xa8, 0x0a, 0xd9, 0xdd, 0x9c, 0xee, 0xa6, 0x4c,
	0xcd, 0x17, 0x04, 0x5c, 0xe5, 0x07, 0x08, 0x04, 0x98, 0x45, 0x7e, 0x20, 0x1f, 0x91, 0xe5, 0x2c,
	0xb3, 0x0a, 0x02, 0x7b, 0x93, 0x6f, 0xc8, 0x6a, 0x50, 0x55, 0xcd, 0xe6, 0x4b, 0xf2, 0x4a, 0xd4,
	0x3d, 0xe7, 0xdc, 0x7b, 0xab, 0xee, 0xad, 0x03, 0x12, 0xfc, 0xac, 0x4f, 0x13, 0x7c, 0xda, 0x8b,
	0xaf, 0x4e, 0x23, 0x92, 0x7d, 0x88, 0x93, 0x3e, 0x1a, 0x26, 0xf1, 0x90, 0x24, 0x19, 0x25, 0xe9,
	0xc9, 0x30, 0x89, 0xb3, 0x58, 0xde, 0x64, 0x94, 0x93, 0x5e, 0x7c, 0xa5, 0x96, 0x7b, 0x71, 0x2f,
	0xe6, 0xc1, 0x53, 0xf6, 0x49, 0xe0, 0xcf, 0xfe, 0x59, 0x02, 0x47, 0x66, 0xda, 0xf3, 0x48, 0x66,
	0x89, 0x14, 0x4e, 0x91, 0x41, 0xfe, 0x06, 0xc8, 0xeb, 0x79, 0x95, 0x92, 0x56, 0x7a, 0xb1, 0xf5,
	0x9b, 0xe3, 0x93, 0x59, 0xe2, 0x93, 0x35, 0xa1, 0xbb, 0x1f, 0xad, 0xe5, 0x32, 0xc1, 0x26, 0xcb,
	0x11, 0xa7, 0x24, 0x51, 0xee, 0x6a, 0xa5, 0x17, 0xdb, 0xd5, 0xaf, 0xff, 0xff, 0x9f, 0xa7, 0x2f,
	0x7b, 0x34, 0xbb, 0x1c, 0xb5, 0x4f, 0x3a, 0x71, 0x78, 0xda, 0x89, 0xd3, 0x30, 0x4e, 0xf3, 0x3f,
	0x2f, 0xd3, 0x6e, 0xff, 0x34, 0xbb, 0x1e, 0x92, 0xf4, 0x44, 0xef, 0x74, 0xf4, 0x6e, 0x37, 0x21,
	0x69, 0xea, 0x16, 0x29, 0x9e, 0xd9, 0xa0, 0xbc, 0x5c, 0xf6, 0xfa, 0x1c, 0x0f, 0x46, 0x44, 0x2e,
	0x83, 0x7b, 0x57, 0xec, 0x03, 0xef, 0x72, 0xc3, 0x15, 0xff, 0xc8, 0xc7, 0xe0, 0x41, 0x9a, 0x25,
	0x48, 0x20, 0xac, 0xfa, 0x03, 0x77, 0x33, 0xcd, 0x12, 0x2e, 0x79, 0xb5, 0xf1, 0xbf, 0xbf, 0x3f,
	0x2d, 0x3d, 0xfb, 0x61, 0x0b, 0xec, 0xaf, 0xdf, 0xc0, 0x63, 0x00, 0x42, 0x1a, 0xa1, 0x6c, 0x8c,
	0x2e, 0xc8, 0x2c, 0xe7, 0x66, 0x48, 0x23, 0x7f, 0xdc, 0x20, 0x84, 0xa3, 0x78, 0x3c, 0x43, 0xef,
	0xe6, 0x28, 0x1e, 0x0b, 0xf4, 0x29, 0xd8, 0xba, 0x8a, 0x33, 0x82, 0xbe, 0x1b, 0xc5, 0xc9, 0x28,
	0x54, 0xbe, 0xe0, 0x30, 0x60, 0xa1, 0x37, 0x3c, 0x22, 0xff, 0x11, 0x3c, 0x0a, 0x69, 0x44, 0xc3,
	0x51, 0x88, 0xc4, 0xb9, 0xf0, 0x00, 0x91, 0xa8, 0x8b, 0x32, 0x1a, 0x12, 0x65, 0x83, 0xd3, 0x0f,
	0x73, 0x82, 0x93, 0xe3, 0x30, 0xea, 0xfa, 0x34, 0x24, 0xf2, 0x1f, 0xc0, 0xd1, 0x82, 0x04, 0x77,
	0xb2, 0x90, 0x44, 0x99, 0x10, 0xde, 0xe3, 0xc2, 0x87, 0xc3, 0x42, 0x91, 0xa3, 0x5c, 0xf7, 0x7b,
	0x70, 0xc4, 0xce, 0xb3, 0x54, 0xae, 0x3d, 0x88, 0x3b, 0xfd, 0x54, 0xb9, 0xcf, 0x75, 0xe5, 0x90,
	0x46, 0x0b, 0xc5, 0xaa, 0x1c, 0x93, 0x75, 0xf0, 0x64, 0x45, 0x36, 0x2b, 0x99, 0x8b, 0xbf, 0xe4,
	0x62, 0x75, 0x49, 0x9c, 0x53, 0xf2, 0x14, 0x7f, 0x02, 0xc7, 0x24, 0xc2, 0xed, 0x01, 0x41, 0x17,
	0x71, 0x42, 0x68, 0x2f, 0x62, 0x77, 0x86, 0x86, 0xf8, 0x9a, 0x71, 0x52, 0x65, 0x53, 0x2b, 0xbd,
	0xd8, 0x74, 0x15, 0x41, 0x69, 0x08, 0x46, 0x83, 0x10, 0x27, 0xc7, 0xe5, 0x1a, 0xa8, 0x84, 0x34,
	0xed, 0x5c, 0xe2, 0xa8, 0x43, 0x50, 0x82, 0xa3, 0x3e, 0xea, 0x92, 0x4e, 0x42, 0x70, 0x4a, 0x10,
	0x0e, 0xe3, 0x51, 0x94, 0x29, 0x0f, 0x78, 0x0b, 0xc7, 0x05, 0xcb, 0xc5, 0x51, 0xbf, 0x9e, 0x73,
	0x74, 0x4e, 0x91, 0x7f, 0x0e, 0x76, 0xd8, 0xbc, 0x0a, 0x8a, 0x02, 0xb8, 0x66, 0x3b, 0xc4, 0x63,
	0x73, 0x16, 0x93, 0xbf, 0x06, 0xe5, 0x79, 0xa5, 0x4e, 0x1c, 0x5d, 0xd0, 0x2e, 0x61, 0xdc, 0x2d,
	0xce, 0x3d, 0x28, 0xb0, 0x5a, 0x01, 0xb1, 0xe6, 0x28, 0x3b, 0x2e, 0xbd, 0x5a, 0xed, 0x6d, 0x48,
	0x92, 0x0e, 0x89, 0x32, 0x65, 0x5b, 0x34, 0x37, 0x63, 0x2d, 0xf6, 0xe6, 0x08, 0x8a, 0xfc, 0x1c,
	0xec, 0xb2, 0x3b, 0xbe, 0xc2, 0x03, 0xda, 0xc5, 0x59, 0x9c, 0xa4, 0xca, 0x0e, 0x17, 0xed, 0x84,
	0x34, 0x3a, 0x2f, 0x82, 0xf2, 0x2b, 0xa0, 0x0e, 0xe3, 0x38, 0x41, 0xb3, 0x87, 0xc9, 0x0e, 0xd4,
	0x66, 0x35, 0x53, 0x12, 0x75, 0x95, 0x5d, 0xb1, 0x35, 0x8c, 0x91, 0x2f, 0xb3, 0x89, 0xc7, 0x55,
	0x1c, 0xf5, 0x3d, 0x12, 0x75, 0xe5, 0xaf, 0xc0, 0xde, 0x28, 0xfa, 0x0b, 0xa6, 0x03, 0xae, 0xe2,
	0xdb, 0xb2, 0x27, 0x6a, 0x88, 0xb0, 0x89, 0xc7, 0x7c, 0x4b, 0x7e, 0x07, 0x0e, 0xf3, 0x59, 0x65,
	0x71, 0x9f, 0x44, 0xe8, 0xc3, 0x25, 0xcd, 0xc8, 0x80, 0xa6, 0x99, 0x22, 0xf1, 0x31, 0x95, 0x05,
	0xea, 0x33, 0xf0, 0xed, 0x0c, 0x5b, 0x53, 0xb5, 0x07, 0xb8, 0xd3, 0xe7, 0xaa, 0xfd, 0x35, 0x55,
	0x75, 0x86, 0xe5, 0x8f, 0x00, 0xb1, 0x9b, 0xcc, 0x68, 0x76, 0x8d, 0xf0, 0x70, 0x98, 0xc4, 0x57,
	0x78, 0x80, 0x32, 0x3a, 0x54, 0xe4, 0xe2, 0x11, 0x18, 0x39, 0xae, 0xe7, 0xb0, 0x4f, 0x87, 0xf2,
	0xaf, 0x41, 0x79, 0x14, 0xd1, 0xef, 0x46, 0x64, 0xae, 0xee, 0x93, 0xeb, 0x54, 0x39, 0xe0, 0x0f,
	0x5c, 0x16, 0xd8, 0x4c, 0xd8, 0x24, 0xd7, 0x29, 0x7b, 0x92, 0xa3, 0x36, 0x45, 0x97, 0x38, 0xe9,
	0x76, 0xf0, 0x50, 0x29, 0x8b, 0x27, 0x39, 0x6a, 0xd3, 0x33, 0x11, 0x61, 0x29, 0xe7, 0x03, 0xe0,
	0x1b, 0x9a, 0x5e, 0xe2, 0x84, 0x28, 0x0f, 0x39, 0x53, 0x9e, 0x63, 0x0d, 0x42, 0x3c, 0x86, 0xb0,
	0xb1, 0xd1, 0xe8, 0x62, 0x80, 0x33, 0x1a, 0x47, 0x28, 0xc1, 0x19, 0x51, 0x0e, 0xc5, 0x95, 0x16,
	0x51, 0x17, 0x67, 0x44, 0xfe, 0x05, 0x90, 0xe6, 0xb4, 0x21, 0x49, 0x68, 0xdc, 0x55, 0x8e, 0x38,
	0x71, 0xaf, 0x88, 0x3b, 0x3c, 0xcc, 0xa8, 0xa3, 0x28, 0xcd, 0x70, 0x9f, 0x46, 0xbd, 0x19, 0x55,
	0x11, 0xd4, 0x22, 0x9e, 0x53, 0xd9, 0xce, 0xe0, 0x31, 0xea, 0x92, 0x01, 0xe9, 0x89, 0x9d, 0x79,
	0x94, 0xef, 0x0c, 0x1e, 0xd7, 0x8b, 0x20, 0x9b, 0x0c, 0xbb, 0xe3, 0x9c, 0xc6, 0x3b, 0x18, 0xa5,
	0x97, 0xf1, 0x28, 0x53, 0xd4, 0xe2, 0xd1, 0xd7, 0x0b, 0xd0, 0x11, 0x98, 0xfc, 0x2b, 0x20, 0x33,
	0x55, 0x67, 0x94, 0x66, 0x71, 0xf7, 0x1a, 0x25, 0xe4, 0x03, 0x4e, 0xba, 0xca, 0x31, 0x57, 0x48,
	0x21, 0x8d, 0x6a, 0x02, 0x70, 0x79, 0x9c, 0x3b, 0x0b, 0x1e, 0x17, 0xec, 0xf6, 0xe8, 0xe2, 0x82,
	0x24, 0x28, 0xa5, 0xdf, 0x13, 0xe5, 0x71, 0x5e, 0x04, 0x8f, 0x73, 0x49, 0x95, 0x83, 0x1e, 0xfd,
	0x9e, 0xc8, 0x2f, 0xc1, 0xc1, 0xa2, 0x2c, 0x1b, 0x0b, 0xc9, 0x93, 0xbc, 0x4a, 0x21, 0xf1, 0xc7,
	0x8c, 0xfe, 0xcb, 0x7f, 0x6c, 0x81, 0xbd, 0x15, 0xdf, 0x67, 0x2e, 0x6c, 0x1a, 0x16, 0xf2, 0xdf,
	0xa1, 0x06, 0x84, 0xd2, 0x1d, 0x75, 0x7b, 0x32, 0xd5, 0x36, 0xcd, 0x05, 0x8f, 0x36, 0xf5, 0x77,
	0x33, 0xb4, 0x94, 0xa3, 0x0b, 0x1e, 0x7d, 0x6e, 0xfb, 0x10, 0xbd, 0x09, 0x6c, 0x37, 0x30, 0xa5,
	0xbb, 0xea, 0xee, 0x64, 0xaa, 0x81, 0xf3, 0x25, 0x8f, 0x36, 0x0d, 0xcb, 0x30, 0x03, 0x13, 0x39,
	0xae, 0xed, 0xd8, 0x9e, 0xde, 0x42, 0xd0, 0xaa, 0x23, 0xdf, 0x30, 0xa1, 0xf4, 0x85, 0xaa, 0x4e,
	0xa6, 0xda, 0xa1, 0x79, 0xab, 0x47, 0x2f, 0x48, 0xf4, 0x9a, 0x6f, 0x42, 0xcb, 0x17, 0xc2, 0x0d,
	0xf5, 0xd1, 0x64, 0xaa, 0x3d, 0x74, 0x6e, 0xf3, 0x68, 0x76, 0x9e, 0xa5, 0x72, 0xd5, 0x96, 0x5d,
	0x6b, 0x7a, 0xd2, 0x3d, 0x55, 0x99, 0x4c, 0xb5, 0xb2, 0x79, 0x8b, 0x47, 0xaf, 0xc8, 0x66, 0x25,
	0x73, 0xf1, 0x7d, 0xb5, 0x32, 0x99, 0x6a, 0xaa, 0xf9, 0x59, 0x8f, 0x86, 0x96, 0x5e, 0x6d, 0x41,
	0xd4, 0xb0, 0x5d, 0x68, 0xbc, 0xb6, 0xd8, 0x9d, 0x21, 0x47, 0x7f, 0xcf, 0xd2, 0x78, 0xd2, 0x97,
	0xea, 0xe3, 0xc9, 0x54, 0x53, 0xe0, 0x67, 0x3c, 0xda, 0x34, 0xbc, 0xda, 0x99, 0x6e, 0xd5, 0x20,
	0x72, 0x75, 0xab, 0x89, 0xea, 0xb0, 0xe6, 0x42, 0xdd, 0x83, 0x48, 0x37, 0xed, 0xc0, 0xf2, 0xa5,
	0x4d, 0xf5, 0xe9, 0x64, 0xaa, 0x1d, 0x9b, 0x9f, 0xf7, 0x68, 0x36, 0xaf, 0x22, 0x91, 0xf4, 0x40,
	0x95, 0x26, 0x53, 0x6d, 0xdb, 0x5c, 0xf1, 0xe8, 0x79, 0xa5, 0x9a, 0x6d, 0x35, 0x8c, 0x3a, 0x64,
	0x5c, 0xa0, 0x1e, 0x4d, 0xa6, 0xda, 0x81, 0x79, 0xb3, 0x47, 0x1b, 0xec, 0x46, 0x8c, 0xf3, 0xd5,
	0xde, 0x1c, 0xe8, 0xd6, 0xa0, 0xe5, 0x4b, 0x5b, 0xa2, 0x39, 0xe3, 0x33, 0x1e, 0xfd, 0x0a, 0xa8,
	0x8e, 0x6d, 0xbb, 0xc8, 0x82, 0xfe, 0x5b, 0xdb, 0x6d, 0x22, 0xd6, 0x69, 0x95, 0x25, 0xf3, 0xa0,
	0x55, 0x97, 0xb6, 0xc5, 0x3a, 0x38, 0x37, 0x9b, 0xef, 0x73, 0xb0, 0xcb, 0xe6, 0x73, 0xae, 0xb7,
	0x8c, 0xba, 0xee, 0xdb, 0xae, 0x27, 0xed, 0xa8, 0xfb, 0x93, 0xa9, 0xb6, 0x63, 0x2e, 0xf9, 0xfb,
	0x57, 0x60, 0x2f, 0xb0, 0xbe, 0xd1, 0x8d, 0x16, 0x4f, 0xce, 0xb7, 0x65, 0x57, 0xf0, 0x82, 0x55,
	0x8f, 0xce, 0x67, 0xe5, 0xdb, 0x4d, 0x68, 0xa1, 0xb7, 0x67, 0x86, 0x0f, 0x5b, 0x86, 0xe7, 0x4b,
	0x7b, 0x62, 0x49, 0xe0, 0x2d, 0x1e, 0xbd, 0xa4, 0xaa, 0xb6, 0xf4, 0x5a, 0x93, 0xab, 0xa4, 0x35,
	0xd5, 0x92, 0x47, 0xb3, 0xd6, 0xd9, 0x25, 0xfb, 0x86, 0xff, 0x1e, 0xe9, 0x8e, 0xe3, 0xda, 0xe7,
	0x7a, 0x0b, 0xf9, 0x86, 0x23, 0xed, 0x17, 0x8f, 0xe0, 0x16, 0x8f, 0x0e, 0x2c, 0xe3, 0x4d, 0x00,
	0xe7, 0xea, 0x26, 0x7c, 0xef, 0x49, 0xb2, 0x7a, 0x38, 0x99, 0x6a, 0x72, 0x70, 0xa3, 0x47, 0x07,
	0x55, 0x03, 0x9d, 0xe9, 0x6e, 0xbd, 0xa6, 0x3b, 0xd2, 0x81, 0x78, 0x92, 0xc1, 0x92, 0x47, 0xcf,
	0x2f, 0x91, 0x6f, 0xa8, 0x77, 0xa6, 0xbb, 0x50, 0x2a, 0x8b, 0x94, 0xe7, 0x37, 0x7a, 0xb4, 0x61,
	0x35, 0x5a, 0xba, 0x6f, 0xd8, 0x16, 0x72, 0x75, 0x1f, 0x4a, 0x0f, 0xc5, 0x95, 0x1a, 0xab, 0x1e,
	0x3d, 0xa7, 0x39, 0xd0, 0x35, 0xec, 0xba, 0x74, 0xa8, 0x1e, 0x4c, 0xa6, 0xda, 0x9e, 0xb1, 0xee,
	0xd1, 0x81, 0xe5, 0xf9, 0x7a, 0xd3, 0xb0, 0x5e, 0xcf, 0xa8, 0x47, 0x82, 0x1a, 0xac, 0x7b, 0x34,
	0x9b, 0x64, 0x1d, 0xb6, 0xe0, 0x6b, 0x31, 0xf7, 0x47, 0xf9, 0xdc, 0x57, 0x3d, 0x9a, 0xdd, 0x71,
	0x4e, 0xe3, 0x1d, 0x04, 0xde, 0x99, 0x1d, 0xf8, 0x92, 0x5a, 0x3c, 0xfa, 0x1b, 0x3d, 0x9a, 0xa9,
	0x6a, 0x81, 0xe7, 0xdb, 0xf5, 0xf7, 0xc8, 0x85, 0x6f, 0x75, 0xb7, 0x2e, 0x1d, 0xab, 0xe5, 0xc9,
	0x54, 0x93, 0xcc, 0x1b, 0x3c, 0x9a, 0xb5, 0x32, 0x63, 0x57, 0x83, 0x46, 0x03, 0xba, 0xc8, 0x33,
	0xbe, 0x85, 0xd2, 0xe3, 0xbc, 0xc8, 0x2d, 0x1e, 0xbd, 0x28, 0xf3, 0xdf, 0x09, 0xc9, 0x93, 0xbc,
	0xca, 0x8a, 0x47, 0xab, 0x1b, 0x7f, 0xfd, 0xa1, 0x72, 0xa7, 0xfa, 0xe7, 0x7f, 0x7d, 0xac, 0x94,
	0x7e, 0xfc, 0x58, 0x29, 0xfd, 0xf7, 0x63, 0xa5, 0xf4, 0xb7, 0x4f, 0x95, 0x3b, 0x3f, 0x7e, 0xaa,
	0xdc, 0xf9, 0xf7, 0xa7, 0xca, 0x9d, 0x6f, 0x9f, 0x2f, 0x7c, 0xe7, 0x6f, 0xd2, 0x04, 0xd7, 0xe2,
	0x84, 0x9c, 0xa6, 0xa4, 0x8f, 0xe9, 0xe9, 0x98, 0xff, 0x96, 0xe1, 0x5f, 0xfb, 0xdb, 0xf7, 0xf9,
	0xef, 0x93, 0xdf, 0xfe, 0x14, 0x00, 0x00, 0xff, 0xff, 0x56, 0x9e, 0x7f, 0x41, 0xe4, 0x0c, 0x00,
	0x00,
=======
	// 1566 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x57, 0xdd, 0x6e, 0xdb, 0xc8,
	0x15, 0xb6, 0xb2, 0x4e, 0xd6, 0x19, 0xff, 0xd1, 0xb4, 0x6c, 0x33, 0x74, 0xa2, 0xb0, 0x29, 0xb2,
	0x4d, 0x0b, 0xac, 0xdd, 0xdd, 0xfe, 0x00, 0x0d, 0x50, 0x14, 0x94, 0x34, 0x8e, 0x19, 0x89, 0x3f,
	0x21, 0x29, 0x65, 0xd3, 0x9b, 0xc1, 0x48, 0x9a, 0xc8, 0x53, 0x89, 0xa4, 0x96, 0xa4, 0xbc, 0xf2,
	0x1b, 0x14, 0xba, 0xea, 0x0b, 0x08, 0x28, 0xd0, 0x5e, 0xf4, 0x01, 0xfa, 0x10, 0xbd, 0xcc, 0x65,
	0xaf, 0x8a, 0x22, 0xb9, 0xe9, 0x33, 0xf4, 0x6a, 0x31, 0x33, 0x24, 0xf5, 0x67, 0xe7, 0xca, 0xf2,
	0xf9, 0xbe, 0xef, 0x9c, 0x33, 0x33, 0xe7, 0x7c, 0x90, 0xc0, 0x4f, 0x06, 0x34, 0xc6, 0xe7, 0xfd,
	0xe8, 0xfa, 0x3c, 0x24, 0xe9, 0x0f, 0x51, 0x3c, 0x40, 0xa3, 0x38, 0x1a, 0x91, 0x38, 0xa5, 0x24,
	0x39, 0x1b, 0xc5, 0x51, 0x1a, 0xc9, 0x5b, 0x8c, 0x72, 0xd6, 0x8f, 0xae, 0xd5, 0x72, 0x3f, 0xea,
	0x47, 0x3c, 0x78, 0xce, 0x3e, 0x09, 0xfc, 0xd9, 0x3f, 0x4b, 0xe0, 0xc4, 0x4c, 0xfa, 0x1e, 0x49,
	0x2d, 0x91, 0xc2, 0x29, 0x32, 0xc8, 0xaf, 0x81, 0xbc, 0x9e, 0x57, 0x29, 0x69, 0xa5, 0x17, 0xdb,
	0xdf, 0x9e, 0x9e, 0xe5, 0x89, 0xcf, 0xd6, 0x84, 0xee, 0x41, 0xb8, 0x96, 0xcb, 0x04, 0x5b, 0x2c,
	0x47, 0x94, 0x90, 0x58, 0xb9, 0xa7, 0x95, 0x5e, 0xec, 0x54, 0xbf, 0xf9, 0xff, 0x7f, 0x9e, 0x7e,
	0xdd, 0xa7, 0xe9, 0xd5, 0xb8, 0x73, 0xd6, 0x8d, 0x82, 0xf3, 0x6e, 0x94, 0x04, 0x51, 0x92, 0xfd,
	0xf9, 0x3a, 0xe9, 0x0d, 0xce, 0xd3, 0x9b, 0x11, 0x49, 0xce, 0xf4, 0x6e, 0x57, 0xef, 0xf5, 0x62,
	0x92, 0x24, 0x6e, 0x91, 0xe2, 0x99, 0x0d, 0xca, 0xcb, 0x65, 0x6f, 0xda, 0x78, 0x38, 0x26, 0x72,
	0x19, 0xdc, 0xbf, 0x66, 0x1f, 0x78, 0x97, 0x9b, 0xae, 0xf8, 0x47, 0x3e, 0x05, 0x0f, 0x93, 0x34,
	0x46, 0x02, 0x61, 0xd5, 0x1f, 0xba, 0x5b, 0x49, 0x1a, 0x73, 0xc9, 0xcb, 0xcd, 0xff, 0xfd, 0xf5,
	0x69, 0xe9, 0xd9, 0xdf, 0xb7, 0xc1, 0xc1, 0xfa, 0x0d, 0x3c, 0x06, 0x20, 0xa0, 0x21, 0x4a, 0x27,
	0xe8, 0x3d, 0xc9, 0x73, 0x6e, 0x05, 0x34, 0xf4, 0x27, 0x17, 0x84, 0x70, 0x14, 0x4f, 0x72, 0xf4,
	0x5e, 0x86, 0xe2, 0x89, 0x40, 0x9f, 0x82, 0xed, 0xeb, 0x28, 0x25, 0xe8, 0xfb, 0x71, 0x14, 0x8f,
	0x03, 0xe5, 0x0b, 0x0e, 0x03, 0x16, 0x7a, 0xc3, 0x23, 0xf2, 0xef, 0xc0, 0xa3, 0x80, 0x86, 0x34,
	0x18, 0x07, 0x48, 0x9c, 0x0b, 0x0f, 0x11, 0x09, 0x7b, 0x28, 0xa5, 0x01, 0x51, 0x36, 0x39, 0xfd,
	0x38, 0x23, 0x38, 0x19, 0x0e, 0xc3, 0x9e, 0x4f, 0x03, 0x22, 0xff, 0x16, 0x9c, 0x2c, 0x48, 0x70,
	0x37, 0x0d, 0x48, 0x98, 0x0a, 0xe1, 0x7d, 0x2e, 0x3c, 0x1a, 0x15, 0x8a, 0x0c, 0xe5, 0xba, 0xdf,
	0x80, 0x13, 0x76, 0x9e, 0xa5, 0x72, 0x9d, 0x61, 0xd4, 0x1d, 0x24, 0xca, 0x03, 0xae, 0x2b, 0x07,
	0x34, 0x5c, 0x28, 0x56, 0xe5, 0x98, 0xac, 0x83, 0x27, 0x2b, 0xb2, 0xbc, 0x64, 0x26, 0xfe, 0x92,
	0x8b, 0xd5, 0x25, 0x71, 0x46, 0xc9, 0x52, 0xfc, 0x1e, 0x9c, 0x92, 0x10, 0x77, 0x86, 0x04, 0xbd,
	0x8f, 0x62, 0x42, 0xfb, 0x21, 0xbb, 0x33, 0x34, 0xc2, 0x37, 0x8c, 0x93, 0x28, 0x5b, 0x5a, 0xe9,
	0xc5, 0x96, 0xab, 0x08, 0xca, 0x85, 0x60, 0x5c, 0x10, 0xe2, 0x64, 0xb8, 0x5c, 0x03, 0x95, 0x80,
	0x26, 0xdd, 0x2b, 0x1c, 0x76, 0x09, 0x8a, 0x71, 0x38, 0x40, 0x3d, 0xd2, 0x8d, 0x09, 0x4e, 0x08,
	0xc2, 0x41, 0x34, 0x0e, 0x53, 0xe5, 0x21, 0x6f, 0xe1, 0xb4, 0x60, 0xb9, 0x38, 0x1c, 0xd4, 0x33,
	0x8e, 0xce, 0x29, 0xf2, 0x4f, 0xc1, 0x2e, 0x7b, 0xaf, 0x82, 0xa2, 0x00, 0xae, 0xd9, 0x09, 0xf0,
	0xc4, 0xcc, 0x63, 0xf2, 0x37, 0xa0, 0x3c, 0xaf, 0xd4, 0x8d, 0xc2, 0xf7, 0xb4, 0x47, 0x18, 0x77,
	0x9b, 0x73, 0x0f, 0x0b, 0xac, 0x56, 0x40, 0xac, 0x39, 0xca, 0x8e, 0x4b, 0xaf, 0x57, 0x7b, 0x1b,
	0x91, 0xb8, 0x4b, 0xc2, 0x54, 0xd9, 0x11, 0xcd, 0xe5, 0xac, 0xc5, 0xde, 0x1c, 0x41, 0x91, 0x9f,
	0x83, 0x3d, 0x76, 0xc7, 0xd7, 0x78, 0x48, 0x7b, 0x38, 0x8d, 0xe2, 0x44, 0xd9, 0xe5, 0xa2, 0xdd,
	0x80, 0x86, 0xed, 0x22, 0x28, 0xbf, 0x04, 0xea, 0x28, 0x8a, 0x62, 0x94, 0x2f, 0x26, 0x3b, 0x50,
	0x87, 0xd5, 0x4c, 0x48, 0xd8, 0x53, 0xf6, 0xc4, 0xd4, 0x30, 0x46, 0x36, 0xcc, 0x26, 0x9e, 0x54,
	0x71, 0x38, 0xf0, 0x48, 0xd8, 0x93, 0xbf, 0x02, 0xfb, 0xe3, 0xf0, 0x4f, 0x98, 0x0e, 0xb9, 0x8a,
	0x4f, 0xcb, 0xbe, 0xa8, 0x21, 0xc2, 0x26, 0x9e, 0xf0, 0x29, 0xf9, 0x35, 0x38, 0xce, 0xde, 0x2a,
	0x8d, 0x06, 0x24, 0x44, 0x3f, 0x5c, 0xd1, 0x94, 0x0c, 0x69, 0x92, 0x2a, 0x12, 0x7f, 0xa6, 0xb2,
	0x40, 0x7d, 0x06, 0xbe, 0xcd, 0xb1, 0x35, 0x55, 0x67, 0x88, 0xbb, 0x03, 0xae, 0x3a, 0x58, 0x53,
	0x55, 0x73, 0x2c, 0x5b, 0x02, 0xc4, 0x6e, 0x32, 0xa5, 0xe9, 0x0d, 0xc2, 0xa3, 0x51, 0x1c, 0x5d,
	0xe3, 0x21, 0x4a, 0xe9, 0x48, 0x91, 0x8b, 0x25, 0x30, 0x32, 0x5c, 0xcf, 0x60, 0x9f, 0x8e, 0xe4,
	0x5f, 0x82, 0xf2, 0x38, 0xa4, 0xdf, 0x8f, 0xc9, 0x5c, 0x3d, 0x20, 0x37, 0x89, 0x72, 0xc8, 0x17,
	0x5c, 0x16, 0x58, 0x2e, 0x6c, 0x90, 0x9b, 0x84, 0xad, 0xe4, 0xb8, 0x43, 0xd1, 0x15, 0x8e, 0x7b,
	0x5d, 0x3c, 0x52, 0xca, 0x62, 0x25, 0xc7, 0x1d, 0x7a, 0x29, 0x22, 0x2c, 0xe5, 0xfc, 0x01, 0xf8,
	0x84, 0x26, 0x57, 0x38, 0x26, 0xca, 0x11, 0x67, 0xca, 0x73, 0xec, 0x82, 0x10, 0x8f, 0x21, 0xec,
	0xd9, 0x68, 0xf8, 0x7e, 0x88, 0x53, 0x1a, 0x85, 0x28, 0xc6, 0x29, 0x51, 0x8e, 0xc5, 0x95, 0x16,
	0x51, 0x17, 0xa7, 0x44, 0xfe, 0x39, 0x90, 0xe6, 0xb4, 0x11, 0x89, 0x69, 0xd4, 0x53, 0x4e, 0x38,
	0x71, 0xbf, 0x88, 0x3b, 0x3c, 0xcc, 0xa8, 0xe3, 0x30, 0x49, 0xf1, 0x80, 0x86, 0xfd, 0x9c, 0xaa,
	0x08, 0x6a, 0x11, 0xcf, 0xa8, 0x6c, 0x66, 0xf0, 0x04, 0xf5, 0xc8, 0x90, 0xf4, 0xc5, 0xcc, 0x3c,
	0xca, 0x66, 0x06, 0x4f, 0xea, 0x45, 0x90, 0xbd, 0x0c, 0xbb, 0xe3, 0x8c, 0xc6, 0x3b, 0x18, 0x27,
	0x57, 0xd1, 0x38, 0x55, 0xd4, 0x62, 0xe9, 0xeb, 0x05, 0xe8, 0x08, 0x4c, 0xfe, 0x19, 0xd8, 0x4f,
	0x86, 0x38, 0xb9, 0x5a, 0x68, 0xe3, 0x94, 0xd3, 0xf7, 0xf2, 0x70, 0xd6, 0xc5, 0xb7, 0xe0, 0x88,
	0x75, 0xc1, 0x26, 0x88, 0xf4, 0xf2, 0x91, 0xc7, 0x7d, 0xa2, 0x3c, 0xce, 0x56, 0x06, 0x4f, 0x5e,
	0x73, 0xcc, 0x29, 0x20, 0x66, 0x60, 0x4c, 0xb3, 0x58, 0x20, 0x57, 0x3d, 0x11, 0x06, 0x16, 0xe0,
	0x89, 0x37, 0xaf, 0x93, 0x81, 0xbf, 0xf8, 0xc7, 0x36, 0xd8, 0x5f, 0x31, 0x7e, 0x66, 0xc3, 0xa6,
	0x61, 0x21, 0xff, 0x3b, 0x74, 0x01, 0xa1, 0xb4, 0xa1, 0xee, 0x4c, 0x67, 0xda, 0x96, 0xb9, 0x60,
	0xd2, 0xa6, 0xfe, 0x5d, 0x8e, 0x96, 0x32, 0x74, 0xc1, 0xa4, 0xdb, 0xb6, 0x0f, 0xd1, 0x9b, 0x96,
	0xed, 0xb6, 0x4c, 0xe9, 0x9e, 0xba, 0x37, 0x9d, 0x69, 0xa0, 0xbd, 0x64, 0xd2, 0xa6, 0x61, 0x19,
	0x66, 0xcb, 0x44, 0x8e, 0x6b, 0x3b, 0xb6, 0xa7, 0x37, 0x11, 0xb4, 0xea, 0xc8, 0x37, 0x4c, 0x28,
	0x7d, 0xa1, 0xaa, 0xd3, 0x99, 0x76, 0x6c, 0xde, 0x69, 0xd2, 0x0b, 0x12, 0xbd, 0xe6, 0x9b, 0xd0,
	0xf2, 0x85, 0x70, 0x53, 0x7d, 0x34, 0x9d, 0x69, 0x47, 0xce, 0x5d, 0x26, 0xcd, 0xce, 0xb3, 0x54,
	0xae, 0xda, 0xb4, 0x6b, 0x0d, 0x4f, 0xba, 0xaf, 0x2a, 0xd3, 0x99, 0x56, 0x36, 0xef, 0x30, 0xe9,
	0x15, 0x59, 0x5e, 0x32, 0x13, 0x3f, 0x50, 0x2b, 0xd3, 0x99, 0xa6, 0x9a, 0x9f, 0x35, 0x69, 0x68,
	0xe9, 0xd5, 0x26, 0x44, 0x17, 0xb6, 0x0b, 0x8d, 0x57, 0x16, 0xbb, 0x33, 0xe4, 0xe8, 0xef, 0x58,
	0x1a, 0x4f, 0xfa, 0x52, 0x7d, 0x3c, 0x9d, 0x69, 0x0a, 0xfc, 0x8c, 0x49, 0x9b, 0x86, 0x57, 0xbb,
	0xd4, 0xad, 0x1a, 0x44, 0xae, 0x6e, 0x35, 0x50, 0x1d, 0xd6, 0x5c, 0xa8, 0x7b, 0x10, 0xe9, 0xa6,
	0xdd, 0xb2, 0x7c, 0x69, 0x4b, 0x7d, 0x3a, 0x9d, 0x69, 0xa7, 0xe6, 0xe7, 0x4d, 0x9a, 0xbd, 0x57,
	0x91, 0x48, 0x7a, 0xa8, 0x4a, 0xd3, 0x99, 0xb6, 0x63, 0xae, 0x98, 0xf4, 0xbc, 0x52, 0xcd, 0xb6,
	0x2e, 0x8c, 0x3a, 0x64, 0x5c, 0xa0, 0x9e, 0x4c, 0x67, 0xda, 0xa1, 0x79, 0xbb, 0x49, 0x1b, 0xec,
	0x46, 0x8c, 0xf6, 0x6a, 0x6f, 0x0e, 0x74, 0x6b, 0xd0, 0xf2, 0xa5, 0x6d, 0xd1, 0x9c, 0xf1, 0x19,
	0x93, 0x7e, 0x09, 0x54, 0xc7, 0xb6, 0x5d, 0x64, 0x41, 0xff, 0xad, 0xed, 0x36, 0x10, 0xeb, 0xb4,
	0xca, 0x92, 0x79, 0xd0, 0xaa, 0x4b, 0x3b, 0x62, 0x1c, 0x9c, 0xdb, 0xdd, 0xf7, 0x39, 0xd8, 0x63,
	0xef, 0xd3, 0xd6, 0x9b, 0x46, 0x5d, 0xf7, 0x6d, 0xd7, 0x93, 0x76, 0xd5, 0x83, 0xe9, 0x4c, 0xdb,
	0x35, 0x97, 0x0c, 0xfe, 0x2b, 0xb0, 0xdf, 0xb2, 0x5e, 0xeb, 0x46, 0x93, 0x27, 0xe7, 0xd3, 0xb2,
	0x27, 0x78, 0xad, 0x55, 0x93, 0xce, 0xde, 0xca, 0xb7, 0x1b, 0xd0, 0x42, 0x6f, 0x2f, 0x0d, 0x1f,
	0x36, 0x0d, 0xcf, 0x97, 0xf6, 0xc5, 0x90, 0xc0, 0x3b, 0x4c, 0x7a, 0x49, 0x55, 0x6d, 0xea, 0xb5,
	0x06, 0x57, 0x49, 0x6b, 0xaa, 0x25, 0x93, 0x66, 0xad, 0xb3, 0x4b, 0xf6, 0x0d, 0xff, 0x1d, 0xd2,
	0x1d, 0xc7, 0xb5, 0xdb, 0x7a, 0x13, 0xf9, 0x86, 0x23, 0x1d, 0x14, 0x4b, 0x70, 0x87, 0x49, 0xb7,
	0x2c, 0xe3, 0x4d, 0x0b, 0xce, 0xd5, 0x0d, 0xf8, 0xce, 0x93, 0x64, 0xf5, 0x78, 0x3a, 0xd3, 0xe4,
	0xd6, 0xad, 0x26, 0xdd, 0xaa, 0x1a, 0xe8, 0x52, 0x77, 0xeb, 0x35, 0xdd, 0x91, 0x0e, 0xc5, 0x4a,
	0xb6, 0x96, 0x4c, 0x7a, 0x7e, 0x89, 0x7c, 0x42, 0xbd, 0x4b, 0xdd, 0x85, 0x52, 0x59, 0xa4, 0x6c,
	0xdf, 0x6a, 0xd2, 0x86, 0x75, 0xd1, 0xd4, 0x7d, 0xc3, 0xb6, 0x90, 0xab, 0xfb, 0x50, 0x3a, 0x12,
	0x57, 0x6a, 0xac, 0x9a, 0xf4, 0x9c, 0xe6, 0x40, 0xd7, 0xb0, 0xeb, 0xd2, 0xb1, 0x7a, 0x38, 0x9d,
	0x69, 0xfb, 0xc6, 0xba, 0x49, 0xb7, 0x2c, 0xcf, 0xd7, 0x1b, 0x86, 0xf5, 0x2a, 0xa7, 0x9e, 0x08,
	0x6a, 0x6b, 0xdd, 0xa4, 0xd9, 0x4b, 0xd6, 0x61, 0x13, 0xbe, 0x12, 0xef, 0xfe, 0x28, 0x7b, 0xf7,
	0x55, 0x93, 0x66, 0x77, 0x9c, 0xd1, 0x78, 0x07, 0x2d, 0xef, 0xd2, 0x6e, 0xf9, 0x92, 0x5a, 0x2c,
	0xfd, 0xad, 0x26, 0xed, 0x35, 0x75, 0xef, 0x72, 0xa1, 0x8d, 0x53, 0x55, 0x9e, 0xce, 0xb4, 0x3d,
	0x6f, 0xcd, 0xa4, 0x59, 0x17, 0x6c, 0xb0, 0x60, 0x3d, 0x1f, 0x79, 0xfd, 0x15, 0x94, 0x1e, 0x67,
	0x2b, 0x73, 0xbb, 0x49, 0x33, 0xcd, 0x62, 0x81, 0x5c, 0xf5, 0x44, 0x18, 0x98, 0x79, 0x9b, 0x49,
	0xab, 0x9b, 0x7f, 0xfe, 0x5b, 0x65, 0xa3, 0xfa, 0x87, 0x7f, 0x7d, 0xac, 0x94, 0x3e, 0x7c, 0xac,
	0x94, 0xfe, 0xfb, 0xb1, 0x52, 0xfa, 0xcb, 0xa7, 0xca, 0xc6, 0x87, 0x4f, 0x95, 0x8d, 0x7f, 0x7f,
	0xaa, 0x6c, 0xfc, 0xf1, 0xf9, 0xc2, 0xb7, 0xfe, 0x06, 0x8d, 0x71, 0x2d, 0x8a, 0xc9, 0x79, 0x42,
	0x06, 0x98, 0x9e, 0x4f, 0xf8, 0xaf, 0x19, 0xfe, 0xc5, 0xbf, 0xf3, 0x80, 0xff, 0x42, 0xf9, 0xd5,
	0x8f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x29, 0xf4, 0x5a, 0xe6, 0x0c, 0x00, 0x00,
>>>>>>> latest
}

func (this *NetworkPropertyValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NetworkPropertyValue)
	if !ok {
		that2, ok := that.(NetworkPropertyValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.StrValue != that1.StrValue {
		return false
	}
	return true
}
func (m *MsgSetNetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.NetworkProperties != nil {
		{
			size, err := m.NetworkProperties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNetworkProperties(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetworkPropertyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkPropertyValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkPropertyValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrValue) > 0 {
		i -= len(m.StrValue)
		copy(dAtA[i:], m.StrValue)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.StrValue)))
		i--
		dAtA[i] = 0x12
	}
	if m.Value != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NetworkProperties) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetworkProperties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetworkProperties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
<<<<<<< HEAD
	if m.MaxCustodyTxSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyTxSize))
=======
	if m.MaxSlashingPercentage != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxSlashingPercentage))
>>>>>>> latest
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
<<<<<<< HEAD
	if m.MaxCustodyBufferSize != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxCustodyBufferSize))
=======
	if m.MaxJailedPercentage != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxJailedPercentage))
>>>>>>> latest
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
<<<<<<< HEAD
	if m.MinCustodyReward != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinCustodyReward))
=======
	if m.SlashingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.SlashingPeriod))
>>>>>>> latest
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.MinDelegationPushout != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinDelegationPushout))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.MaxDelegators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxDelegators))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.UnstakingPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnstakingPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.InflationPeriod != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.InflationPeriod))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.InflationRate != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.InflationRate))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.ValidatorsFeeShare != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.ValidatorsFeeShare))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.UbiHardcap != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UbiHardcap))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.UniqueIdentityKeys) > 0 {
		i -= len(m.UniqueIdentityKeys)
		copy(dAtA[i:], m.UniqueIdentityKeys)
		i = encodeVarintNetworkProperties(dAtA, i, uint64(len(m.UniqueIdentityKeys)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.MinIdentityApprovalTip != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinIdentityApprovalTip))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.EnableTokenBlacklist {
		i--
		if m.EnableTokenBlacklist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.EnableTokenWhitelist {
		i--
		if m.EnableTokenWhitelist {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.UnjailMaxTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.UnjailMaxTime))
		i--
		dAtA[i] = 0x78
	}
	if m.PoorNetworkMaxBankSend != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.PoorNetworkMaxBankSend))
		i--
		dAtA[i] = 0x70
	}
	if m.MinValidators != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinValidators))
		i--
		dAtA[i] = 0x68
	}
	if m.InactiveRankDecreasePercent != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.InactiveRankDecreasePercent))
		i--
		dAtA[i] = 0x60
	}
	if m.MischanceConfidence != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceConfidence))
		i--
		dAtA[i] = 0x58
	}
	if m.MaxMischance != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxMischance))
		i--
		dAtA[i] = 0x50
	}
	if m.MischanceRankDecreaseAmount != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MischanceRankDecreaseAmount))
		i--
		dAtA[i] = 0x48
	}
	if m.EnableForeignFeePayments {
		i--
		if m.EnableForeignFeePayments {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.MinProposalEnactmentBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEnactmentBlocks))
		i--
		dAtA[i] = 0x38
	}
	if m.MinProposalEndBlocks != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinProposalEndBlocks))
		i--
		dAtA[i] = 0x30
	}
	if m.ProposalEnactmentTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.ProposalEnactmentTime))
		i--
		dAtA[i] = 0x28
	}
	if m.MinimumProposalEndTime != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinimumProposalEndTime))
		i--
		dAtA[i] = 0x20
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MaxTxFee))
		i--
		dAtA[i] = 0x10
	}
	if m.MinTxFee != 0 {
		i = encodeVarintNetworkProperties(dAtA, i, uint64(m.MinTxFee))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNetworkProperties(dAtA []byte, offset int, v uint64) int {
	offset -= sovNetworkProperties(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetNetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NetworkProperties != nil {
		l = m.NetworkProperties.Size()
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkPropertyValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNetworkProperties(uint64(m.Value))
	}
	l = len(m.StrValue)
	if l > 0 {
		n += 1 + l + sovNetworkProperties(uint64(l))
	}
	return n
}

func (m *NetworkProperties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinTxFee))
	}
	if m.MaxTxFee != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxTxFee))
	}
	if m.VoteQuorum != 0 {
		n += 1 + sovNetworkProperties(uint64(m.VoteQuorum))
	}
	if m.MinimumProposalEndTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinimumProposalEndTime))
	}
	if m.ProposalEnactmentTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.ProposalEnactmentTime))
	}
	if m.MinProposalEndBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEndBlocks))
	}
	if m.MinProposalEnactmentBlocks != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinProposalEnactmentBlocks))
	}
	if m.EnableForeignFeePayments {
		n += 2
	}
	if m.MischanceRankDecreaseAmount != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceRankDecreaseAmount))
	}
	if m.MaxMischance != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MaxMischance))
	}
	if m.MischanceConfidence != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MischanceConfidence))
	}
	if m.InactiveRankDecreasePercent != 0 {
		n += 1 + sovNetworkProperties(uint64(m.InactiveRankDecreasePercent))
	}
	if m.MinValidators != 0 {
		n += 1 + sovNetworkProperties(uint64(m.MinValidators))
	}
	if m.PoorNetworkMaxBankSend != 0 {
		n += 1 + sovNetworkProperties(uint64(m.PoorNetworkMaxBankSend))
	}
	if m.UnjailMaxTime != 0 {
		n += 1 + sovNetworkProperties(uint64(m.UnjailMaxTime))
	}
	if m.EnableTokenWhitelist {
		n += 3
	}
	if m.EnableTokenBlacklist {
		n += 3
	}
	if m.MinIdentityApprovalTip != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinIdentityApprovalTip))
	}
	l = len(m.UniqueIdentityKeys)
	if l > 0 {
		n += 2 + l + sovNetworkProperties(uint64(l))
	}
	if m.UbiHardcap != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UbiHardcap))
	}
	if m.ValidatorsFeeShare != 0 {
		n += 2 + sovNetworkProperties(uint64(m.ValidatorsFeeShare))
	}
	if m.InflationRate != 0 {
		n += 2 + sovNetworkProperties(uint64(m.InflationRate))
	}
	if m.InflationPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.InflationPeriod))
	}
	if m.UnstakingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.UnstakingPeriod))
	}
	if m.MaxDelegators != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxDelegators))
	}
	if m.MinDelegationPushout != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinDelegationPushout))
	}
<<<<<<< HEAD
	if m.MinCustodyReward != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MinCustodyReward))
	}
	if m.MaxCustodyBufferSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyBufferSize))
	}
	if m.MaxCustodyTxSize != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxCustodyTxSize))
=======
	if m.SlashingPeriod != 0 {
		n += 2 + sovNetworkProperties(uint64(m.SlashingPeriod))
	}
	if m.MaxJailedPercentage != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxJailedPercentage))
	}
	if m.MaxSlashingPercentage != 0 {
		n += 2 + sovNetworkProperties(uint64(m.MaxSlashingPercentage))
>>>>>>> latest
	}
	return n
}

func sovNetworkProperties(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNetworkProperties(x uint64) (n int) {
	return sovNetworkProperties(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetNetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkProperties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NetworkProperties == nil {
				m.NetworkProperties = &NetworkProperties{}
			}
			if err := m.NetworkProperties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = append(m.Proposer[:0], dAtA[iNdEx:postIndex]...)
			if m.Proposer == nil {
				m.Proposer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkPropertyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkPropertyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkPropertyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetworkProperties) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetworkProperties: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetworkProperties: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinTxFee", wireType)
			}
			m.MinTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTxFee", wireType)
			}
			m.MaxTxFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTxFee |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumProposalEndTime", wireType)
			}
			m.MinimumProposalEndTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinimumProposalEndTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalEnactmentTime", wireType)
			}
			m.ProposalEnactmentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalEnactmentTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEndBlocks", wireType)
			}
			m.MinProposalEndBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEndBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinProposalEnactmentBlocks", wireType)
			}
			m.MinProposalEnactmentBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinProposalEnactmentBlocks |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableForeignFeePayments", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableForeignFeePayments = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceRankDecreaseAmount", wireType)
			}
			m.MischanceRankDecreaseAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceRankDecreaseAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMischance", wireType)
			}
			m.MaxMischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMischance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MischanceConfidence", wireType)
			}
			m.MischanceConfidence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MischanceConfidence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveRankDecreasePercent", wireType)
			}
			m.InactiveRankDecreasePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InactiveRankDecreasePercent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinValidators", wireType)
			}
			m.MinValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinValidators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoorNetworkMaxBankSend", wireType)
			}
			m.PoorNetworkMaxBankSend = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoorNetworkMaxBankSend |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnjailMaxTime", wireType)
			}
			m.UnjailMaxTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnjailMaxTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenWhitelist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenWhitelist = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnableTokenBlacklist", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EnableTokenBlacklist = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIdentityApprovalTip", wireType)
			}
			m.MinIdentityApprovalTip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIdentityApprovalTip |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueIdentityKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueIdentityKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UbiHardcap", wireType)
			}
			m.UbiHardcap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UbiHardcap |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsFeeShare", wireType)
			}
			m.ValidatorsFeeShare = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorsFeeShare |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationRate", wireType)
			}
			m.InflationRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InflationRate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InflationPeriod", wireType)
			}
			m.InflationPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InflationPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakingPeriod", wireType)
			}
			m.UnstakingPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnstakingPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxDelegators", wireType)
			}
			m.MaxDelegators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxDelegators |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDelegationPushout", wireType)
			}
			m.MinDelegationPushout = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinDelegationPushout |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field MinCustodyReward", wireType)
			}
			m.MinCustodyReward = 0
=======
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingPeriod", wireType)
			}
			m.SlashingPeriod = 0
>>>>>>> latest
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				m.MinCustodyReward |= uint64(b&0x7F) << shift
=======
				m.SlashingPeriod |= uint64(b&0x7F) << shift
>>>>>>> latest
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyBufferSize", wireType)
			}
			m.MaxCustodyBufferSize = 0
=======
				return fmt.Errorf("proto: wrong wireType = %d for field MaxJailedPercentage", wireType)
			}
			m.MaxJailedPercentage = 0
>>>>>>> latest
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				m.MaxCustodyBufferSize |= uint64(b&0x7F) << shift
=======
				m.MaxJailedPercentage |= uint64(b&0x7F) << shift
>>>>>>> latest
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
<<<<<<< HEAD
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCustodyTxSize", wireType)
			}
			m.MaxCustodyTxSize = 0
=======
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSlashingPercentage", wireType)
			}
			m.MaxSlashingPercentage = 0
>>>>>>> latest
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
<<<<<<< HEAD
				m.MaxCustodyTxSize |= uint64(b&0x7F) << shift
=======
				m.MaxSlashingPercentage |= uint64(b&0x7F) << shift
>>>>>>> latest
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNetworkProperties(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNetworkProperties
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNetworkProperties(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNetworkProperties
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNetworkProperties
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNetworkProperties
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNetworkProperties
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNetworkProperties
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNetworkProperties        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNetworkProperties          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNetworkProperties = fmt.Errorf("proto: unexpected end of group")
)
