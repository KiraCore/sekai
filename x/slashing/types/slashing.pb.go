// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slashing.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorSigningInfo defines a validator's signing info for monitoring their
// liveness activity.
type ValidatorSigningInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// height at which validator was first a candidate OR was activated
	StartHeight int64 `protobuf:"varint,2,opt,name=start_height,json=startHeight,proto3" json:"start_height,omitempty" yaml:"start_height"`
	// timestamp validator cannot be activated until
	InactiveUntil time.Time `protobuf:"bytes,3,opt,name=inactive_until,json=inactiveUntil,proto3,stdtime" json:"inactive_until" yaml:"inactive_until"`
	// whether or not a validator has been tombstoned (killed out of validator
	// set)
	Tombstoned bool `protobuf:"varint,4,opt,name=tombstoned,proto3" json:"tombstoned,omitempty"`
	// missed blocks sequentially
	Mischance int64 `protobuf:"varint,5,opt,name=mischance,proto3" json:"mischance,omitempty"`
	// last signed block height by the validator
	LastPresentBlock int64 `protobuf:"varint,6,opt,name=last_present_block,json=lastPresentBlock,proto3" json:"last_present_block,omitempty"`
	// missed blocks counter (to avoid scanning the array every time)
	MissedBlocksCounter int64 `protobuf:"varint,7,opt,name=missed_blocks_counter,json=missedBlocksCounter,proto3" json:"missed_blocks_counter,omitempty"`
	// count produced blocks so far by a validator
	ProducedBlocksCounter int64 `protobuf:"varint,8,opt,name=produced_blocks_counter,json=producedBlocksCounter,proto3" json:"produced_blocks_counter,omitempty"`
}

func (m *ValidatorSigningInfo) Reset()      { *m = ValidatorSigningInfo{} }
func (*ValidatorSigningInfo) ProtoMessage() {}
func (*ValidatorSigningInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f622956ca78100, []int{0}
}
func (m *ValidatorSigningInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSigningInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSigningInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSigningInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSigningInfo.Merge(m, src)
}
func (m *ValidatorSigningInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSigningInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSigningInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSigningInfo proto.InternalMessageInfo

func (m *ValidatorSigningInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ValidatorSigningInfo) GetStartHeight() int64 {
	if m != nil {
		return m.StartHeight
	}
	return 0
}

func (m *ValidatorSigningInfo) GetInactiveUntil() time.Time {
	if m != nil {
		return m.InactiveUntil
	}
	return time.Time{}
}

func (m *ValidatorSigningInfo) GetTombstoned() bool {
	if m != nil {
		return m.Tombstoned
	}
	return false
}

func (m *ValidatorSigningInfo) GetMischance() int64 {
	if m != nil {
		return m.Mischance
	}
	return 0
}

func (m *ValidatorSigningInfo) GetLastPresentBlock() int64 {
	if m != nil {
		return m.LastPresentBlock
	}
	return 0
}

func (m *ValidatorSigningInfo) GetMissedBlocksCounter() int64 {
	if m != nil {
		return m.MissedBlocksCounter
	}
	return 0
}

func (m *ValidatorSigningInfo) GetProducedBlocksCounter() int64 {
	if m != nil {
		return m.ProducedBlocksCounter
	}
	return 0
}

// Params represents the parameters used for by the slashing module.
type Params struct {
	DowntimeInactiveDuration time.Duration `protobuf:"bytes,1,opt,name=downtime_inactive_duration,json=downtimeInactiveDuration,proto3,stdduration" json:"downtime_inactive_duration" yaml:"downtime_inactive_duration"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_31f622956ca78100, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDowntimeInactiveDuration() time.Duration {
	if m != nil {
		return m.DowntimeInactiveDuration
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidatorSigningInfo)(nil), "kira.slashing.ValidatorSigningInfo")
	proto.RegisterType((*Params)(nil), "kira.slashing.Params")
}

func init() { proto.RegisterFile("slashing.proto", fileDescriptor_31f622956ca78100) }

var fileDescriptor_31f622956ca78100 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x3f, 0x6f, 0xd3, 0x40,
	0x18, 0xc6, 0x7d, 0x14, 0xd2, 0xf4, 0x42, 0x2b, 0x74, 0x6d, 0x54, 0x13, 0x21, 0x3b, 0xf5, 0x14,
	0x21, 0xb0, 0xa5, 0x20, 0x31, 0x64, 0x4c, 0x19, 0x5a, 0xb1, 0x54, 0xe6, 0xcf, 0xc0, 0x62, 0x9d,
	0xed, 0xab, 0x7d, 0x8a, 0x7d, 0x67, 0xdd, 0x9d, 0x81, 0x7e, 0x01, 0xe6, 0xb2, 0x75, 0xec, 0xc8,
	0x07, 0xe0, 0x43, 0x74, 0xec, 0xc8, 0x14, 0x50, 0xb2, 0x30, 0xf7, 0x13, 0x20, 0x9f, 0x73, 0xa5,
	0xa5, 0x62, 0xf3, 0xfb, 0xfc, 0x9e, 0xf7, 0xd5, 0xa3, 0xc7, 0x07, 0xb7, 0x64, 0x81, 0x65, 0x4e,
	0x59, 0xe6, 0x57, 0x82, 0x2b, 0x8e, 0x36, 0x67, 0x54, 0x60, 0xdf, 0x88, 0x83, 0x9d, 0x8c, 0x67,
	0x5c, 0x93, 0xa0, 0xf9, 0x6a, 0x4d, 0x03, 0x27, 0xe3, 0x3c, 0x2b, 0x48, 0xa0, 0xa7, 0xb8, 0x3e,
	0x0e, 0xd2, 0x5a, 0x60, 0x45, 0x39, 0x5b, 0x71, 0xf7, 0x5f, 0xae, 0x68, 0x49, 0xa4, 0xc2, 0x65,
	0xd5, 0x1a, 0xbc, 0xef, 0x6b, 0x70, 0xe7, 0x3d, 0x2e, 0x68, 0x8a, 0x15, 0x17, 0x6f, 0x68, 0xc6,
	0x28, 0xcb, 0x0e, 0xd9, 0x31, 0x47, 0x36, 0x5c, 0xc7, 0x69, 0x2a, 0x88, 0x94, 0x36, 0x18, 0x82,
	0xd1, 0x46, 0x68, 0x46, 0x34, 0x81, 0x0f, 0xa5, 0xc2, 0x42, 0x45, 0x39, 0xa1, 0x59, 0xae, 0xec,
	0x7b, 0x43, 0x30, 0x5a, 0x9b, 0xee, 0x5e, 0xcd, 0xdd, 0xed, 0x13, 0x5c, 0x16, 0x13, 0xef, 0x26,
	0xf5, 0xc2, 0x9e, 0x1e, 0x0f, 0xf4, 0x84, 0x52, 0xb8, 0x45, 0x19, 0x4e, 0x14, 0xfd, 0x48, 0xa2,
	0x9a, 0x29, 0x5a, 0xd8, 0x6b, 0x43, 0x30, 0xea, 0x8d, 0x07, 0x7e, 0x1b, 0xd4, 0x37, 0x41, 0xfd,
	0xb7, 0x26, 0xe8, 0x74, 0xef, 0x62, 0xee, 0x5a, 0x57, 0x73, 0xb7, 0xdf, 0x5e, 0xbf, 0xbd, 0xef,
	0x9d, 0xfe, 0x74, 0x41, 0xb8, 0x69, 0xc4, 0x77, 0x8d, 0x86, 0x1c, 0x08, 0x15, 0x2f, 0x63, 0xa9,
	0x38, 0x23, 0xa9, 0x7d, 0x7f, 0x08, 0x46, 0xdd, 0xf0, 0x86, 0x82, 0x9e, 0xc0, 0x8d, 0x92, 0xca,
	0x24, 0xc7, 0x2c, 0x21, 0xf6, 0x83, 0x26, 0x7e, 0xf8, 0x57, 0x40, 0xcf, 0x20, 0x2a, 0xb0, 0x54,
	0x51, 0x25, 0x88, 0x24, 0x4c, 0x45, 0x71, 0xc1, 0x93, 0x99, 0xdd, 0xd1, 0xb6, 0x47, 0x0d, 0x39,
	0x6a, 0xc1, 0xb4, 0xd1, 0xd1, 0x18, 0xf6, 0x4b, 0x2a, 0x25, 0x49, 0x5b, 0x9f, 0x8c, 0x12, 0x5e,
	0x33, 0x45, 0x84, 0xbd, 0xae, 0x17, 0xb6, 0x5b, 0xa8, 0xbd, 0x72, 0xbf, 0x45, 0xe8, 0x25, 0xdc,
	0xad, 0x04, 0x4f, 0xeb, 0xe4, 0xee, 0x56, 0x57, 0x6f, 0xf5, 0x0d, 0xbe, 0xb5, 0x37, 0xe9, 0x9e,
	0x9d, 0xbb, 0xd6, 0xef, 0x73, 0x17, 0x78, 0x5f, 0x01, 0xec, 0x1c, 0x61, 0x81, 0x4b, 0x89, 0xbe,
	0x00, 0x38, 0x48, 0xf9, 0x27, 0xd6, 0xfc, 0xd9, 0xe8, 0xba, 0x1c, 0xf3, 0x0e, 0xf4, 0xcf, 0xeb,
	0x8d, 0x1f, 0xdf, 0xe9, 0xf7, 0xd5, 0xca, 0x30, 0x7d, 0xbe, 0xaa, 0x77, 0xaf, 0xad, 0xf7, 0xff,
	0xa7, 0xbc, 0xb3, 0xa6, 0x6a, 0xdb, 0x18, 0x0e, 0x57, 0xfc, 0xfa, 0xd0, 0xc1, 0xb7, 0x85, 0x03,
	0x2e, 0x16, 0x0e, 0xb8, 0x5c, 0x38, 0xe0, 0xd7, 0xc2, 0x01, 0xa7, 0x4b, 0xc7, 0xba, 0x5c, 0x3a,
	0xd6, 0x8f, 0xa5, 0x63, 0x7d, 0x78, 0x9a, 0x51, 0x95, 0xd7, 0xb1, 0x9f, 0xf0, 0x32, 0x78, 0x4d,
	0x05, 0xde, 0xe7, 0x82, 0x04, 0x92, 0xcc, 0x30, 0x0d, 0x3e, 0x07, 0xe6, 0x95, 0x07, 0xea, 0xa4,
	0x22, 0x32, 0xee, 0xe8, 0x94, 0x2f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xb1, 0x4c, 0x1b,
	0x13, 0x03, 0x00, 0x00,
}

func (this *ValidatorSigningInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorSigningInfo)
	if !ok {
		that2, ok := that.(ValidatorSigningInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.StartHeight != that1.StartHeight {
		return false
	}
	if !this.InactiveUntil.Equal(that1.InactiveUntil) {
		return false
	}
	if this.Tombstoned != that1.Tombstoned {
		return false
	}
	if this.Mischance != that1.Mischance {
		return false
	}
	if this.LastPresentBlock != that1.LastPresentBlock {
		return false
	}
	if this.MissedBlocksCounter != that1.MissedBlocksCounter {
		return false
	}
	if this.ProducedBlocksCounter != that1.ProducedBlocksCounter {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DowntimeInactiveDuration != that1.DowntimeInactiveDuration {
		return false
	}
	return true
}
func (m *ValidatorSigningInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSigningInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSigningInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProducedBlocksCounter != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.ProducedBlocksCounter))
		i--
		dAtA[i] = 0x40
	}
	if m.MissedBlocksCounter != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.MissedBlocksCounter))
		i--
		dAtA[i] = 0x38
	}
	if m.LastPresentBlock != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.LastPresentBlock))
		i--
		dAtA[i] = 0x30
	}
	if m.Mischance != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.Mischance))
		i--
		dAtA[i] = 0x28
	}
	if m.Tombstoned {
		i--
		if m.Tombstoned {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.InactiveUntil, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.InactiveUntil):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintSlashing(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if m.StartHeight != 0 {
		i = encodeVarintSlashing(dAtA, i, uint64(m.StartHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintSlashing(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.DowntimeInactiveDuration, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeInactiveDuration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintSlashing(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSlashing(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlashing(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorSigningInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovSlashing(uint64(l))
	}
	if m.StartHeight != 0 {
		n += 1 + sovSlashing(uint64(m.StartHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.InactiveUntil)
	n += 1 + l + sovSlashing(uint64(l))
	if m.Tombstoned {
		n += 2
	}
	if m.Mischance != 0 {
		n += 1 + sovSlashing(uint64(m.Mischance))
	}
	if m.LastPresentBlock != 0 {
		n += 1 + sovSlashing(uint64(m.LastPresentBlock))
	}
	if m.MissedBlocksCounter != 0 {
		n += 1 + sovSlashing(uint64(m.MissedBlocksCounter))
	}
	if m.ProducedBlocksCounter != 0 {
		n += 1 + sovSlashing(uint64(m.ProducedBlocksCounter))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.DowntimeInactiveDuration)
	n += 1 + l + sovSlashing(uint64(l))
	return n
}

func sovSlashing(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlashing(x uint64) (n int) {
	return sovSlashing(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorSigningInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSigningInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSigningInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartHeight", wireType)
			}
			m.StartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InactiveUntil", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.InactiveUntil, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tombstoned", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tombstoned = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mischance", wireType)
			}
			m.Mischance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mischance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPresentBlock", wireType)
			}
			m.LastPresentBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastPresentBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedBlocksCounter", wireType)
			}
			m.MissedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MissedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProducedBlocksCounter", wireType)
			}
			m.ProducedBlocksCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProducedBlocksCounter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DowntimeInactiveDuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlashing
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlashing
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.DowntimeInactiveDuration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlashing(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSlashing
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlashing(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlashing
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlashing
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlashing
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlashing
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlashing
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlashing        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlashing          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlashing = fmt.Errorf("proto: unexpected end of group")
)
