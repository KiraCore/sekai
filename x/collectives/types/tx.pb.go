// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/collectives/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCollective struct {
	Sender           string                                    `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name             string                                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                                    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Bonds            []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,4,rep,name=bonds,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bonds"`
	DepositWhitelist DepositWhitelist                          `protobuf:"bytes,5,opt,name=deposit_whitelist,json=depositWhitelist,proto3" json:"deposit_whitelist"`
	OwnersWhitelist  OwnersWhitelist                           `protobuf:"bytes,6,opt,name=owners_whitelist,json=ownersWhitelist,proto3" json:"owners_whitelist"`
	SpendingPools    []WeightedSpendingPool                    `protobuf:"bytes,7,rep,name=spending_pools,json=spendingPools,proto3" json:"spending_pools"`
	ClaimStart       uint64                                    `protobuf:"varint,8,opt,name=claim_start,json=claimStart,proto3" json:"claim_start,omitempty"`
	ClaimPeriod      uint64                                    `protobuf:"varint,9,opt,name=claim_period,json=claimPeriod,proto3" json:"claim_period,omitempty"`
	ClaimEnd         uint64                                    `protobuf:"varint,10,opt,name=claim_end,json=claimEnd,proto3" json:"claim_end,omitempty"`
	VoteQuorum       uint64                                    `protobuf:"varint,11,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	VotePeriod       uint64                                    `protobuf:"varint,12,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	VoteEnactment    uint64                                    `protobuf:"varint,13,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`
}

func (m *MsgCreateCollective) Reset()         { *m = MsgCreateCollective{} }
func (m *MsgCreateCollective) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollective) ProtoMessage()    {}
func (*MsgCreateCollective) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{0}
}
func (m *MsgCreateCollective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollective.Merge(m, src)
}
func (m *MsgCreateCollective) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollective) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollective.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollective proto.InternalMessageInfo

func (m *MsgCreateCollective) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCreateCollective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgCreateCollective) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateCollective) GetDepositWhitelist() DepositWhitelist {
	if m != nil {
		return m.DepositWhitelist
	}
	return DepositWhitelist{}
}

func (m *MsgCreateCollective) GetOwnersWhitelist() OwnersWhitelist {
	if m != nil {
		return m.OwnersWhitelist
	}
	return OwnersWhitelist{}
}

func (m *MsgCreateCollective) GetSpendingPools() []WeightedSpendingPool {
	if m != nil {
		return m.SpendingPools
	}
	return nil
}

func (m *MsgCreateCollective) GetClaimStart() uint64 {
	if m != nil {
		return m.ClaimStart
	}
	return 0
}

func (m *MsgCreateCollective) GetClaimPeriod() uint64 {
	if m != nil {
		return m.ClaimPeriod
	}
	return 0
}

func (m *MsgCreateCollective) GetClaimEnd() uint64 {
	if m != nil {
		return m.ClaimEnd
	}
	return 0
}

func (m *MsgCreateCollective) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *MsgCreateCollective) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *MsgCreateCollective) GetVoteEnactment() uint64 {
	if m != nil {
		return m.VoteEnactment
	}
	return 0
}

// MsgClaimValidatorResponse defines the Msg/CreateCollective response type.
type MsgCreateCollectiveResponse struct {
}

func (m *MsgCreateCollectiveResponse) Reset()         { *m = MsgCreateCollectiveResponse{} }
func (m *MsgCreateCollectiveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCollectiveResponse) ProtoMessage()    {}
func (*MsgCreateCollectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{1}
}
func (m *MsgCreateCollectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCollectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCollectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCollectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCollectiveResponse.Merge(m, src)
}
func (m *MsgCreateCollectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCollectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCollectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCollectiveResponse proto.InternalMessageInfo

type MsgBondCollective struct {
	Sender string                                    `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name   string                                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bonds  []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,rep,name=bonds,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bonds"`
}

func (m *MsgBondCollective) Reset()         { *m = MsgBondCollective{} }
func (m *MsgBondCollective) String() string { return proto.CompactTextString(m) }
func (*MsgBondCollective) ProtoMessage()    {}
func (*MsgBondCollective) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{2}
}
func (m *MsgBondCollective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondCollective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondCollective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondCollective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondCollective.Merge(m, src)
}
func (m *MsgBondCollective) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondCollective) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondCollective.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondCollective proto.InternalMessageInfo

func (m *MsgBondCollective) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBondCollective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MsgBondCollectiveResponse defines the Msg/BondCollective response type.
type MsgBondCollectiveResponse struct {
}

func (m *MsgBondCollectiveResponse) Reset()         { *m = MsgBondCollectiveResponse{} }
func (m *MsgBondCollectiveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBondCollectiveResponse) ProtoMessage()    {}
func (*MsgBondCollectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{3}
}
func (m *MsgBondCollectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBondCollectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBondCollectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBondCollectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBondCollectiveResponse.Merge(m, src)
}
func (m *MsgBondCollectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBondCollectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBondCollectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBondCollectiveResponse proto.InternalMessageInfo

type MsgDonateCollective struct {
	Sender       string                                 `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name         string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Locking      uint64                                 `protobuf:"varint,3,opt,name=locking,proto3" json:"locking,omitempty"`
	Donation     github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=donation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"donation"`
	DonationLock bool                                   `protobuf:"varint,5,opt,name=donation_lock,json=donationLock,proto3" json:"donation_lock,omitempty"`
}

func (m *MsgDonateCollective) Reset()         { *m = MsgDonateCollective{} }
func (m *MsgDonateCollective) String() string { return proto.CompactTextString(m) }
func (*MsgDonateCollective) ProtoMessage()    {}
func (*MsgDonateCollective) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{4}
}
func (m *MsgDonateCollective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDonateCollective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDonateCollective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDonateCollective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDonateCollective.Merge(m, src)
}
func (m *MsgDonateCollective) XXX_Size() int {
	return m.Size()
}
func (m *MsgDonateCollective) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDonateCollective.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDonateCollective proto.InternalMessageInfo

func (m *MsgDonateCollective) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDonateCollective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgDonateCollective) GetLocking() uint64 {
	if m != nil {
		return m.Locking
	}
	return 0
}

func (m *MsgDonateCollective) GetDonationLock() bool {
	if m != nil {
		return m.DonationLock
	}
	return false
}

// MsgDonateCollectiveResponse defines the Msg/LockBondWithDonation response type.
type MsgDonateCollectiveResponse struct {
}

func (m *MsgDonateCollectiveResponse) Reset()         { *m = MsgDonateCollectiveResponse{} }
func (m *MsgDonateCollectiveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDonateCollectiveResponse) ProtoMessage()    {}
func (*MsgDonateCollectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{5}
}
func (m *MsgDonateCollectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDonateCollectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDonateCollectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDonateCollectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDonateCollectiveResponse.Merge(m, src)
}
func (m *MsgDonateCollectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDonateCollectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDonateCollectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDonateCollectiveResponse proto.InternalMessageInfo

type MsgWithdrawCollective struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *MsgWithdrawCollective) Reset()         { *m = MsgWithdrawCollective{} }
func (m *MsgWithdrawCollective) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCollective) ProtoMessage()    {}
func (*MsgWithdrawCollective) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{6}
}
func (m *MsgWithdrawCollective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCollective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCollective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCollective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCollective.Merge(m, src)
}
func (m *MsgWithdrawCollective) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCollective) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCollective.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCollective proto.InternalMessageInfo

func (m *MsgWithdrawCollective) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawCollective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MsgWithdrawCollectiveResponse defines the Msg/LockBondWithDonation response type.
type MsgWithdrawCollectiveResponse struct {
}

func (m *MsgWithdrawCollectiveResponse) Reset()         { *m = MsgWithdrawCollectiveResponse{} }
func (m *MsgWithdrawCollectiveResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawCollectiveResponse) ProtoMessage()    {}
func (*MsgWithdrawCollectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc3032dd5313583, []int{7}
}
func (m *MsgWithdrawCollectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawCollectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawCollectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawCollectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawCollectiveResponse.Merge(m, src)
}
func (m *MsgWithdrawCollectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawCollectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawCollectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawCollectiveResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateCollective)(nil), "kira.collectives.MsgCreateCollective")
	proto.RegisterType((*MsgCreateCollectiveResponse)(nil), "kira.collectives.MsgCreateCollectiveResponse")
	proto.RegisterType((*MsgBondCollective)(nil), "kira.collectives.MsgBondCollective")
	proto.RegisterType((*MsgBondCollectiveResponse)(nil), "kira.collectives.MsgBondCollectiveResponse")
	proto.RegisterType((*MsgDonateCollective)(nil), "kira.collectives.MsgDonateCollective")
	proto.RegisterType((*MsgDonateCollectiveResponse)(nil), "kira.collectives.MsgDonateCollectiveResponse")
	proto.RegisterType((*MsgWithdrawCollective)(nil), "kira.collectives.MsgWithdrawCollective")
	proto.RegisterType((*MsgWithdrawCollectiveResponse)(nil), "kira.collectives.MsgWithdrawCollectiveResponse")
}

func init() { proto.RegisterFile("kira/collectives/tx.proto", fileDescriptor_0cc3032dd5313583) }

var fileDescriptor_0cc3032dd5313583 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x6f, 0x0c, 0x24, 0x13, 0xc2, 0x0d, 0x73, 0xb9, 0x95, 0x09, 0x22, 0x09, 0x41, 0x40,
	0xa4, 0x8a, 0x58, 0xa2, 0xbb, 0x2e, 0x13, 0x50, 0xa5, 0xb6, 0x51, 0xa9, 0x51, 0x85, 0xd4, 0x4d,
	0xe4, 0xd8, 0x53, 0x67, 0x14, 0x7b, 0x8e, 0xeb, 0x99, 0xf0, 0xf3, 0x02, 0x5d, 0xf7, 0x11, 0xfa,
	0x0e, 0x7d, 0x09, 0x16, 0x5d, 0xb0, 0xac, 0xba, 0x40, 0x15, 0x6c, 0xfa, 0x0c, 0x5d, 0x55, 0x1e,
	0xdb, 0x21, 0x89, 0x83, 0x14, 0xd1, 0x55, 0x66, 0xbe, 0xf3, 0x9d, 0xef, 0xcc, 0xc9, 0x7c, 0xc7,
	0x83, 0xd6, 0x07, 0x34, 0x30, 0x75, 0x0b, 0x5c, 0x97, 0x58, 0x82, 0x9e, 0x11, 0xae, 0x8b, 0x8b,
	0xa6, 0x1f, 0x80, 0x00, 0x5c, 0x0a, 0x43, 0xcd, 0xb1, 0x50, 0x79, 0xcd, 0x01, 0x07, 0x64, 0x50,
	0x0f, 0x57, 0x11, 0xaf, 0xbc, 0xee, 0x00, 0x38, 0x2e, 0xd1, 0xe5, 0xae, 0x37, 0xfc, 0xa0, 0x9b,
	0xec, 0x32, 0x09, 0x59, 0xc0, 0x3d, 0xe0, 0xdd, 0x28, 0x27, 0xda, 0xc4, 0xa1, 0xea, 0x74, 0x96,
	0xa0, 0x1e, 0xe1, 0xc2, 0xf4, 0xfc, 0x98, 0xb0, 0x95, 0x3a, 0xd9, 0xfd, 0x3a, 0xa2, 0xd4, 0x7f,
	0xab, 0xe8, 0xbf, 0x0e, 0x77, 0xda, 0x01, 0x31, 0x05, 0x69, 0x8f, 0xa2, 0xf8, 0x09, 0x5a, 0xe4,
	0x84, 0xd9, 0x24, 0xd0, 0x94, 0x9a, 0xd2, 0xc8, 0x1b, 0xf1, 0x0e, 0x63, 0xa4, 0x32, 0xd3, 0x23,
	0xda, 0x3f, 0x12, 0x95, 0x6b, 0x5c, 0x43, 0x05, 0x9b, 0x70, 0x2b, 0xa0, 0xbe, 0xa0, 0xc0, 0xb4,
	0xac, 0x0c, 0x8d, 0x43, 0xf8, 0x08, 0x2d, 0xf4, 0x80, 0xd9, 0x5c, 0x53, 0x6b, 0xd9, 0x46, 0xbe,
	0xa5, 0x5f, 0xdd, 0x54, 0x33, 0x3f, 0x6e, 0xaa, 0x7b, 0x0e, 0x15, 0xfd, 0x61, 0xaf, 0x69, 0x81,
	0x17, 0x77, 0x16, 0xff, 0xec, 0x73, 0x7b, 0xa0, 0x8b, 0x4b, 0x9f, 0xf0, 0x66, 0x1b, 0x28, 0x33,
	0xa2, 0x6c, 0xfc, 0x0e, 0xad, 0xda, 0xc4, 0x07, 0x4e, 0x45, 0xf7, 0xbc, 0x4f, 0x05, 0x71, 0x29,
	0x17, 0xda, 0x42, 0x4d, 0x69, 0x14, 0x0e, 0xea, 0xcd, 0xe9, 0xbf, 0xba, 0x79, 0x18, 0x51, 0x4f,
	0x13, 0x66, 0x4b, 0x0d, 0xcb, 0x1a, 0x25, 0x7b, 0x0a, 0xc7, 0x06, 0x2a, 0xc1, 0x39, 0x23, 0x01,
	0x1f, 0x53, 0x5d, 0x94, 0xaa, 0x5b, 0x69, 0xd5, 0x37, 0x92, 0x39, 0x2d, 0xfa, 0x2f, 0x4c, 0xc2,
	0xf8, 0x04, 0xad, 0x70, 0x9f, 0x30, 0x9b, 0x32, 0xa7, 0xeb, 0x03, 0xb8, 0x5c, 0x5b, 0xaa, 0x65,
	0x1b, 0x85, 0x83, 0xdd, 0xb4, 0xe2, 0x29, 0xa1, 0x4e, 0x5f, 0x10, 0xfb, 0x24, 0xe6, 0x1f, 0x03,
	0xb8, 0xb1, 0x6c, 0x91, 0x8f, 0x61, 0x1c, 0x57, 0x51, 0xc1, 0x72, 0x4d, 0xea, 0x75, 0xb9, 0x30,
	0x03, 0xa1, 0xe5, 0x6a, 0x4a, 0x43, 0x35, 0x90, 0x84, 0x4e, 0x42, 0x04, 0x6f, 0xa1, 0xe5, 0x88,
	0xe0, 0x93, 0x80, 0x82, 0xad, 0xe5, 0x25, 0x23, 0x4a, 0x3a, 0x96, 0x10, 0xde, 0x40, 0xf9, 0x88,
	0x42, 0x98, 0xad, 0x21, 0x19, 0xcf, 0x49, 0xe0, 0x88, 0xd9, 0x61, 0x81, 0x33, 0x10, 0xa4, 0xfb,
	0x71, 0x08, 0xc1, 0xd0, 0xd3, 0x0a, 0x51, 0x81, 0x10, 0x7a, 0x2b, 0x91, 0x11, 0x21, 0xd6, 0x5f,
	0xbe, 0x27, 0xc4, 0xf2, 0x3b, 0x68, 0x45, 0x12, 0x08, 0x33, 0x2d, 0xe1, 0x11, 0x26, 0xb4, 0xa2,
	0xe4, 0x14, 0x43, 0xf4, 0x28, 0x01, 0x9f, 0xab, 0xbf, 0xbe, 0x54, 0x95, 0xfa, 0x26, 0xda, 0x98,
	0xe1, 0x3d, 0x83, 0x70, 0x1f, 0x18, 0x27, 0xf5, 0x4f, 0x0a, 0x5a, 0xed, 0x70, 0xa7, 0x05, 0xcc,
	0x7e, 0xa4, 0x33, 0x47, 0xbe, 0xcb, 0xfe, 0x8d, 0xef, 0xea, 0x1b, 0x68, 0x3d, 0x75, 0x8e, 0xd1,
	0x29, 0xbf, 0x29, 0x72, 0x82, 0x0e, 0x81, 0x3d, 0x7e, 0x82, 0x34, 0xb4, 0xe4, 0x82, 0x35, 0xa0,
	0xcc, 0x91, 0xd3, 0xa3, 0x1a, 0xc9, 0x16, 0xbf, 0x44, 0x39, 0x3b, 0x54, 0x0e, 0x07, 0x4b, 0x0d,
	0x33, 0x5a, 0xcd, 0xb8, 0x89, 0xdd, 0x39, 0x9a, 0x38, 0x24, 0x96, 0x31, 0xca, 0xc7, 0xdb, 0xa8,
	0x98, 0xac, 0xbb, 0xa1, 0xbe, 0x1c, 0x9d, 0x9c, 0xb1, 0x9c, 0x80, 0xaf, 0xc1, 0x1a, 0xc4, 0x77,
	0x32, 0xdd, 0xcd, 0xa8, 0xdb, 0x36, 0xfa, 0xbf, 0xc3, 0x9d, 0x53, 0x2a, 0xfa, 0x76, 0x60, 0x9e,
	0x3f, 0xae, 0xdd, 0x7a, 0x15, 0x6d, 0xce, 0x14, 0x49, 0xaa, 0x1c, 0x7c, 0xcd, 0xa2, 0x6c, 0x87,
	0x3b, 0xb8, 0x8f, 0x4a, 0xa9, 0x2f, 0xd3, 0x4e, 0x7a, 0x82, 0x66, 0x98, 0xa8, 0xbc, 0x3f, 0x17,
	0x2d, 0xa9, 0x88, 0xfb, 0x68, 0xad, 0x0d, 0x4c, 0x04, 0xb4, 0x37, 0x9c, 0xa8, 0xb6, 0x3d, 0x53,
	0x66, 0xd2, 0x0a, 0xe5, 0xa7, 0x73, 0x90, 0xc6, 0x2a, 0x95, 0x52, 0x5e, 0x99, 0xdd, 0xd3, 0x34,
	0xed, 0x81, 0x9e, 0x1e, 0xba, 0x2b, 0xcc, 0x10, 0x9e, 0x71, 0x51, 0x7b, 0x33, 0x45, 0xd2, 0xc4,
	0xb2, 0x3e, 0x27, 0x31, 0xa9, 0xd7, 0x7a, 0x71, 0x75, 0x5b, 0x51, 0xae, 0x6f, 0x2b, 0xca, 0xcf,
	0xdb, 0x8a, 0xf2, 0xf9, 0xae, 0x92, 0xb9, 0xbe, 0xab, 0x64, 0xbe, 0xdf, 0x55, 0x32, 0xef, 0xf7,
	0xc7, 0xbc, 0xfa, 0x8a, 0x06, 0x66, 0x1b, 0x02, 0xa2, 0x73, 0x32, 0x30, 0xa9, 0x7e, 0x31, 0xf9,
	0x72, 0x86, 0xb6, 0xed, 0x2d, 0xca, 0xb7, 0xe9, 0xd9, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2,
	0x31, 0x24, 0x58, 0x5a, 0x07, 0x00, 0x00,
}

func (this *MsgCreateCollective) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCreateCollective)
	if !ok {
		that2, ok := that.(MsgCreateCollective)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Sender != that1.Sender {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Bonds) != len(that1.Bonds) {
		return false
	}
	for i := range this.Bonds {
		if !this.Bonds[i].Equal(that1.Bonds[i]) {
			return false
		}
	}
	if !this.DepositWhitelist.Equal(&that1.DepositWhitelist) {
		return false
	}
	if !this.OwnersWhitelist.Equal(&that1.OwnersWhitelist) {
		return false
	}
	if len(this.SpendingPools) != len(that1.SpendingPools) {
		return false
	}
	for i := range this.SpendingPools {
		if !this.SpendingPools[i].Equal(&that1.SpendingPools[i]) {
			return false
		}
	}
	if this.ClaimStart != that1.ClaimStart {
		return false
	}
	if this.ClaimPeriod != that1.ClaimPeriod {
		return false
	}
	if this.ClaimEnd != that1.ClaimEnd {
		return false
	}
	if this.VoteQuorum != that1.VoteQuorum {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if this.VoteEnactment != that1.VoteEnactment {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateCollective defines a method for creating collective.
	// allow ANY user to create Staking Collective even if they have no roles or
	// permissions enabling that
	CreateCollective(ctx context.Context, in *MsgCreateCollective, opts ...grpc.CallOption) (*MsgCreateCollectiveResponse, error)
	// ContributeCollective defines a method for putting bonds on collective.
	// can be sent by any whitelisted “contributor” account that wants to add
	// tokens to the Staking Collective during or after creation process
	ContributeCollective(ctx context.Context, in *MsgBondCollective, opts ...grpc.CallOption) (*MsgBondCollectiveResponse, error)
	// DonateCollective defines a method to set lock and donation for bonds on the
	// collection - allows to lock staking derivatives for a specific time period
	// and donating a defined percentage of staking rewards to the collective.
	DonateCollective(ctx context.Context, in *MsgDonateCollective, opts ...grpc.CallOption) (*MsgDonateCollectiveResponse, error)
	// WithdrawCollective can be sent by any whitelisted “contributor” to withdraw
	// their tokens (unless locking is enabled)
	WithdrawCollective(ctx context.Context, in *MsgWithdrawCollective, opts ...grpc.CallOption) (*MsgWithdrawCollectiveResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCollective(ctx context.Context, in *MsgCreateCollective, opts ...grpc.CallOption) (*MsgCreateCollectiveResponse, error) {
	out := new(MsgCreateCollectiveResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Msg/CreateCollective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ContributeCollective(ctx context.Context, in *MsgBondCollective, opts ...grpc.CallOption) (*MsgBondCollectiveResponse, error) {
	out := new(MsgBondCollectiveResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Msg/ContributeCollective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DonateCollective(ctx context.Context, in *MsgDonateCollective, opts ...grpc.CallOption) (*MsgDonateCollectiveResponse, error) {
	out := new(MsgDonateCollectiveResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Msg/DonateCollective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawCollective(ctx context.Context, in *MsgWithdrawCollective, opts ...grpc.CallOption) (*MsgWithdrawCollectiveResponse, error) {
	out := new(MsgWithdrawCollectiveResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Msg/WithdrawCollective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateCollective defines a method for creating collective.
	// allow ANY user to create Staking Collective even if they have no roles or
	// permissions enabling that
	CreateCollective(context.Context, *MsgCreateCollective) (*MsgCreateCollectiveResponse, error)
	// ContributeCollective defines a method for putting bonds on collective.
	// can be sent by any whitelisted “contributor” account that wants to add
	// tokens to the Staking Collective during or after creation process
	ContributeCollective(context.Context, *MsgBondCollective) (*MsgBondCollectiveResponse, error)
	// DonateCollective defines a method to set lock and donation for bonds on the
	// collection - allows to lock staking derivatives for a specific time period
	// and donating a defined percentage of staking rewards to the collective.
	DonateCollective(context.Context, *MsgDonateCollective) (*MsgDonateCollectiveResponse, error)
	// WithdrawCollective can be sent by any whitelisted “contributor” to withdraw
	// their tokens (unless locking is enabled)
	WithdrawCollective(context.Context, *MsgWithdrawCollective) (*MsgWithdrawCollectiveResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCollective(ctx context.Context, req *MsgCreateCollective) (*MsgCreateCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollective not implemented")
}
func (*UnimplementedMsgServer) ContributeCollective(ctx context.Context, req *MsgBondCollective) (*MsgBondCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContributeCollective not implemented")
}
func (*UnimplementedMsgServer) DonateCollective(ctx context.Context, req *MsgDonateCollective) (*MsgDonateCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonateCollective not implemented")
}
func (*UnimplementedMsgServer) WithdrawCollective(ctx context.Context, req *MsgWithdrawCollective) (*MsgWithdrawCollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCollective not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Msg/CreateCollective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCollective(ctx, req.(*MsgCreateCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ContributeCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBondCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ContributeCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Msg/ContributeCollective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ContributeCollective(ctx, req.(*MsgBondCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DonateCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDonateCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DonateCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Msg/DonateCollective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DonateCollective(ctx, req.(*MsgDonateCollective))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawCollective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawCollective)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawCollective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Msg/WithdrawCollective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawCollective(ctx, req.(*MsgWithdrawCollective))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.collectives.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollective",
			Handler:    _Msg_CreateCollective_Handler,
		},
		{
			MethodName: "ContributeCollective",
			Handler:    _Msg_ContributeCollective_Handler,
		},
		{
			MethodName: "DonateCollective",
			Handler:    _Msg_DonateCollective_Handler,
		},
		{
			MethodName: "WithdrawCollective",
			Handler:    _Msg_WithdrawCollective_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/collectives/tx.proto",
}

func (m *MsgCreateCollective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteEnactment != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteEnactment))
		i--
		dAtA[i] = 0x68
	}
	if m.VotePeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x60
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x58
	}
	if m.ClaimEnd != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimEnd))
		i--
		dAtA[i] = 0x50
	}
	if m.ClaimPeriod != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimPeriod))
		i--
		dAtA[i] = 0x48
	}
	if m.ClaimStart != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ClaimStart))
		i--
		dAtA[i] = 0x40
	}
	if len(m.SpendingPools) > 0 {
		for iNdEx := len(m.SpendingPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpendingPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.OwnersWhitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.DepositWhitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Bonds) > 0 {
		for iNdEx := len(m.Bonds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Bonds[iNdEx].Size()
				i -= size
				if _, err := m.Bonds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCollectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCollectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCollectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBondCollective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondCollective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondCollective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Bonds) > 0 {
		for iNdEx := len(m.Bonds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Bonds[iNdEx].Size()
				i -= size
				if _, err := m.Bonds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBondCollectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBondCollectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBondCollectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDonateCollective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDonateCollective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDonateCollective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DonationLock {
		i--
		if m.DonationLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Donation.Size()
		i -= size
		if _, err := m.Donation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Locking != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Locking))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDonateCollectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDonateCollectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDonateCollectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCollective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCollective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCollective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawCollectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawCollectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawCollectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCollective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Bonds) > 0 {
		for _, e := range m.Bonds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.DepositWhitelist.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.OwnersWhitelist.Size()
	n += 1 + l + sovTx(uint64(l))
	if len(m.SpendingPools) > 0 {
		for _, e := range m.SpendingPools {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ClaimStart != 0 {
		n += 1 + sovTx(uint64(m.ClaimStart))
	}
	if m.ClaimPeriod != 0 {
		n += 1 + sovTx(uint64(m.ClaimPeriod))
	}
	if m.ClaimEnd != 0 {
		n += 1 + sovTx(uint64(m.ClaimEnd))
	}
	if m.VoteQuorum != 0 {
		n += 1 + sovTx(uint64(m.VoteQuorum))
	}
	if m.VotePeriod != 0 {
		n += 1 + sovTx(uint64(m.VotePeriod))
	}
	if m.VoteEnactment != 0 {
		n += 1 + sovTx(uint64(m.VoteEnactment))
	}
	return n
}

func (m *MsgCreateCollectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBondCollective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Bonds) > 0 {
		for _, e := range m.Bonds {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgBondCollectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDonateCollective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Locking != 0 {
		n += 1 + sovTx(uint64(m.Locking))
	}
	l = m.Donation.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DonationLock {
		n += 2
	}
	return n
}

func (m *MsgDonateCollectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawCollective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawCollectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCollective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Bonds = append(m.Bonds, v)
			if err := m.Bonds[len(m.Bonds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnersWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwnersWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendingPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendingPools = append(m.SpendingPools, WeightedSpendingPool{})
			if err := m.SpendingPools[len(m.SpendingPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStart", wireType)
			}
			m.ClaimStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriod", wireType)
			}
			m.ClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			m.ClaimEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteEnactment", wireType)
			}
			m.VoteEnactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteEnactment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCollectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCollectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCollectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondCollective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondCollective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondCollective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Bonds = append(m.Bonds, v)
			if err := m.Bonds[len(m.Bonds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBondCollectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBondCollectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBondCollectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDonateCollective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDonateCollective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDonateCollective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locking", wireType)
			}
			m.Locking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locking |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Donation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Donation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DonationLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDonateCollectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDonateCollectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDonateCollectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCollective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCollective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCollective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawCollectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawCollectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawCollectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
