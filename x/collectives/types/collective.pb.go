// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/collectives/collective.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollectiveStatus int32

const (
	// Active status
	CollectiveActive CollectiveStatus = 0
	// Inactive status
	CollectiveInactive CollectiveStatus = 1
	// Paused status
	CollectivePaused CollectiveStatus = 2
)

var CollectiveStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "PAUSED",
}

var CollectiveStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
	"PAUSED":   2,
}

func (x CollectiveStatus) String() string {
	return proto.EnumName(CollectiveStatus_name, int32(x))
}

func (CollectiveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{0}
}

type DepositWhitelist struct {
	Any      bool     `protobuf:"varint,1,opt,name=any,proto3" json:"any,omitempty"`
	Roles    []uint64 `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Accounts []string `protobuf:"bytes,3,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *DepositWhitelist) Reset()         { *m = DepositWhitelist{} }
func (m *DepositWhitelist) String() string { return proto.CompactTextString(m) }
func (*DepositWhitelist) ProtoMessage()    {}
func (*DepositWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{0}
}
func (m *DepositWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositWhitelist.Merge(m, src)
}
func (m *DepositWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *DepositWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_DepositWhitelist proto.InternalMessageInfo

func (m *DepositWhitelist) GetAny() bool {
	if m != nil {
		return m.Any
	}
	return false
}

func (m *DepositWhitelist) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *DepositWhitelist) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type OwnersWhitelist struct {
	Roles    []uint64 `protobuf:"varint,1,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	Accounts []string `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
}

func (m *OwnersWhitelist) Reset()         { *m = OwnersWhitelist{} }
func (m *OwnersWhitelist) String() string { return proto.CompactTextString(m) }
func (*OwnersWhitelist) ProtoMessage()    {}
func (*OwnersWhitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{1}
}
func (m *OwnersWhitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnersWhitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnersWhitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnersWhitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnersWhitelist.Merge(m, src)
}
func (m *OwnersWhitelist) XXX_Size() int {
	return m.Size()
}
func (m *OwnersWhitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnersWhitelist.DiscardUnknown(m)
}

var xxx_messageInfo_OwnersWhitelist proto.InternalMessageInfo

func (m *OwnersWhitelist) GetRoles() []uint64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *OwnersWhitelist) GetAccounts() []string {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type WeightedSpendingPool struct {
	Name   string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
}

func (m *WeightedSpendingPool) Reset()         { *m = WeightedSpendingPool{} }
func (m *WeightedSpendingPool) String() string { return proto.CompactTextString(m) }
func (*WeightedSpendingPool) ProtoMessage()    {}
func (*WeightedSpendingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{2}
}
func (m *WeightedSpendingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedSpendingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedSpendingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedSpendingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedSpendingPool.Merge(m, src)
}
func (m *WeightedSpendingPool) XXX_Size() int {
	return m.Size()
}
func (m *WeightedSpendingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedSpendingPool.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedSpendingPool proto.InternalMessageInfo

func (m *WeightedSpendingPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Collective struct {
	Name             string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Status           CollectiveStatus                          `protobuf:"varint,3,opt,name=status,proto3,enum=kira.collectives.CollectiveStatus" json:"status,omitempty"`
	DepositWhitelist DepositWhitelist                          `protobuf:"bytes,4,opt,name=deposit_whitelist,json=depositWhitelist,proto3" json:"deposit_whitelist"`
	OwnersWhitelist  OwnersWhitelist                           `protobuf:"bytes,5,opt,name=owners_whitelist,json=ownersWhitelist,proto3" json:"owners_whitelist"`
	SpendingPools    []WeightedSpendingPool                    `protobuf:"bytes,6,rep,name=spending_pools,json=spendingPools,proto3" json:"spending_pools"`
	ClaimStart       uint64                                    `protobuf:"varint,7,opt,name=claim_start,json=claimStart,proto3" json:"claim_start,omitempty"`
	ClaimPeriod      uint64                                    `protobuf:"varint,8,opt,name=claim_period,json=claimPeriod,proto3" json:"claim_period,omitempty"`
	ClaimEnd         uint64                                    `protobuf:"varint,9,opt,name=claim_end,json=claimEnd,proto3" json:"claim_end,omitempty"`
	VoteQuorum       uint64                                    `protobuf:"varint,10,opt,name=vote_quorum,json=voteQuorum,proto3" json:"vote_quorum,omitempty"`
	VotePeriod       uint64                                    `protobuf:"varint,11,opt,name=vote_period,json=votePeriod,proto3" json:"vote_period,omitempty"`
	VoteEnactment    uint64                                    `protobuf:"varint,12,opt,name=vote_enactment,json=voteEnactment,proto3" json:"vote_enactment,omitempty"`
	Donations        []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,13,rep,name=donations,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"donations"`
	Rewards          []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,14,rep,name=rewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"rewards"`
	LastDistribution uint64                                    `protobuf:"varint,15,opt,name=last_distribution,json=lastDistribution,proto3" json:"last_distribution,omitempty"`
}

func (m *Collective) Reset()         { *m = Collective{} }
func (m *Collective) String() string { return proto.CompactTextString(m) }
func (*Collective) ProtoMessage()    {}
func (*Collective) Descriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{3}
}
func (m *Collective) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Collective) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Collective.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Collective) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collective.Merge(m, src)
}
func (m *Collective) XXX_Size() int {
	return m.Size()
}
func (m *Collective) XXX_DiscardUnknown() {
	xxx_messageInfo_Collective.DiscardUnknown(m)
}

var xxx_messageInfo_Collective proto.InternalMessageInfo

func (m *Collective) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Collective) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Collective) GetStatus() CollectiveStatus {
	if m != nil {
		return m.Status
	}
	return CollectiveActive
}

func (m *Collective) GetDepositWhitelist() DepositWhitelist {
	if m != nil {
		return m.DepositWhitelist
	}
	return DepositWhitelist{}
}

func (m *Collective) GetOwnersWhitelist() OwnersWhitelist {
	if m != nil {
		return m.OwnersWhitelist
	}
	return OwnersWhitelist{}
}

func (m *Collective) GetSpendingPools() []WeightedSpendingPool {
	if m != nil {
		return m.SpendingPools
	}
	return nil
}

func (m *Collective) GetClaimStart() uint64 {
	if m != nil {
		return m.ClaimStart
	}
	return 0
}

func (m *Collective) GetClaimPeriod() uint64 {
	if m != nil {
		return m.ClaimPeriod
	}
	return 0
}

func (m *Collective) GetClaimEnd() uint64 {
	if m != nil {
		return m.ClaimEnd
	}
	return 0
}

func (m *Collective) GetVoteQuorum() uint64 {
	if m != nil {
		return m.VoteQuorum
	}
	return 0
}

func (m *Collective) GetVotePeriod() uint64 {
	if m != nil {
		return m.VotePeriod
	}
	return 0
}

func (m *Collective) GetVoteEnactment() uint64 {
	if m != nil {
		return m.VoteEnactment
	}
	return 0
}

func (m *Collective) GetLastDistribution() uint64 {
	if m != nil {
		return m.LastDistribution
	}
	return 0
}

type CollectiveContributor struct {
	Address      string                                    `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Name         string                                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bonds        []github_com_cosmos_cosmos_sdk_types.Coin `protobuf:"bytes,3,rep,name=bonds,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coin" json:"bonds"`
	Locking      uint64                                    `protobuf:"varint,4,opt,name=locking,proto3" json:"locking,omitempty"`
	Donation     github_com_cosmos_cosmos_sdk_types.Dec    `protobuf:"bytes,5,opt,name=donation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"donation"`
	DonationLock bool                                      `protobuf:"varint,6,opt,name=donation_lock,json=donationLock,proto3" json:"donation_lock,omitempty"`
}

func (m *CollectiveContributor) Reset()         { *m = CollectiveContributor{} }
func (m *CollectiveContributor) String() string { return proto.CompactTextString(m) }
func (*CollectiveContributor) ProtoMessage()    {}
func (*CollectiveContributor) Descriptor() ([]byte, []int) {
	return fileDescriptor_a034e57fe22de5f1, []int{4}
}
func (m *CollectiveContributor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectiveContributor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectiveContributor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectiveContributor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectiveContributor.Merge(m, src)
}
func (m *CollectiveContributor) XXX_Size() int {
	return m.Size()
}
func (m *CollectiveContributor) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectiveContributor.DiscardUnknown(m)
}

var xxx_messageInfo_CollectiveContributor proto.InternalMessageInfo

func (m *CollectiveContributor) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CollectiveContributor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CollectiveContributor) GetLocking() uint64 {
	if m != nil {
		return m.Locking
	}
	return 0
}

func (m *CollectiveContributor) GetDonationLock() bool {
	if m != nil {
		return m.DonationLock
	}
	return false
}

func init() {
	proto.RegisterEnum("kira.collectives.CollectiveStatus", CollectiveStatus_name, CollectiveStatus_value)
	proto.RegisterType((*DepositWhitelist)(nil), "kira.collectives.DepositWhitelist")
	proto.RegisterType((*OwnersWhitelist)(nil), "kira.collectives.OwnersWhitelist")
	proto.RegisterType((*WeightedSpendingPool)(nil), "kira.collectives.WeightedSpendingPool")
	proto.RegisterType((*Collective)(nil), "kira.collectives.Collective")
	proto.RegisterType((*CollectiveContributor)(nil), "kira.collectives.CollectiveContributor")
}

func init() { proto.RegisterFile("kira/collectives/collective.proto", fileDescriptor_a034e57fe22de5f1) }

var fileDescriptor_a034e57fe22de5f1 = []byte{
	// 832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xda, 0x8e, 0x63, 0x3f, 0xe7, 0x63, 0x3b, 0x0a, 0x68, 0x31, 0x92, 0xbd, 0x09, 0x50,
	0x2c, 0x50, 0x6d, 0xa9, 0xdc, 0x7a, 0x4b, 0x1c, 0x83, 0xcc, 0x67, 0x58, 0x53, 0x2a, 0x21, 0x24,
	0x6b, 0xbc, 0x3b, 0x38, 0x23, 0xaf, 0xe7, 0x2d, 0x3b, 0xe3, 0xa6, 0xb9, 0x72, 0x42, 0x3d, 0x71,
	0x41, 0x9c, 0x2a, 0x21, 0xf1, 0xcf, 0xf4, 0xd8, 0x23, 0xe2, 0x50, 0xa1, 0xe4, 0xc2, 0x9f, 0x81,
	0x66, 0x76, 0xd6, 0x5e, 0x9c, 0x20, 0x51, 0x4e, 0x9e, 0xf7, 0x7b, 0xbf, 0xf7, 0x7b, 0x9e, 0xf7,
	0x31, 0x0b, 0x87, 0x73, 0x9e, 0xd2, 0x7e, 0x88, 0x71, 0xcc, 0x42, 0xc5, 0x1f, 0x33, 0x59, 0x38,
	0xf7, 0x92, 0x14, 0x15, 0x12, 0x57, 0x53, 0x7a, 0x05, 0x4a, 0xeb, 0x60, 0x86, 0x33, 0x34, 0xce,
	0xbe, 0x3e, 0x65, 0xbc, 0xd6, 0x1b, 0x33, 0xc4, 0x59, 0xcc, 0xfa, 0xc6, 0x9a, 0x2e, 0xbf, 0xeb,
	0x53, 0x71, 0x99, 0xbb, 0x42, 0x94, 0x0b, 0x94, 0x93, 0x2c, 0x26, 0x33, 0xac, 0xab, 0xb3, 0x19,
	0xa5, 0xf8, 0x82, 0x49, 0x45, 0x17, 0x49, 0x4e, 0xb8, 0xf1, 0x0f, 0x93, 0x14, 0x13, 0x94, 0x34,
	0xce, 0x08, 0x47, 0xdf, 0x82, 0x7b, 0xca, 0x12, 0x94, 0x5c, 0x3d, 0x3a, 0xe7, 0x8a, 0xc5, 0x5c,
	0x2a, 0xe2, 0x42, 0x85, 0x8a, 0x4b, 0xcf, 0xf1, 0x9d, 0x6e, 0x3d, 0xd0, 0x47, 0x72, 0x00, 0x5b,
	0x29, 0xc6, 0x4c, 0x7a, 0x65, 0xbf, 0xd2, 0xad, 0x06, 0x99, 0x41, 0x5a, 0x50, 0xa7, 0x61, 0x88,
	0x4b, 0xa1, 0xa4, 0x57, 0xf1, 0x2b, 0xdd, 0x46, 0xb0, 0xb2, 0x1f, 0x54, 0xff, 0xfa, 0xb5, 0xe3,
	0x1c, 0x8d, 0x60, 0xff, 0x8b, 0x0b, 0xc1, 0x52, 0xb9, 0x16, 0x5f, 0x49, 0x39, 0xff, 0x26, 0x55,
	0xbe, 0x55, 0xea, 0x09, 0x1c, 0x3c, 0x62, 0x7c, 0x76, 0xae, 0x58, 0x34, 0x4e, 0x98, 0x88, 0xb8,
	0x98, 0x9d, 0x21, 0xc6, 0x84, 0x40, 0x55, 0xd0, 0x05, 0x33, 0xff, 0xb6, 0x11, 0x98, 0x33, 0xf9,
	0x10, 0x6a, 0x17, 0x86, 0xeb, 0x95, 0x35, 0x7a, 0xd2, 0x7b, 0xfe, 0xb2, 0x53, 0xfa, 0xe3, 0x65,
	0xe7, 0xee, 0x8c, 0xab, 0xf3, 0xe5, 0xb4, 0x17, 0xe2, 0xc2, 0xd6, 0xd1, 0xfe, 0xdc, 0x93, 0xd1,
	0xbc, 0xaf, 0x2e, 0x13, 0x26, 0x7b, 0xa7, 0x2c, 0x0c, 0x6c, 0xb4, 0xcd, 0xfc, 0x73, 0x0d, 0x60,
	0xb0, 0xaa, 0xe0, 0xad, 0x09, 0x7d, 0x68, 0x46, 0x4c, 0x86, 0x29, 0x4f, 0x14, 0x47, 0x91, 0x65,
	0x0d, 0x8a, 0x10, 0x79, 0x00, 0x35, 0xa9, 0xa8, 0x5a, 0xea, 0x4a, 0x39, 0xdd, 0xbd, 0xfb, 0x47,
	0xbd, 0xcd, 0xc1, 0xe8, 0xad, 0x73, 0x8c, 0x0d, 0x33, 0xb0, 0x11, 0xe4, 0x21, 0xdc, 0x89, 0xb2,
	0x1e, 0x4d, 0x2e, 0xf2, 0x3a, 0x7a, 0x55, 0xdf, 0xe9, 0x36, 0x6f, 0x93, 0xd9, 0x6c, 0xe7, 0x49,
	0x55, 0xdf, 0x3e, 0x70, 0xa3, 0xcd, 0x36, 0x07, 0xe0, 0xa2, 0x69, 0x4e, 0x41, 0x75, 0xcb, 0xa8,
	0x1e, 0xde, 0x54, 0xdd, 0x68, 0xa3, 0x15, 0xdd, 0xc7, 0x8d, 0xee, 0x8e, 0x61, 0x4f, 0xda, 0xee,
	0x4c, 0x12, 0xc4, 0x58, 0x7a, 0x35, 0xbf, 0xd2, 0x6d, 0xde, 0xbf, 0x7b, 0x53, 0xf1, 0xb6, 0x6e,
	0x5a, 0xd9, 0x5d, 0x59, 0xc0, 0x24, 0xe9, 0x40, 0x33, 0x8c, 0x29, 0x5f, 0x4c, 0xa4, 0xa2, 0xa9,
	0xf2, 0xb6, 0x7d, 0xa7, 0x5b, 0x0d, 0xc0, 0x40, 0x63, 0x8d, 0x90, 0x43, 0xd8, 0xc9, 0x08, 0x09,
	0x4b, 0x39, 0x46, 0x5e, 0xdd, 0x30, 0xb2, 0xa0, 0x33, 0x03, 0x91, 0x37, 0xa1, 0x91, 0x51, 0x98,
	0x88, 0xbc, 0x86, 0xf1, 0xd7, 0x0d, 0x30, 0x14, 0x91, 0x4e, 0xf0, 0x18, 0x15, 0x9b, 0x7c, 0xbf,
	0xc4, 0x74, 0xb9, 0xf0, 0x20, 0x4b, 0xa0, 0xa1, 0x2f, 0x0d, 0xb2, 0x22, 0x58, 0xfd, 0xe6, 0x9a,
	0x60, 0xe5, 0xdf, 0x81, 0x3d, 0x43, 0x60, 0x82, 0x86, 0x6a, 0xc1, 0x84, 0xf2, 0x76, 0x0c, 0x67,
	0x57, 0xa3, 0xc3, 0x1c, 0x24, 0x9f, 0x41, 0x23, 0x42, 0x41, 0xf5, 0x44, 0x48, 0x6f, 0x57, 0xcf,
	0xf9, 0x49, 0xdf, 0xce, 0xe6, 0xbb, 0xff, 0x61, 0x36, 0x07, 0xc8, 0x45, 0xb0, 0x56, 0x20, 0x23,
	0xd8, 0x4e, 0xd9, 0x05, 0x4d, 0x23, 0xe9, 0xed, 0xfd, 0x3f, 0xb1, 0x3c, 0x9e, 0xbc, 0x0f, 0x77,
	0x62, 0x2a, 0xd5, 0x24, 0xe2, 0x52, 0xa5, 0x7c, 0xba, 0x34, 0x73, 0xbc, 0x6f, 0xee, 0xe0, 0x6a,
	0xc7, 0x69, 0x01, 0xb7, 0x7b, 0xf1, 0x4b, 0x19, 0x5e, 0x5b, 0xcf, 0xec, 0x00, 0x45, 0x46, 0xc0,
	0x94, 0x78, 0xb0, 0x4d, 0xa3, 0x28, 0x65, 0x52, 0xda, 0x2d, 0xc9, 0xcd, 0xd5, 0xf2, 0x94, 0x0b,
	0xcb, 0x33, 0x84, 0xad, 0x29, 0x8a, 0xc8, 0xbe, 0x21, 0xaf, 0x7e, 0x87, 0x2c, 0x5a, 0x27, 0x8d,
	0x31, 0x9c, 0x73, 0x31, 0x33, 0xbb, 0x51, 0x0d, 0x72, 0x93, 0x7c, 0x0c, 0xf5, 0xbc, 0x66, 0x66,
	0xc0, 0x5f, 0xfd, 0x41, 0x58, 0xc5, 0x93, 0xb7, 0x60, 0x37, 0x3f, 0x4f, 0xb4, 0xbe, 0x57, 0x33,
	0xaf, 0xe4, 0x4e, 0x0e, 0x7e, 0x8a, 0xe1, 0xfc, 0xbd, 0x1f, 0x1c, 0x70, 0x37, 0xb7, 0x99, 0xf8,
	0x50, 0x3b, 0x1e, 0x7c, 0x35, 0xfa, 0x7a, 0xe8, 0x96, 0x5a, 0x07, 0x4f, 0x9f, 0xf9, 0x05, 0xc6,
	0x71, 0xf6, 0xb2, 0xbc, 0x0d, 0xf5, 0xd1, 0xe7, 0x96, 0xe3, 0xb4, 0x5e, 0x7f, 0xfa, 0xcc, 0x27,
	0x6b, 0xce, 0x48, 0x0f, 0x91, 0x66, 0xf9, 0x50, 0x3b, 0x3b, 0x7e, 0x38, 0x1e, 0x9e, 0xba, 0xe5,
	0x4d, 0x9d, 0x33, 0xba, 0x94, 0x2c, 0x6a, 0x55, 0x7f, 0xfc, 0xad, 0x5d, 0x3a, 0xf9, 0xe8, 0xf9,
	0x55, 0xdb, 0x79, 0x71, 0xd5, 0x76, 0xfe, 0xbc, 0x6a, 0x3b, 0x3f, 0x5d, 0xb7, 0x4b, 0x2f, 0xae,
	0xdb, 0xa5, 0xdf, 0xaf, 0xdb, 0xa5, 0x6f, 0xee, 0x15, 0x6e, 0xfd, 0x09, 0x4f, 0xe9, 0x00, 0x53,
	0xd6, 0x97, 0x6c, 0x4e, 0x79, 0xff, 0xc9, 0x3f, 0xbe, 0x15, 0xa6, 0x00, 0xd3, 0x9a, 0xf9, 0x52,
	0x7c, 0xf0, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0xb9, 0xfe, 0x30, 0xee, 0x06, 0x00, 0x00,
}

func (this *DepositWhitelist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DepositWhitelist)
	if !ok {
		that2, ok := that.(DepositWhitelist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Any != that1.Any {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if this.Accounts[i] != that1.Accounts[i] {
			return false
		}
	}
	return true
}
func (this *OwnersWhitelist) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OwnersWhitelist)
	if !ok {
		that2, ok := that.(OwnersWhitelist)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Accounts) != len(that1.Accounts) {
		return false
	}
	for i := range this.Accounts {
		if this.Accounts[i] != that1.Accounts[i] {
			return false
		}
	}
	return true
}
func (this *WeightedSpendingPool) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WeightedSpendingPool)
	if !ok {
		that2, ok := that.(WeightedSpendingPool)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if !this.Weight.Equal(that1.Weight) {
		return false
	}
	return true
}
func (this *Collective) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Collective)
	if !ok {
		that2, ok := that.(Collective)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.DepositWhitelist.Equal(&that1.DepositWhitelist) {
		return false
	}
	if !this.OwnersWhitelist.Equal(&that1.OwnersWhitelist) {
		return false
	}
	if len(this.SpendingPools) != len(that1.SpendingPools) {
		return false
	}
	for i := range this.SpendingPools {
		if !this.SpendingPools[i].Equal(&that1.SpendingPools[i]) {
			return false
		}
	}
	if this.ClaimStart != that1.ClaimStart {
		return false
	}
	if this.ClaimPeriod != that1.ClaimPeriod {
		return false
	}
	if this.ClaimEnd != that1.ClaimEnd {
		return false
	}
	if this.VoteQuorum != that1.VoteQuorum {
		return false
	}
	if this.VotePeriod != that1.VotePeriod {
		return false
	}
	if this.VoteEnactment != that1.VoteEnactment {
		return false
	}
	if len(this.Donations) != len(that1.Donations) {
		return false
	}
	for i := range this.Donations {
		if !this.Donations[i].Equal(that1.Donations[i]) {
			return false
		}
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	if this.LastDistribution != that1.LastDistribution {
		return false
	}
	return true
}
func (m *DepositWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintCollective(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCollective(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.Any {
		i--
		if m.Any {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OwnersWhitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnersWhitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnersWhitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Accounts[iNdEx])
			copy(dAtA[i:], m.Accounts[iNdEx])
			i = encodeVarintCollective(dAtA, i, uint64(len(m.Accounts[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Roles) > 0 {
		dAtA4 := make([]byte, len(m.Roles)*10)
		var j3 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintCollective(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeightedSpendingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedSpendingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedSpendingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollective(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCollective(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Collective) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collective) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Collective) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastDistribution != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.LastDistribution))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Rewards[iNdEx].Size()
				i -= size
				if _, err := m.Rewards[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintCollective(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.Donations) > 0 {
		for iNdEx := len(m.Donations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Donations[iNdEx].Size()
				i -= size
				if _, err := m.Donations[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintCollective(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.VoteEnactment != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.VoteEnactment))
		i--
		dAtA[i] = 0x60
	}
	if m.VotePeriod != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.VotePeriod))
		i--
		dAtA[i] = 0x58
	}
	if m.VoteQuorum != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.VoteQuorum))
		i--
		dAtA[i] = 0x50
	}
	if m.ClaimEnd != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.ClaimEnd))
		i--
		dAtA[i] = 0x48
	}
	if m.ClaimPeriod != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.ClaimPeriod))
		i--
		dAtA[i] = 0x40
	}
	if m.ClaimStart != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.ClaimStart))
		i--
		dAtA[i] = 0x38
	}
	if len(m.SpendingPools) > 0 {
		for iNdEx := len(m.SpendingPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpendingPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCollective(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.OwnersWhitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollective(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.DepositWhitelist.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCollective(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Status != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCollective(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCollective(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectiveContributor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectiveContributor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectiveContributor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DonationLock {
		i--
		if m.DonationLock {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Donation.Size()
		i -= size
		if _, err := m.Donation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCollective(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Locking != 0 {
		i = encodeVarintCollective(dAtA, i, uint64(m.Locking))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Bonds) > 0 {
		for iNdEx := len(m.Bonds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size := m.Bonds[iNdEx].Size()
				i -= size
				if _, err := m.Bonds[iNdEx].MarshalTo(dAtA[i:]); err != nil {
					return 0, err
				}
				i = encodeVarintCollective(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCollective(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCollective(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollective(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollective(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Any {
		n += 2
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovCollective(uint64(e))
		}
		n += 1 + sovCollective(uint64(l)) + l
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	return n
}

func (m *OwnersWhitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovCollective(uint64(e))
		}
		n += 1 + sovCollective(uint64(l)) + l
	}
	if len(m.Accounts) > 0 {
		for _, s := range m.Accounts {
			l = len(s)
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	return n
}

func (m *WeightedSpendingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCollective(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovCollective(uint64(l))
	return n
}

func (m *Collective) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCollective(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCollective(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovCollective(uint64(m.Status))
	}
	l = m.DepositWhitelist.Size()
	n += 1 + l + sovCollective(uint64(l))
	l = m.OwnersWhitelist.Size()
	n += 1 + l + sovCollective(uint64(l))
	if len(m.SpendingPools) > 0 {
		for _, e := range m.SpendingPools {
			l = e.Size()
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	if m.ClaimStart != 0 {
		n += 1 + sovCollective(uint64(m.ClaimStart))
	}
	if m.ClaimPeriod != 0 {
		n += 1 + sovCollective(uint64(m.ClaimPeriod))
	}
	if m.ClaimEnd != 0 {
		n += 1 + sovCollective(uint64(m.ClaimEnd))
	}
	if m.VoteQuorum != 0 {
		n += 1 + sovCollective(uint64(m.VoteQuorum))
	}
	if m.VotePeriod != 0 {
		n += 1 + sovCollective(uint64(m.VotePeriod))
	}
	if m.VoteEnactment != 0 {
		n += 1 + sovCollective(uint64(m.VoteEnactment))
	}
	if len(m.Donations) > 0 {
		for _, e := range m.Donations {
			l = e.Size()
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	if m.LastDistribution != 0 {
		n += 1 + sovCollective(uint64(m.LastDistribution))
	}
	return n
}

func (m *CollectiveContributor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCollective(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCollective(uint64(l))
	}
	if len(m.Bonds) > 0 {
		for _, e := range m.Bonds {
			l = e.Size()
			n += 1 + l + sovCollective(uint64(l))
		}
	}
	if m.Locking != 0 {
		n += 1 + sovCollective(uint64(m.Locking))
	}
	l = m.Donation.Size()
	n += 1 + l + sovCollective(uint64(l))
	if m.DonationLock {
		n += 2
	}
	return n
}

func sovCollective(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollective(x uint64) (n int) {
	return sovCollective(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Any", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Any = bool(v != 0)
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollective
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollective
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCollective
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCollective
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollective
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnersWhitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnersWhitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnersWhitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollective
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCollective
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCollective
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCollective
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCollective
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedSpendingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedSpendingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedSpendingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCollective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Collective) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collective: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collective: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CollectiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnersWhitelist", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OwnersWhitelist.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpendingPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpendingPools = append(m.SpendingPools, WeightedSpendingPool{})
			if err := m.SpendingPools[len(m.SpendingPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimStart", wireType)
			}
			m.ClaimStart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimStart |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimPeriod", wireType)
			}
			m.ClaimPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			m.ClaimEnd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimEnd |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteQuorum", wireType)
			}
			m.VoteQuorum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteQuorum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotePeriod", wireType)
			}
			m.VotePeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotePeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteEnactment", wireType)
			}
			m.VoteEnactment = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteEnactment |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Donations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Donations = append(m.Donations, v)
			if err := m.Donations[len(m.Donations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Rewards = append(m.Rewards, v)
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDistribution", wireType)
			}
			m.LastDistribution = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDistribution |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectiveContributor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectiveContributor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectiveContributor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bonds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Coin
			m.Bonds = append(m.Bonds, v)
			if err := m.Bonds[len(m.Bonds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locking", wireType)
			}
			m.Locking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Locking |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Donation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollective
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollective
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Donation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DonationLock", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DonationLock = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCollective(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollective
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollective(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollective
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollective
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollective
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollective
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollective
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollective        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollective          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollective = fmt.Errorf("proto: unexpected end of group")
)
