// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kira/collectives/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/KiraCore/sekai/x/gov/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CollectiveRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *CollectiveRequest) Reset()         { *m = CollectiveRequest{} }
func (m *CollectiveRequest) String() string { return proto.CompactTextString(m) }
func (*CollectiveRequest) ProtoMessage()    {}
func (*CollectiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{0}
}
func (m *CollectiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectiveRequest.Merge(m, src)
}
func (m *CollectiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectiveRequest proto.InternalMessageInfo

func (m *CollectiveRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CollectiveResponse struct {
	Collective   Collective              `protobuf:"bytes,1,opt,name=collective,proto3" json:"collective"`
	Contributers []CollectiveContributor `protobuf:"bytes,2,rep,name=contributers,proto3" json:"contributers"`
}

func (m *CollectiveResponse) Reset()         { *m = CollectiveResponse{} }
func (m *CollectiveResponse) String() string { return proto.CompactTextString(m) }
func (*CollectiveResponse) ProtoMessage()    {}
func (*CollectiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{1}
}
func (m *CollectiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectiveResponse.Merge(m, src)
}
func (m *CollectiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectiveResponse proto.InternalMessageInfo

func (m *CollectiveResponse) GetCollective() Collective {
	if m != nil {
		return m.Collective
	}
	return Collective{}
}

func (m *CollectiveResponse) GetContributers() []CollectiveContributor {
	if m != nil {
		return m.Contributers
	}
	return nil
}

type CollectivesRequest struct {
}

func (m *CollectivesRequest) Reset()         { *m = CollectivesRequest{} }
func (m *CollectivesRequest) String() string { return proto.CompactTextString(m) }
func (*CollectivesRequest) ProtoMessage()    {}
func (*CollectivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{2}
}
func (m *CollectivesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesRequest.Merge(m, src)
}
func (m *CollectivesRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesRequest proto.InternalMessageInfo

type CollectivesResponse struct {
	Collectives []Collective `protobuf:"bytes,1,rep,name=collectives,proto3" json:"collectives"`
}

func (m *CollectivesResponse) Reset()         { *m = CollectivesResponse{} }
func (m *CollectivesResponse) String() string { return proto.CompactTextString(m) }
func (*CollectivesResponse) ProtoMessage()    {}
func (*CollectivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{3}
}
func (m *CollectivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesResponse.Merge(m, src)
}
func (m *CollectivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesResponse proto.InternalMessageInfo

func (m *CollectivesResponse) GetCollectives() []Collective {
	if m != nil {
		return m.Collectives
	}
	return nil
}

type CollectivesProposalsRequest struct {
}

func (m *CollectivesProposalsRequest) Reset()         { *m = CollectivesProposalsRequest{} }
func (m *CollectivesProposalsRequest) String() string { return proto.CompactTextString(m) }
func (*CollectivesProposalsRequest) ProtoMessage()    {}
func (*CollectivesProposalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{4}
}
func (m *CollectivesProposalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesProposalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesProposalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesProposalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesProposalsRequest.Merge(m, src)
}
func (m *CollectivesProposalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesProposalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesProposalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesProposalsRequest proto.InternalMessageInfo

type CollectivesProposalsResponse struct {
	Proposals []types.Proposal `protobuf:"bytes,9,rep,name=proposals,proto3" json:"proposals"`
}

func (m *CollectivesProposalsResponse) Reset()         { *m = CollectivesProposalsResponse{} }
func (m *CollectivesProposalsResponse) String() string { return proto.CompactTextString(m) }
func (*CollectivesProposalsResponse) ProtoMessage()    {}
func (*CollectivesProposalsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{5}
}
func (m *CollectivesProposalsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesProposalsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesProposalsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesProposalsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesProposalsResponse.Merge(m, src)
}
func (m *CollectivesProposalsResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesProposalsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesProposalsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesProposalsResponse proto.InternalMessageInfo

func (m *CollectivesProposalsResponse) GetProposals() []types.Proposal {
	if m != nil {
		return m.Proposals
	}
	return nil
}

type CollectivesByAccountRequest struct {
	Account string `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *CollectivesByAccountRequest) Reset()         { *m = CollectivesByAccountRequest{} }
func (m *CollectivesByAccountRequest) String() string { return proto.CompactTextString(m) }
func (*CollectivesByAccountRequest) ProtoMessage()    {}
func (*CollectivesByAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{6}
}
func (m *CollectivesByAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesByAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesByAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesByAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesByAccountRequest.Merge(m, src)
}
func (m *CollectivesByAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesByAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesByAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesByAccountRequest proto.InternalMessageInfo

func (m *CollectivesByAccountRequest) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type CollectivesByAccountResponse struct {
	Collectives   []Collective            `protobuf:"bytes,1,rep,name=collectives,proto3" json:"collectives"`
	Contributions []CollectiveContributor `protobuf:"bytes,2,rep,name=contributions,proto3" json:"contributions"`
}

func (m *CollectivesByAccountResponse) Reset()         { *m = CollectivesByAccountResponse{} }
func (m *CollectivesByAccountResponse) String() string { return proto.CompactTextString(m) }
func (*CollectivesByAccountResponse) ProtoMessage()    {}
func (*CollectivesByAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b68644cb3cfae16f, []int{7}
}
func (m *CollectivesByAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CollectivesByAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CollectivesByAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CollectivesByAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectivesByAccountResponse.Merge(m, src)
}
func (m *CollectivesByAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *CollectivesByAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectivesByAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CollectivesByAccountResponse proto.InternalMessageInfo

func (m *CollectivesByAccountResponse) GetCollectives() []Collective {
	if m != nil {
		return m.Collectives
	}
	return nil
}

func (m *CollectivesByAccountResponse) GetContributions() []CollectiveContributor {
	if m != nil {
		return m.Contributions
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectiveRequest)(nil), "kira.collectives.CollectiveRequest")
	proto.RegisterType((*CollectiveResponse)(nil), "kira.collectives.CollectiveResponse")
	proto.RegisterType((*CollectivesRequest)(nil), "kira.collectives.CollectivesRequest")
	proto.RegisterType((*CollectivesResponse)(nil), "kira.collectives.CollectivesResponse")
	proto.RegisterType((*CollectivesProposalsRequest)(nil), "kira.collectives.CollectivesProposalsRequest")
	proto.RegisterType((*CollectivesProposalsResponse)(nil), "kira.collectives.CollectivesProposalsResponse")
	proto.RegisterType((*CollectivesByAccountRequest)(nil), "kira.collectives.CollectivesByAccountRequest")
	proto.RegisterType((*CollectivesByAccountResponse)(nil), "kira.collectives.CollectivesByAccountResponse")
}

func init() { proto.RegisterFile("kira/collectives/query.proto", fileDescriptor_b68644cb3cfae16f) }

var fileDescriptor_b68644cb3cfae16f = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x6b, 0x55, 0x3a, 0x55, 0xd0, 0xb1, 0x60, 0xa9, 0xdd, 0x74, 0xcd, 0x5a, 0xb7,
	0x28, 0xcd, 0xb0, 0x55, 0x14, 0xbc, 0xd9, 0x0a, 0x1e, 0xbc, 0xb8, 0x15, 0x3c, 0xe8, 0x69, 0x12,
	0xc6, 0x38, 0x6c, 0x9b, 0xc9, 0x66, 0x26, 0xc5, 0xb2, 0xec, 0x41, 0xf1, 0x0f, 0x10, 0xfc, 0x1b,
	0x3c, 0x79, 0xf2, 0xe8, 0x7f, 0xb0, 0xc7, 0x05, 0x2f, 0x9e, 0x44, 0x5a, 0xcf, 0xfe, 0x0d, 0x92,
	0xc9, 0xa4, 0x49, 0xba, 0x4b, 0xba, 0xc8, 0xde, 0x26, 0xf3, 0xbe, 0xef, 0xbd, 0xcf, 0xfb, 0x31,
	0x81, 0xcd, 0x5d, 0x16, 0x10, 0xec, 0xf0, 0xd1, 0x88, 0x3a, 0x92, 0x4d, 0xa8, 0xc0, 0x7b, 0x21,
	0x0d, 0xa6, 0x96, 0x1f, 0x70, 0xc9, 0xd1, 0x95, 0xc8, 0x6a, 0x65, 0xac, 0x8d, 0x9b, 0xc7, 0xf4,
	0xe9, 0x39, 0x76, 0x6a, 0xdc, 0x71, 0xb8, 0x18, 0x73, 0x81, 0x6d, 0x22, 0x68, 0x1c, 0x0d, 0x4f,
	0xb6, 0x6d, 0x2a, 0xc9, 0x36, 0xf6, 0x89, 0xcb, 0x3c, 0x22, 0x19, 0xf7, 0xb4, 0xb6, 0xe6, 0x72,
	0x97, 0xab, 0x23, 0x8e, 0x4e, 0xfa, 0xb6, 0xe9, 0x72, 0xee, 0x8e, 0x28, 0x26, 0x3e, 0xc3, 0xc4,
	0xf3, 0xb8, 0x54, 0x2e, 0x42, 0x5b, 0x5b, 0xda, 0xaa, 0xbe, 0xec, 0xf0, 0x0d, 0x96, 0x6c, 0x4c,
	0x85, 0x24, 0x63, 0x5f, 0x0b, 0xae, 0x2b, 0x46, 0x97, 0x4f, 0x22, 0x89, 0xcf, 0x05, 0x19, 0xc5,
	0x06, 0x73, 0x0b, 0x5e, 0x1d, 0x2c, 0x68, 0x87, 0x74, 0x2f, 0xa4, 0x42, 0x22, 0x04, 0xcb, 0x1e,
	0x19, 0xd3, 0x3a, 0xd8, 0x00, 0x9d, 0xca, 0x50, 0x9d, 0xcd, 0xaf, 0x00, 0xa2, 0xac, 0x52, 0xf8,
	0xdc, 0x13, 0x14, 0xf5, 0x21, 0x4c, 0xab, 0x55, 0x0e, 0xd5, 0x5e, 0xd3, 0x5a, 0xee, 0x91, 0x95,
	0x7a, 0xf6, 0xcb, 0x87, 0xbf, 0x5a, 0xa5, 0x61, 0xc6, 0x0b, 0xed, 0xc0, 0x4b, 0x0e, 0xf7, 0x64,
	0xc0, 0xec, 0x50, 0xd2, 0x40, 0xd4, 0xd7, 0x36, 0xce, 0x75, 0xaa, 0xbd, 0xad, 0xa2, 0x28, 0x83,
	0x44, 0xcf, 0x03, 0x1d, 0x30, 0x17, 0xc2, 0xac, 0x65, 0x61, 0x85, 0xae, 0xcb, 0x7c, 0x0d, 0xaf,
	0xe5, 0x6e, 0x75, 0x0d, 0x4f, 0x60, 0x35, 0x93, 0xa5, 0x0e, 0x54, 0xfa, 0xd3, 0x14, 0x91, 0x75,
	0x33, 0xd7, 0xe1, 0x8d, 0x4c, 0xf0, 0xe7, 0xba, 0xcd, 0x8b, 0xdc, 0x2f, 0x61, 0xf3, 0x64, 0xb3,
	0x86, 0x78, 0x00, 0x2b, 0xc9, 0x68, 0x44, 0xbd, 0xa2, 0x10, 0x50, 0x8c, 0xe0, 0xf2, 0x89, 0x95,
	0xe8, 0x75, 0xe2, 0x54, 0x6a, 0x3e, 0xcc, 0xa5, 0xed, 0x4f, 0x1f, 0x3b, 0x0e, 0x0f, 0x3d, 0x99,
	0x8c, 0xb2, 0x0e, 0x2f, 0x92, 0xf8, 0x46, 0x4f, 0x33, 0xf9, 0x34, 0xbf, 0x83, 0x1c, 0x51, 0xc6,
	0xf3, 0x2c, 0xdb, 0x82, 0x5e, 0xc0, 0xcb, 0x8b, 0xc9, 0x44, 0x1b, 0xfb, 0x7f, 0xd3, 0xcd, 0xc7,
	0xe8, 0xfd, 0x2d, 0xc3, 0xf3, 0x3b, 0xd1, 0x33, 0x42, 0x1f, 0x01, 0x84, 0xa9, 0x23, 0xda, 0x2c,
	0x0a, 0xab, 0x7b, 0xd2, 0xb8, 0x55, 0x2c, 0x8a, 0xcb, 0x37, 0xef, 0x7e, 0xf8, 0xf1, 0xe7, 0xf3,
	0x5a, 0x1b, 0x6d, 0xe2, 0x82, 0xf7, 0x8d, 0xf7, 0xa3, 0xc7, 0x71, 0x80, 0xde, 0x03, 0x58, 0xcd,
	0x34, 0x13, 0x15, 0xa6, 0x48, 0x76, 0xa2, 0xd1, 0x5e, 0xa1, 0xd2, 0x24, 0x6d, 0x45, 0xd2, 0x42,
	0xeb, 0x45, 0x24, 0x02, 0x7d, 0x01, 0xb0, 0x76, 0xd2, 0x8a, 0xa1, 0x6e, 0x61, 0x9a, 0xe5, 0x4d,
	0x6d, 0x58, 0xa7, 0x95, 0x6b, 0x3c, 0x4b, 0xe1, 0x75, 0xd0, 0xed, 0x22, 0xbc, 0xee, 0x62, 0x63,
	0xd1, 0xb7, 0x3c, 0xe7, 0x62, 0xf1, 0x56, 0x70, 0x2e, 0xaf, 0xf6, 0x0a, 0xce, 0x63, 0xfb, 0x6c,
	0x3e, 0x52, 0x9c, 0xf7, 0x51, 0xaf, 0xb0, 0x8d, 0x5d, 0x7b, 0xda, 0xd5, 0x4f, 0x04, 0xef, 0xeb,
	0xc3, 0x41, 0xff, 0xe9, 0xe1, 0xcc, 0x00, 0x47, 0x33, 0x03, 0xfc, 0x9e, 0x19, 0xe0, 0xd3, 0xdc,
	0x28, 0x1d, 0xcd, 0x8d, 0xd2, 0xcf, 0xb9, 0x51, 0x7a, 0xd5, 0x75, 0x99, 0x7c, 0x1b, 0xda, 0x96,
	0xc3, 0xc7, 0xf8, 0x19, 0x0b, 0xc8, 0x80, 0x07, 0x14, 0x0b, 0xba, 0x4b, 0x18, 0x7e, 0x97, 0xcb,
	0x21, 0xa7, 0x3e, 0x15, 0xf6, 0x05, 0xf5, 0xdb, 0xbd, 0xf7, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x8c,
	0xf1, 0xd9, 0xca, 0x65, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Collective queries a collective
	Collective(ctx context.Context, in *CollectiveRequest, opts ...grpc.CallOption) (*CollectiveResponse, error)
	// Collectives query list of all staking collectives (output list of names),
	// if `name` / `id` is specified then output full details of a single collective.
	Collectives(ctx context.Context, in *CollectivesRequest, opts ...grpc.CallOption) (*CollectivesResponse, error)
	// list id of all proposals in regards to staking collectives,
	// (or proposals in regards to a specific collective if `name` / `id` is specified in the query)
	CollectivesProposals(ctx context.Context, in *CollectivesProposalsRequest, opts ...grpc.CallOption) (*CollectivesProposalsResponse, error)
	// query list of staking collectives by an individual KIRA address
	CollectivesByAccount(ctx context.Context, in *CollectivesByAccountRequest, opts ...grpc.CallOption) (*CollectivesByAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Collective(ctx context.Context, in *CollectiveRequest, opts ...grpc.CallOption) (*CollectiveResponse, error) {
	out := new(CollectiveResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Query/Collective", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Collectives(ctx context.Context, in *CollectivesRequest, opts ...grpc.CallOption) (*CollectivesResponse, error) {
	out := new(CollectivesResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Query/Collectives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectivesProposals(ctx context.Context, in *CollectivesProposalsRequest, opts ...grpc.CallOption) (*CollectivesProposalsResponse, error) {
	out := new(CollectivesProposalsResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Query/CollectivesProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectivesByAccount(ctx context.Context, in *CollectivesByAccountRequest, opts ...grpc.CallOption) (*CollectivesByAccountResponse, error) {
	out := new(CollectivesByAccountResponse)
	err := c.cc.Invoke(ctx, "/kira.collectives.Query/CollectivesByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Collective queries a collective
	Collective(context.Context, *CollectiveRequest) (*CollectiveResponse, error)
	// Collectives query list of all staking collectives (output list of names),
	// if `name` / `id` is specified then output full details of a single collective.
	Collectives(context.Context, *CollectivesRequest) (*CollectivesResponse, error)
	// list id of all proposals in regards to staking collectives,
	// (or proposals in regards to a specific collective if `name` / `id` is specified in the query)
	CollectivesProposals(context.Context, *CollectivesProposalsRequest) (*CollectivesProposalsResponse, error)
	// query list of staking collectives by an individual KIRA address
	CollectivesByAccount(context.Context, *CollectivesByAccountRequest) (*CollectivesByAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Collective(ctx context.Context, req *CollectiveRequest) (*CollectiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collective not implemented")
}
func (*UnimplementedQueryServer) Collectives(ctx context.Context, req *CollectivesRequest) (*CollectivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collectives not implemented")
}
func (*UnimplementedQueryServer) CollectivesProposals(ctx context.Context, req *CollectivesProposalsRequest) (*CollectivesProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectivesProposals not implemented")
}
func (*UnimplementedQueryServer) CollectivesByAccount(ctx context.Context, req *CollectivesByAccountRequest) (*CollectivesByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectivesByAccount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Collective_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collective(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Query/Collective",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collective(ctx, req.(*CollectiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Collectives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collectives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Query/Collectives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collectives(ctx, req.(*CollectivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectivesProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectivesProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Query/CollectivesProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectivesProposals(ctx, req.(*CollectivesProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectivesByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectivesByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectivesByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kira.collectives.Query/CollectivesByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectivesByAccount(ctx, req.(*CollectivesByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kira.collectives.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Collective",
			Handler:    _Query_Collective_Handler,
		},
		{
			MethodName: "Collectives",
			Handler:    _Query_Collectives_Handler,
		},
		{
			MethodName: "CollectivesProposals",
			Handler:    _Query_CollectivesProposals_Handler,
		},
		{
			MethodName: "CollectivesByAccount",
			Handler:    _Query_CollectivesByAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kira/collectives/query.proto",
}

func (m *CollectiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contributers) > 0 {
		for iNdEx := len(m.Contributers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contributers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Collective.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CollectivesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CollectivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Collectives) > 0 {
		for iNdEx := len(m.Collectives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collectives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CollectivesProposalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesProposalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesProposalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *CollectivesProposalsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesProposalsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesProposalsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	return len(dAtA) - i, nil
}

func (m *CollectivesByAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesByAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesByAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CollectivesByAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CollectivesByAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CollectivesByAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contributions) > 0 {
		for iNdEx := len(m.Contributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Contributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Collectives) > 0 {
		for iNdEx := len(m.Collectives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collectives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CollectiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CollectiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Collective.Size()
	n += 1 + l + sovQuery(uint64(l))
	if len(m.Contributers) > 0 {
		for _, e := range m.Contributers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CollectivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CollectivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collectives) > 0 {
		for _, e := range m.Collectives {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CollectivesProposalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CollectivesProposalsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *CollectivesByAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *CollectivesByAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collectives) > 0 {
		for _, e := range m.Collectives {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Contributions) > 0 {
		for _, e := range m.Contributions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CollectiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collective", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collective.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributers = append(m.Contributers, CollectiveContributor{})
			if err := m.Contributers[len(m.Contributers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectives = append(m.Collectives, Collective{})
			if err := m.Collectives[len(m.Collectives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesProposalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesProposalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesProposalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesProposalsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesProposalsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesProposalsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, types.Proposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesByAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesByAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesByAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CollectivesByAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CollectivesByAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CollectivesByAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collectives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collectives = append(m.Collectives, Collective{})
			if err := m.Collectives[len(m.Collectives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contributions = append(m.Contributions, CollectiveContributor{})
			if err := m.Contributions[len(m.Contributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
